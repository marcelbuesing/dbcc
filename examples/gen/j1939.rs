#[doc = "Generated based on\nFile Name: j1939.dbc\nDBC Version: xyz\nBlake2b: 6B285187C2BFF6B100EC48A5404DD97A1181D1D39BD755AEC78F5B4007A59A46088BCC34AAEB59BE2C95096E2BA151EF94F74D8C0F38EC0384C57062AD667462"]
use byteorder::{ByteOrder, BE, LE};
use futures::stream::{Stream, StreamExt, TryStreamExt};
use socketcan::{CANFilter, EFF_FLAG, EFF_MASK, SFF_MASK};
use tokio_socketcan::CANSocket;
#[allow(dead_code)]
pub const MESSAGE_ID_DISP1: u32 = 2561212158u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DRC: u32 = 2566746366u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EC2: u32 = 2566750206u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EEC7: u32 = 2566755582u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EEC8: u32 = 2566746110u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EFL_P5: u32 = 2566752510u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EFL_P6: u32 = 2566752254u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EFL_P7: u32 = 2566751998u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EFL_P8: u32 = 2566751742u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EFL_P9: u32 = 2566751486u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EGRBV: u32 = 2499641854u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ESV1: u32 = 2566748158u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ESV2: u32 = 2566747902u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ESV3: u32 = 2566747646u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ESV4: u32 = 2566747390u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ESV5: u32 = 2566747134u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ESV6: u32 = 2566746878u32;
#[allow(dead_code)]
pub const MESSAGE_ID_FLIC: u32 = 2561277694u32;
#[allow(dead_code)]
pub const MESSAGE_ID_J2012: u32 = 2633861886u32;
#[allow(dead_code)]
pub const MESSAGE_ID_PTC1: u32 = 2566749438u32;
#[allow(dead_code)]
pub const MESSAGE_ID_SAS: u32 = 2565873150u32;
#[allow(dead_code)]
pub const MESSAGE_ID_SCR1: u32 = 2566745854u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TCI: u32 = 2566751230u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TRF2: u32 = 2566755838u32;
#[allow(dead_code)]
pub const MESSAGE_ID_VDS2: u32 = 2566752766u32;
#[allow(dead_code)]
pub const MESSAGE_ID_LF: u32 = 2633938942u32;
#[allow(dead_code)]
pub const MESSAGE_ID_LD: u32 = 2566799614u32;
#[allow(dead_code)]
pub const MESSAGE_ID_LC: u32 = 2365473278u32;
#[allow(dead_code)]
pub const MESSAGE_ID_LBC: u32 = 2365485822u32;
#[allow(dead_code)]
pub const MESSAGE_ID_IT6: u32 = 2633926654u32;
#[allow(dead_code)]
pub const MESSAGE_ID_IT5: u32 = 2633926398u32;
#[allow(dead_code)]
pub const MESSAGE_ID_IT4: u32 = 2633926142u32;
#[allow(dead_code)]
pub const MESSAGE_ID_IT3: u32 = 2633925886u32;
#[allow(dead_code)]
pub const MESSAGE_ID_IT2: u32 = 2633925630u32;
#[allow(dead_code)]
pub const MESSAGE_ID_IT1: u32 = 2633925374u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ISO3: u32 = 2633927422u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ISO2: u32 = 2633927166u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ISO1: u32 = 2633926910u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ISCS: u32 = 2566768894u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ISC: u32 = 2566769406u32;
#[allow(dead_code)]
pub const MESSAGE_ID_IO: u32 = 2566839550u32;
#[allow(dead_code)]
pub const MESSAGE_ID_IMT2: u32 = 2633934334u32;
#[allow(dead_code)]
pub const MESSAGE_ID_IMT1: u32 = 2566825726u32;
#[allow(dead_code)]
pub const MESSAGE_ID_IC2: u32 = 2566770942u32;
#[allow(dead_code)]
pub const MESSAGE_ID_IC1: u32 = 2566846206u32;
#[allow(dead_code)]
pub const MESSAGE_ID_HTR: u32 = 2566811134u32;
#[allow(dead_code)]
pub const MESSAGE_ID_HRW: u32 = 2298375934u32;
#[allow(dead_code)]
pub const MESSAGE_ID_HPG: u32 = 2565867774u32;
#[allow(dead_code)]
pub const MESSAGE_ID_HOURS: u32 = 2566841854u32;
#[allow(dead_code)]
pub const MESSAGE_ID_HBS: u32 = 2365449982u32;
#[allow(dead_code)]
pub const MESSAGE_ID_GTFI: u32 = 2633939198u32;
#[allow(dead_code)]
pub const MESSAGE_ID_GFP: u32 = 2633927678u32;
#[allow(dead_code)]
pub const MESSAGE_ID_GFI2: u32 = 2633925118u32;
#[allow(dead_code)]
pub const MESSAGE_ID_GFI1: u32 = 2633937662u32;
#[allow(dead_code)]
pub const MESSAGE_ID_GFD: u32 = 2566804990u32;
#[allow(dead_code)]
pub const MESSAGE_ID_GFC: u32 = 2633936894u32;
#[allow(dead_code)]
pub const MESSAGE_ID_SEP2: u32 = 2566757630u32;
#[allow(dead_code)]
pub const MESSAGE_ID_SEP1: u32 = 2566757886u32;
#[allow(dead_code)]
pub const MESSAGE_ID_PTODE: u32 = 2566759678u32;
#[allow(dead_code)]
pub const MESSAGE_ID_GFI3: u32 = 2432541438u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EFL_P4: u32 = 2566761214u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EEC6: u32 = 2432541694u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DC2: u32 = 2566759934u32;
#[allow(dead_code)]
pub const MESSAGE_ID_CRI1: u32 = 2566757374u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AHI2: u32 = 2566756862u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AFC2: u32 = 2566758654u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AFC1: u32 = 2566758910u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AAC2: u32 = 2566758142u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AAC1: u32 = 2566758398u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AHI1: u32 = 2566756606u32;
#[allow(dead_code)]
pub const MESSAGE_ID_RGAAQ: u32 = 2364546302u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TFAC: u32 = 2431654654u32;
#[allow(dead_code)]
pub const MESSAGE_ID_KL3: u32 = 2364545534u32;
#[allow(dead_code)]
pub const MESSAGE_ID_KL2: u32 = 2364545278u32;
#[allow(dead_code)]
pub const MESSAGE_ID_KL1: u32 = 2364545022u32;
#[allow(dead_code)]
pub const MESSAGE_ID_CCS: u32 = 2364544766u32;
#[allow(dead_code)]
pub const MESSAGE_ID_RGTARP: u32 = 2364544510u32;
#[allow(dead_code)]
pub const MESSAGE_ID_BI: u32 = 2364544254u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EBS11: u32 = 2349006590u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EBS12: u32 = 2566834686u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EBS21: u32 = 2550398718u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EBS22: u32 = 2566833406u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EBS23: u32 = 2365507326u32;
#[allow(dead_code)]
pub const MESSAGE_ID_GPM11: u32 = 2565013246u32;
#[allow(dead_code)]
pub const MESSAGE_ID_GPM12: u32 = 2566807038u32;
#[allow(dead_code)]
pub const MESSAGE_ID_GPM13: u32 = 2365480958u32;
#[allow(dead_code)]
pub const MESSAGE_ID_GPM14: u32 = 2566808062u32;
#[allow(dead_code)]
pub const MESSAGE_ID_GPM15: u32 = 2566808574u32;
#[allow(dead_code)]
pub const MESSAGE_ID_GPM16: u32 = 2566809086u32;
#[allow(dead_code)]
pub const MESSAGE_ID_GPM21: u32 = 2564947710u32;
#[allow(dead_code)]
pub const MESSAGE_ID_GPM22: u32 = 2566834430u32;
#[allow(dead_code)]
pub const MESSAGE_ID_GPM23: u32 = 2365481214u32;
#[allow(dead_code)]
pub const MESSAGE_ID_GPM24: u32 = 2566808318u32;
#[allow(dead_code)]
pub const MESSAGE_ID_GPM25: u32 = 2566808830u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ISO15765_FUNCT: u32 = 2564554494u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ISO15765_PHYS: u32 = 2564488958u32;
#[allow(dead_code)]
pub const MESSAGE_ID_NETWORK: u32 = 2565734142u32;
#[allow(dead_code)]
pub const MESSAGE_ID_RGE11: u32 = 2565144318u32;
#[allow(dead_code)]
pub const MESSAGE_ID_RGE21: u32 = 2565209854u32;
#[allow(dead_code)]
pub const MESSAGE_ID_RGE22: u32 = 2566806782u32;
#[allow(dead_code)]
pub const MESSAGE_ID_RGE23: u32 = 2566807294u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DM26: u32 = 2566764798u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DM18: u32 = 2564095742u32;
#[allow(dead_code)]
pub const MESSAGE_ID_XBR: u32 = 2349137662u32;
#[allow(dead_code)]
pub const MESSAGE_ID_WFI: u32 = 2566848510u32;
#[allow(dead_code)]
pub const MESSAGE_ID_VW: u32 = 2566843134u32;
#[allow(dead_code)]
pub const MESSAGE_ID_VEP3: u32 = 2566804222u32;
#[allow(dead_code)]
pub const MESSAGE_ID_VEP2: u32 = 2633928190u32;
#[allow(dead_code)]
pub const MESSAGE_ID_VP: u32 = 2566845438u32;
#[allow(dead_code)]
pub const MESSAGE_ID_VI: u32 = 2566843646u32;
#[allow(dead_code)]
pub const MESSAGE_ID_VH: u32 = 2566842366u32;
#[allow(dead_code)]
pub const MESSAGE_ID_VF: u32 = 2566809854u32;
#[allow(dead_code)]
pub const MESSAGE_ID_VDS: u32 = 2566842622u32;
#[allow(dead_code)]
pub const MESSAGE_ID_VDHR: u32 = 2566832638u32;
#[allow(dead_code)]
pub const MESSAGE_ID_VDC2: u32 = 2565868030u32;
#[allow(dead_code)]
pub const MESSAGE_ID_VDC1: u32 = 2566803454u32;
#[allow(dead_code)]
pub const MESSAGE_ID_VD: u32 = 2566840574u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TVI: u32 = 2633938686u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TTI2: u32 = 2633937150u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TTI1: u32 = 2633938174u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TSI: u32 = 2633938430u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TSC1: u32 = 2348875518u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TR7: u32 = 2566766846u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TR6: u32 = 2566765310u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TR5: u32 = 2566765566u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TR4: u32 = 2566765822u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TR3: u32 = 2566766078u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TR2: u32 = 2566766590u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TR1: u32 = 2566766334u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TPRS: u32 = 2561605374u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TPRI: u32 = 2566765054u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TP3: u32 = 2633923326u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TP2: u32 = 2633923070u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TP1: u32 = 2633922814u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TIRE: u32 = 2566845694u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TI1: u32 = 2566805246u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TFI: u32 = 2633939966u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TDI: u32 = 2633939710u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TDA: u32 = 2564161278u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TD: u32 = 2566842110u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TCW: u32 = 2566821630u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TCO1: u32 = 2365484286u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TCI6: u32 = 2566771710u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TCI5: u32 = 2566821886u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TCI4: u32 = 2566822142u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TCI3: u32 = 2566822398u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TCI2: u32 = 2566822654u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TCI1: u32 = 2633931774u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TCFG2: u32 = 2566802430u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TCFG: u32 = 2566841086u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TC1: u32 = 2348941054u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TC: u32 = 2566839806u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TAVG: u32 = 2633911806u32;
#[allow(dead_code)]
pub const MESSAGE_ID_SPR: u32 = 2566775550u32;
#[allow(dead_code)]
pub const MESSAGE_ID_SP2: u32 = 2566819838u32;
#[allow(dead_code)]
pub const MESSAGE_ID_SOFT: u32 = 2566839038u32;
#[allow(dead_code)]
pub const MESSAGE_ID_SHUTDOW: u32 = 2566841598u32;
#[allow(dead_code)]
pub const MESSAGE_ID_SERV: u32 = 2566832382u32;
#[allow(dead_code)]
pub const MESSAGE_ID_S2: u32 = 2633928446u32;
#[allow(dead_code)]
pub const MESSAGE_ID_RTC1: u32 = 2566804478u32;
#[allow(dead_code)]
pub const MESSAGE_ID_RF: u32 = 2566847486u32;
#[allow(dead_code)]
pub const MESSAGE_ID_RESET: u32 = 2631859966u32;
#[allow(dead_code)]
pub const MESSAGE_ID_RC: u32 = 2566840830u32;
#[allow(dead_code)]
pub const MESSAGE_ID_RBI: u32 = 2633930238u32;
#[allow(dead_code)]
pub const MESSAGE_ID_PTO: u32 = 2566844670u32;
#[allow(dead_code)]
pub const MESSAGE_ID_OWW: u32 = 2566770174u32;
#[allow(dead_code)]
pub const MESSAGE_ID_OHECS: u32 = 2566769662u32;
#[allow(dead_code)]
pub const MESSAGE_ID_OHCSS: u32 = 2566768638u32;
#[allow(dead_code)]
pub const MESSAGE_ID_OEL: u32 = 2365443326u32;
#[allow(dead_code)]
pub const MESSAGE_ID_MVS: u32 = 2566776318u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ML: u32 = 2566802686u32;
#[allow(dead_code)]
pub const MESSAGE_ID_MCI: u32 = 2566774014u32;
#[allow(dead_code)]
pub const MESSAGE_ID_MBT3: u32 = 2566823166u32;
#[allow(dead_code)]
pub const MESSAGE_ID_MBT2: u32 = 2566823422u32;
#[allow(dead_code)]
pub const MESSAGE_ID_MBT1: u32 = 2566823678u32;
#[allow(dead_code)]
pub const MESSAGE_ID_LVDD: u32 = 2432595710u32;
#[allow(dead_code)]
pub const MESSAGE_ID_LVD: u32 = 2365486590u32;
#[allow(dead_code)]
pub const MESSAGE_ID_LTP: u32 = 2365485566u32;
#[allow(dead_code)]
pub const MESSAGE_ID_LTFI: u32 = 2633939454u32;
#[allow(dead_code)]
pub const MESSAGE_ID_LSP: u32 = 2365486334u32;
#[allow(dead_code)]
pub const MESSAGE_ID_LOI: u32 = 2364542462u32;
#[allow(dead_code)]
pub const MESSAGE_ID_LMP: u32 = 2365486078u32;
#[allow(dead_code)]
pub const MESSAGE_ID_LFI: u32 = 2633937918u32;
#[allow(dead_code)]
pub const MESSAGE_ID_LFE: u32 = 2566845182u32;
#[allow(dead_code)]
pub const MESSAGE_ID_LFC: u32 = 2566842878u32;
#[allow(dead_code)]
pub const MESSAGE_ID_FWD: u32 = 2633883646u32;
#[allow(dead_code)]
pub const MESSAGE_ID_FMS: u32 = 2633880062u32;
#[allow(dead_code)]
pub const MESSAGE_ID_FLI2: u32 = 2566806526u32;
#[allow(dead_code)]
pub const MESSAGE_ID_FLI1: u32 = 2431649790u32;
#[allow(dead_code)]
pub const MESSAGE_ID_FL: u32 = 2633929214u32;
#[allow(dead_code)]
pub const MESSAGE_ID_FD: u32 = 2566831614u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ETH: u32 = 2566820094u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ETC8: u32 = 2364542206u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ETC7: u32 = 2566802174u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ETC6: u32 = 2633935870u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ETC5: u32 = 2633942014u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ETC4: u32 = 2633942526u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ETC3: u32 = 2633943038u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ETC2: u32 = 2565867006u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ETC1: u32 = 2364539646u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ET3: u32 = 2566810110u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ET2: u32 = 2566825214u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ET1: u32 = 2566844158u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ET: u32 = 2566785022u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ESC1: u32 = 2565868542u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ERC2: u32 = 2633941758u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ERC1: u32 = 2565865726u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EPT5: u32 = 2633932798u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EPT4: u32 = 2566824190u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EPT3: u32 = 2633933310u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EPT2: u32 = 2633933566u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EPT1: u32 = 2633933822u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EPD: u32 = 2566776062u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EP: u32 = 2566771454u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EOAC: u32 = 2566775806u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EO1: u32 = 2633935358u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EJM3: u32 = 2365447166u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EJM2: u32 = 2365446654u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EJM1: u32 = 2365446142u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EI: u32 = 2633929470u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EH: u32 = 2633937406u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EGF1: u32 = 2364541694u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EFS: u32 = 2566810366u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EFL_P3: u32 = 2566767102u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EFL_P2: u32 = 2566839294u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EFL_P1: u32 = 2566844414u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EES: u32 = 2633929726u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EEC5: u32 = 2566772222u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EEC4: u32 = 2633940734u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EEC3: u32 = 2566840318u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EEC2: u32 = 2364539902u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EEC1: u32 = 2364540158u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ECUID: u32 = 2566768126u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ECT1: u32 = 2566804734u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EC1: u32 = 2566841342u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EBC5: u32 = 2566767870u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EBC4: u32 = 2633936126u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EBC3: u32 = 2566827518u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EBC2: u32 = 2566832126u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EBC1: u32 = 2565865982u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EAC1: u32 = 2565867262u32;
#[allow(dead_code)]
pub const MESSAGE_ID_EAC: u32 = 2566821118u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DI: u32 = 2566810622u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DD: u32 = 2566847742u32;
#[allow(dead_code)]
pub const MESSAGE_ID_CSA: u32 = 2566768382u32;
#[allow(dead_code)]
pub const MESSAGE_ID_CVW: u32 = 2566811902u32;
#[allow(dead_code)]
pub const MESSAGE_ID_CTL: u32 = 2563768062u32;
#[allow(dead_code)]
pub const MESSAGE_ID_CT6: u32 = 2633924862u32;
#[allow(dead_code)]
pub const MESSAGE_ID_CT5: u32 = 2633924606u32;
#[allow(dead_code)]
pub const MESSAGE_ID_CT4: u32 = 2633924350u32;
#[allow(dead_code)]
pub const MESSAGE_ID_CT3: u32 = 2633924094u32;
#[allow(dead_code)]
pub const MESSAGE_ID_CT2: u32 = 2633923838u32;
#[allow(dead_code)]
pub const MESSAGE_ID_CT1: u32 = 2633923582u32;
#[allow(dead_code)]
pub const MESSAGE_ID_CMI: u32 = 2633878014u32;
#[allow(dead_code)]
pub const MESSAGE_ID_CM3: u32 = 2566771966u32;
#[allow(dead_code)]
pub const MESSAGE_ID_CM1: u32 = 2564882174u32;
#[allow(dead_code)]
pub const MESSAGE_ID_CL: u32 = 2563833598u32;
#[allow(dead_code)]
pub const MESSAGE_ID_CI: u32 = 2566843390u32;
#[allow(dead_code)]
pub const MESSAGE_ID_CCVS: u32 = 2566844926u32;
#[allow(dead_code)]
pub const MESSAGE_ID_CCSS: u32 = 2566843902u32;
#[allow(dead_code)]
pub const MESSAGE_ID_CCC: u32 = 2566809598u32;
#[allow(dead_code)]
pub const MESSAGE_ID_CBI: u32 = 2633940222u32;
#[allow(dead_code)]
pub const MESSAGE_ID_CACI: u32 = 2566775294u32;
#[allow(dead_code)]
pub const MESSAGE_ID_BT1: u32 = 2566803710u32;
#[allow(dead_code)]
pub const MESSAGE_ID_BM: u32 = 2566809342u32;
#[allow(dead_code)]
pub const MESSAGE_ID_BJM3: u32 = 2365446910u32;
#[allow(dead_code)]
pub const MESSAGE_ID_BJM2: u32 = 2365446398u32;
#[allow(dead_code)]
pub const MESSAGE_ID_BJM1: u32 = 2365445886u32;
#[allow(dead_code)]
pub const MESSAGE_ID_B: u32 = 2566847230u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AWPP: u32 = 2566848254u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ATS: u32 = 2631728894u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ATR: u32 = 2631794430u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AT: u32 = 2633934846u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ASC6: u32 = 2362572542u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ASC5: u32 = 2365478910u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ASC4: u32 = 2566805758u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ASC3: u32 = 2566806014u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ASC2: u32 = 2362638078u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ASC1: u32 = 2365479678u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AS: u32 = 2566837758u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AP: u32 = 2633922558u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AMB2: u32 = 2566775038u32;
#[allow(dead_code)]
pub const MESSAGE_ID_WSMEM: u32 = 2633895166u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DM8: u32 = 2566836478u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DM7: u32 = 2565078782u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DM6: u32 = 2566836222u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DM5: u32 = 2566835966u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DM4: u32 = 2566835710u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DM3: u32 = 2566835454u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DM25: u32 = 2566764542u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DM24: u32 = 2566764286u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DM23: u32 = 2555576062u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DM22: u32 = 2562981630u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DM21: u32 = 2562850558u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DM20: u32 = 2562916094u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DM2: u32 = 2566835198u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DM19: u32 = 2564030206u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DM17: u32 = 2564226814u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DM16: u32 = 2564292350u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DM15: u32 = 2564357886u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DM14: u32 = 2564423422u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DM13: u32 = 2564816638u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DM12: u32 = 2566837502u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DM11: u32 = 2566837246u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DM10: u32 = 2566836990u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DM1: u32 = 2566834942u32;
#[allow(dead_code)]
pub const MESSAGE_ID_UTACR: u32 = 2566780926u32;
#[allow(dead_code)]
pub const MESSAGE_ID_UTACP: u32 = 2566781182u32;
#[allow(dead_code)]
pub const MESSAGE_ID_UTACE: u32 = 2566778366u32;
#[allow(dead_code)]
pub const MESSAGE_ID_UPCACR: u32 = 2566778622u32;
#[allow(dead_code)]
pub const MESSAGE_ID_UPCACP: u32 = 2566778878u32;
#[allow(dead_code)]
pub const MESSAGE_ID_UPCAC: u32 = 2566779134u32;
#[allow(dead_code)]
pub const MESSAGE_ID_UPBACR: u32 = 2566779390u32;
#[allow(dead_code)]
pub const MESSAGE_ID_UPBACP: u32 = 2566779646u32;
#[allow(dead_code)]
pub const MESSAGE_ID_UPBAC: u32 = 2566779902u32;
#[allow(dead_code)]
pub const MESSAGE_ID_UPACCR: u32 = 2566780158u32;
#[allow(dead_code)]
pub const MESSAGE_ID_UPAACP: u32 = 2566780414u32;
#[allow(dead_code)]
pub const MESSAGE_ID_UPAAC: u32 = 2566780670u32;
#[allow(dead_code)]
pub const MESSAGE_ID_UAAC: u32 = 2566781438u32;
#[allow(dead_code)]
pub const MESSAGE_ID_GTACR: u32 = 2566784254u32;
#[allow(dead_code)]
pub const MESSAGE_ID_GTACP: u32 = 2566784510u32;
#[allow(dead_code)]
pub const MESSAGE_ID_GTACE: u32 = 2566781694u32;
#[allow(dead_code)]
pub const MESSAGE_ID_GPCACR: u32 = 2566781950u32;
#[allow(dead_code)]
pub const MESSAGE_ID_GPCACP: u32 = 2566782206u32;
#[allow(dead_code)]
pub const MESSAGE_ID_GPCAC: u32 = 2566782462u32;
#[allow(dead_code)]
pub const MESSAGE_ID_GPBACRP: u32 = 2566782718u32;
#[allow(dead_code)]
pub const MESSAGE_ID_GPBACP: u32 = 2566782974u32;
#[allow(dead_code)]
pub const MESSAGE_ID_GPBAC: u32 = 2566783230u32;
#[allow(dead_code)]
pub const MESSAGE_ID_GPAACR: u32 = 2566783486u32;
#[allow(dead_code)]
pub const MESSAGE_ID_GPAACP: u32 = 2566783742u32;
#[allow(dead_code)]
pub const MESSAGE_ID_GPAAC: u32 = 2566783998u32;
#[allow(dead_code)]
pub const MESSAGE_ID_GAAC: u32 = 2566784766u32;
#[allow(dead_code)]
pub const MESSAGE_ID_BUSC: u32 = 2566776830u32;
#[allow(dead_code)]
pub const MESSAGE_ID_BPCAC: u32 = 2566777342u32;
#[allow(dead_code)]
pub const MESSAGE_ID_BPBAC: u32 = 2566777598u32;
#[allow(dead_code)]
pub const MESSAGE_ID_BPAAC: u32 = 2566777854u32;
#[allow(dead_code)]
pub const MESSAGE_ID_BGSC: u32 = 2566777086u32;
#[allow(dead_code)]
pub const MESSAGE_ID_BAAC: u32 = 2566778110u32;
#[allow(dead_code)]
pub const MESSAGE_ID_WSMSTR: u32 = 2633895422u32;
#[allow(dead_code)]
pub const MESSAGE_ID_CA: u32 = 2566838526u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ACL: u32 = 2565799678u32;
#[allow(dead_code)]
pub const MESSAGE_ID_XFER: u32 = 2563440382u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TPDT: u32 = 2565603070u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TPCM: u32 = 2565668606u32;
#[allow(dead_code)]
pub const MESSAGE_ID_RQST2: u32 = 2563374846u32;
#[allow(dead_code)]
pub const MESSAGE_ID_RQST: u32 = 2565537534u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DM29: u32 = 2560556798u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DM28: u32 = 2566750462u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DM27: u32 = 2566750974u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ATI2: u32 = 2566748414u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ATI1: u32 = 2566748670u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AAC3: u32 = 2566745598u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AAC4: u32 = 2566745342u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AETC: u32 = 2566754558u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AFSS: u32 = 2566749950u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AT1I1: u32 = 2565869310u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AT1I2: u32 = 2566763774u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AT1O1: u32 = 2565869566u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AT1O2: u32 = 2566763518u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AT2I1: u32 = 2565869822u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AT2I2: u32 = 2566763006u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AT2O1: u32 = 2565870078u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AT2O2: u32 = 2566762750u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ATGP1: u32 = 2566753534u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ATGP2: u32 = 2566753278u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ATM2: u32 = 2566762494u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ATS1: u32 = 2566749182u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ATS2: u32 = 2566748926u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AUXIO1: u32 = 2566838782u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AUXIO2: u32 = 2561146622u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AUXIO3: u32 = 2561081086u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AUXIO4: u32 = 2561015550u32;
#[allow(dead_code)]
pub const MESSAGE_ID_BSA: u32 = 2566746622u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AMB: u32 = 2566845950u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AIR2: u32 = 2566840062u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AIR1: u32 = 2566827774u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AI: u32 = 2566846974u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AF2: u32 = 2633935614u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ACC2: u32 = 2566803966u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ACC1: u32 = 2432593918u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AC: u32 = 2633935102u32;
#[allow(dead_code)]
pub const MESSAGE_ID_AAI: u32 = 2633927934u32;
#[allow(dead_code)]
pub const MESSAGE_ID_A1: u32 = 2566847998u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ACKM: u32 = 2565406462u32;
#[allow(dead_code)]
pub const MESSAGE_ID_ATM1: u32 = 2566763262u32;
#[allow(dead_code)]
pub const MESSAGE_ID_DC1: u32 = 2566803198u32;
#[allow(dead_code)]
pub const MESSAGE_ID_FWSS1: u32 = 2565870334u32;
#[allow(dead_code)]
pub const MESSAGE_ID_FWSS2: u32 = 2566762238u32;
#[allow(dead_code)]
pub const MESSAGE_ID_SSI: u32 = 2364543998u32;
#[allow(dead_code)]
pub const MESSAGE_ID_TRF1: u32 = 2566846718u32;
#[allow(dead_code)]
pub const MESSAGE_ID_VEP1: u32 = 2566846462u32;
#[allow(dead_code)]
pub const MESSAGE_ID_WCM2: u32 = 2566760702u32;
#[allow(dead_code)]
pub const MESSAGE_ID_WCM1: u32 = 2566760958u32;
#[allow(dead_code)]
pub const MESSAGE_ID_VROM: u32 = 2633869310u32;
#[allow(dead_code)]
pub const MESSAGE_ID_VREP: u32 = 2365433598u32;
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TextDisplayInstructions2561212158 {
    HldDsplyPrsntlyDsplydInfrmtnShl,
    ClrDsplyDsplydInfrmtnShldBDltdN,
    X1110reserved,
    OvrwrtSbstrngAPrtnOfPrsntlyDspl,
    OvrwrtDsplyPrsntlyDsplydInfrmtn,
    AppndAtEndOfDsplyTrnsmttdInfrmt,
    XValue(u8),
}
impl From<u8> for TextDisplayInstructions2561212158 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::HldDsplyPrsntlyDsplydInfrmtnShl,
            0 => Self::ClrDsplyDsplydInfrmtnShldBDltdN,
            5 => Self::X1110reserved,
            4 => Self::OvrwrtSbstrngAPrtnOfPrsntlyDspl,
            3 => Self::OvrwrtDsplyPrsntlyDsplydInfrmtn,
            2 => Self::AppndAtEndOfDsplyTrnsmttdInfrmt,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum MovementStatusOfRamp32566746366 {
    NotAvailable,
    Error,
    RampBeingMoved,
    RampNotBeingMoved,
    XValue(u8),
}
impl From<u8> for MovementStatusOfRamp32566746366 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::RampBeingMoved,
            0 => Self::RampNotBeingMoved,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EnableStatusOfRamp32566746366 {
    NotAvailable,
    Error,
    RampEnabled,
    RampDisabled,
    XValue(u8),
}
impl From<u8> for EnableStatusOfRamp32566746366 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::RampEnabled,
            0 => Self::RampDisabled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RetractStatusOfRamp32566746366 {
    NotAvailable,
    Error,
    RampEx,
    RampRetracted,
    XValue(u8),
}
impl From<u8> for RetractStatusOfRamp32566746366 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::RampEx,
            0 => Self::RampRetracted,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum MovementStatusOfRamp22566746366 {
    NotAvailable,
    Error,
    RampBeingMoved,
    RampNotBeingMoved,
    XValue(u8),
}
impl From<u8> for MovementStatusOfRamp22566746366 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::RampBeingMoved,
            0 => Self::RampNotBeingMoved,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EnableStatusOfRamp22566746366 {
    NotAvailable,
    Error,
    RampEnabled,
    RampDisabled,
    XValue(u8),
}
impl From<u8> for EnableStatusOfRamp22566746366 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::RampEnabled,
            0 => Self::RampDisabled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RetractStatusOfRamp22566746366 {
    NotAvailable,
    Error,
    RampEx,
    RampRetracted,
    XValue(u8),
}
impl From<u8> for RetractStatusOfRamp22566746366 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::RampEx,
            0 => Self::RampRetracted,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum MovementStatusOfRamp12566746366 {
    NotAvailable,
    Error,
    RampBeingMoved,
    RampNotBeingMoved,
    XValue(u8),
}
impl From<u8> for MovementStatusOfRamp12566746366 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::RampBeingMoved,
            0 => Self::RampNotBeingMoved,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EnableStatusOfRamp12566746366 {
    NotAvailable,
    Error,
    RampEnabled,
    RampDisabled,
    XValue(u8),
}
impl From<u8> for EnableStatusOfRamp12566746366 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::RampEnabled,
            0 => Self::RampDisabled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RetractStatusOfRamp12566746366 {
    NotAvailable,
    Error,
    RampEx,
    RampRetracted,
    XValue(u8),
}
impl From<u8> for RetractStatusOfRamp12566746366 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::RampEx,
            0 => Self::RampRetracted,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LaneDepartureWarningEnableCmd2561277694 {
    DonTCare,
    Reserved,
    EnableLaneDepartureWarning,
    DisableLaneDepartureWarning,
    XValue(u8),
}
impl From<u8> for LaneDepartureWarningEnableCmd2561277694 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::EnableLaneDepartureWarning,
            0 => Self::DisableLaneDepartureWarning,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum J2012dtcStatus2633861886 {
    DtcIsActive,
    DtcIsPreviouslyActive,
    XValue(bool),
}
impl From<bool> for J2012dtcStatus2633861886 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::DtcIsActive,
            0 => Self::DtcIsPreviouslyActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum PrtcltTrpActvRgnrtnInhbtdDtVhclS2566749438 {
    NotAvailable,
    ReservedForSaeAssignment,
    Inhibited,
    NotInhibited,
    XValue(u8),
}
impl From<u8> for PrtcltTrpActvRgnrtnInhbtdDtVhclS2566749438 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ReservedForSaeAssignment,
            1 => Self::Inhibited,
            0 => Self::NotInhibited,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum PrtcltTrpActvRgnrtnInhbtdDtOtOfN2566749438 {
    NotAvailable,
    ReservedForSaeAssignment,
    Inhibited,
    NotInhibited,
    XValue(u8),
}
impl From<u8> for PrtcltTrpActvRgnrtnInhbtdDtOtOfN2566749438 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ReservedForSaeAssignment,
            1 => Self::Inhibited,
            0 => Self::NotInhibited,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum PrtcltTrpActvRgnrtnInhbtdDtAcclP2566749438 {
    NotAvailable,
    ReservedForSaeAssignment,
    Inhibited,
    NotInhibited,
    XValue(u8),
}
impl From<u8> for PrtcltTrpActvRgnrtnInhbtdDtAcclP2566749438 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ReservedForSaeAssignment,
            1 => Self::Inhibited,
            0 => Self::NotInhibited,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum PrtcltTrpActvRgnrtnInhbtdDtptoAc2566749438 {
    NotAvailable,
    ReservedForSaeAssignment,
    Inhibited,
    NotInhibited,
    XValue(u8),
}
impl From<u8> for PrtcltTrpActvRgnrtnInhbtdDtptoAc2566749438 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ReservedForSaeAssignment,
            1 => Self::Inhibited,
            0 => Self::NotInhibited,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum PrtcltTrpActvRgnrtnInhbtdDtSrvcB2566749438 {
    NotAvailable,
    ReservedForSaeAssignment,
    Inhibited,
    NotInhibited,
    XValue(u8),
}
impl From<u8> for PrtcltTrpActvRgnrtnInhbtdDtSrvcB2566749438 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ReservedForSaeAssignment,
            1 => Self::Inhibited,
            0 => Self::NotInhibited,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum PrtcltTrpActvRgnrtnInhbtdDtCltch2566749438 {
    NotAvailable,
    ReservedForSaeAssignment,
    Inhibited,
    NotInhibited,
    XValue(u8),
}
impl From<u8> for PrtcltTrpActvRgnrtnInhbtdDtCltch2566749438 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ReservedForSaeAssignment,
            1 => Self::Inhibited,
            0 => Self::NotInhibited,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum PrtcltTrpActvRgnrtnInhbtdDtInhbt2566749438 {
    NotAvailable,
    ReservedForSaeAssignment,
    Inhibited,
    NotInhibited,
    XValue(u8),
}
impl From<u8> for PrtcltTrpActvRgnrtnInhbtdDtInhbt2566749438 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ReservedForSaeAssignment,
            1 => Self::Inhibited,
            0 => Self::NotInhibited,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum PrtcltTrpActvRgnrtnInhbtdStatus2566749438 {
    NotAvailable,
    ReservedForSaeAssignment,
    Inhibited,
    NotInhibited,
    XValue(u8),
}
impl From<u8> for PrtcltTrpActvRgnrtnInhbtdStatus2566749438 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ReservedForSaeAssignment,
            1 => Self::Inhibited,
            0 => Self::NotInhibited,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ParticulateTrapStatus2566749438 {
    NotAvailable,
    ReservedForSaeAssignment,
    RegenerationNeededHighestLevel,
    RegenerationNeededModerateLevel,
    RegenerationNeededLowestLevel,
    RegenerationNotNeeded,
    XValue(u8),
}
impl From<u8> for ParticulateTrapStatus2566749438 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            6 => Self::ReservedForSaeAssignment,
            3 => Self::RegenerationNeededHighestLevel,
            2 => Self::RegenerationNeededModerateLevel,
            1 => Self::RegenerationNeededLowestLevel,
            0 => Self::RegenerationNotNeeded,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum PrtcltTrpActvRegenerationStatus2566749438 {
    NotAvailable,
    RgnrtnNddAtmtcllyInttdActvRgnrt,
    Active,
    NotActive,
    XValue(u8),
}
impl From<u8> for PrtcltTrpActvRegenerationStatus2566749438 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::RgnrtnNddAtmtcllyInttdActvRgnrt,
            1 => Self::Active,
            0 => Self::NotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum PrtcltTrpPssvRegenerationStatus2566749438 {
    NotAvailable,
    ReservedForSaeAssignment,
    Active,
    NotActive,
    XValue(u8),
}
impl From<u8> for PrtcltTrpPssvRegenerationStatus2566749438 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ReservedForSaeAssignment,
            1 => Self::Active,
            0 => Self::NotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ParticulateTrapLampCmd2566749438 {
    NotAvailable,
    OnFastBlink,
    ReservedForSaeAssignment,
    OnSolid,
    Off,
    XValue(u8),
}
impl From<u8> for ParticulateTrapLampCmd2566749438 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            4 => Self::OnFastBlink,
            6 => Self::ReservedForSaeAssignment,
            1 => Self::OnSolid,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SteerAngleSensorCalibrated2565873150 {
    NotAvailable,
    Reserved,
    SasCalibrated,
    SasNotCalibrated,
    XValue(u8),
}
impl From<u8> for SteerAngleSensorCalibrated2565873150 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::SasCalibrated,
            0 => Self::SasNotCalibrated,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SteerAngleSensorActiveMode2565873150 {
    NotAvailable,
    Reserved,
    NormalModeActive,
    ProgrammingModeActive,
    XValue(u8),
}
impl From<u8> for SteerAngleSensorActiveMode2565873150 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::NormalModeActive,
            0 => Self::ProgrammingModeActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SteerWheelAngleRangeCounterType2565873150 {
    SignalNotAvailable,
    NotDefined,
    AbsNumberOfCounts,
    RelativeNumberOfCounts,
    XValue(u8),
}
impl From<u8> for SteerWheelAngleRangeCounterType2565873150 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::SignalNotAvailable,
            2 => Self::NotDefined,
            1 => Self::AbsNumberOfCounts,
            0 => Self::RelativeNumberOfCounts,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransferCaseStatus2566751230 {
    Error,
    TrnsfrCsShftInPrgrssGrNtCnfrmed,
    WheelLow,
    Neutral,
    WheelHigh,
    XValue(u8),
}
impl From<u8> for TransferCaseStatus2566751230 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            6 => Self::Error,
            5 => Self::TrnsfrCsShftInPrgrssGrNtCnfrmed,
            4 => Self::WheelLow,
            2 => Self::Neutral,
            1 => Self::WheelHigh,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransOilLevelSwitch2566755838 {
    NotAvailable,
    Error,
    FullNotEmpty,
    Empty,
    XValue(u8),
}
impl From<u8> for TransOilLevelSwitch2566755838 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::FullNotEmpty,
            0 => Self::Empty,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransOilFilterRestrictionSwitch2566755838 {
    NotAvailable,
    Error,
    RestrictionExistsOnOilFilter,
    NoRestriction,
    XValue(u8),
}
impl From<u8> for TransOilFilterRestrictionSwitch2566755838 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::RestrictionExistsOnOilFilter,
            0 => Self::NoRestriction,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ImplementRearWorkLight2566799614 {
    NotAvailable,
    FaultDetected,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for ImplementRearWorkLight2566799614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::FaultDetected,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ImplementLeftForwardWorkLight2566799614 {
    NotAvailable,
    FaultDetected,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for ImplementLeftForwardWorkLight2566799614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::FaultDetected,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ImplementRightForwardWorkLight2566799614 {
    NotAvailable,
    FaultDetected,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for ImplementRightForwardWorkLight2566799614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::FaultDetected,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ImplementLeftFacingWorkLight2566799614 {
    NotAvailable,
    FaultDetected,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for ImplementLeftFacingWorkLight2566799614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::FaultDetected,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ImplementRightFacingWorkLight2566799614 {
    NotAvailable,
    FaultDetected,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for ImplementRightFacingWorkLight2566799614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::FaultDetected,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ImplementOemOption1Light2566799614 {
    NotAvailable,
    FaultDetected,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for ImplementOemOption1Light2566799614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::FaultDetected,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ImplementOemOption2Light2566799614 {
    NotAvailable,
    FaultDetected,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for ImplementOemOption2Light2566799614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::FaultDetected,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrctrFrontHighMountedWorkLights2566799614 {
    NotAvailable,
    FaultDetected,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for TrctrFrontHighMountedWorkLights2566799614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::FaultDetected,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrctorFrontLowMountedWorkLights2566799614 {
    NotAvailable,
    FaultDetected,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for TrctorFrontLowMountedWorkLights2566799614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::FaultDetected,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrctorSideHighMountedWorkLights2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u8),
}
impl From<u8> for TrctorSideHighMountedWorkLights2566799614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::FaultDetected,
            1 => Self::Activated,
            0 => Self::Deactivated,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TractorSideLowMountedWorkLights2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u8),
}
impl From<u8> for TractorSideLowMountedWorkLights2566799614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::FaultDetected,
            1 => Self::Activated,
            0 => Self::Deactivated,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrctorRearHighMountedWorkLights2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u8),
}
impl From<u8> for TrctorRearHighMountedWorkLights2566799614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::FaultDetected,
            1 => Self::Activated,
            0 => Self::Deactivated,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TractorRearLowMountedWorkLights2566799614 {
    NotAvailable,
    FaultDetected,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for TractorRearLowMountedWorkLights2566799614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::FaultDetected,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrctrUndersideMountedWorkLights2566799614 {
    NotAvailable,
    FaultDetected,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for TrctrUndersideMountedWorkLights2566799614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::FaultDetected,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RearFogLights2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u8),
}
impl From<u8> for RearFogLights2566799614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::FaultDetected,
            1 => Self::Activated,
            0 => Self::Deactivated,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TractorMarkerLight2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u8),
}
impl From<u8> for TractorMarkerLight2566799614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::FaultDetected,
            1 => Self::Activated,
            0 => Self::Deactivated,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ImplementMarkerLight2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u8),
}
impl From<u8> for ImplementMarkerLight2566799614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::FaultDetected,
            1 => Self::Activated,
            0 => Self::Deactivated,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TractorClearanceLight2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u8),
}
impl From<u8> for TractorClearanceLight2566799614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::FaultDetected,
            1 => Self::Activated,
            0 => Self::Deactivated,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ImplementClearanceLight2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u8),
}
impl From<u8> for ImplementClearanceLight2566799614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::FaultDetected,
            1 => Self::Activated,
            0 => Self::Deactivated,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LeftStopLight2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u8),
}
impl From<u8> for LeftStopLight2566799614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::FaultDetected,
            1 => Self::Activated,
            0 => Self::Deactivated,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RightStopLight2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u8),
}
impl From<u8> for RightStopLight2566799614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::FaultDetected,
            1 => Self::Activated,
            0 => Self::Deactivated,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum CenterStopLight2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u8),
}
impl From<u8> for CenterStopLight2566799614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::FaultDetected,
            1 => Self::Activated,
            0 => Self::Deactivated,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum BackUpLightAndAlarmHorn2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u8),
}
impl From<u8> for BackUpLightAndAlarmHorn2566799614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::FaultDetected,
            1 => Self::Activated,
            0 => Self::Deactivated,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LeftTurnSignalLights2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u8),
}
impl From<u8> for LeftTurnSignalLights2566799614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::FaultDetected,
            1 => Self::Activated,
            0 => Self::Deactivated,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RightTurnSignalLights2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u8),
}
impl From<u8> for RightTurnSignalLights2566799614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::FaultDetected,
            1 => Self::Activated,
            0 => Self::Deactivated,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RotatingBeaconLight2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u8),
}
impl From<u8> for RotatingBeaconLight2566799614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::FaultDetected,
            1 => Self::Activated,
            0 => Self::Deactivated,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TractorFrontFogLights2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u8),
}
impl From<u8> for TractorFrontFogLights2566799614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::FaultDetected,
            1 => Self::Activated,
            0 => Self::Deactivated,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum HighBeamHeadLightData2566799614 {
    NotAvailable,
    FaultDetected,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for HighBeamHeadLightData2566799614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::FaultDetected,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LowBeamHeadLightData2566799614 {
    NotAvailable,
    FaultDetected,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for LowBeamHeadLightData2566799614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::FaultDetected,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AltBeamHeadLightData2566799614 {
    NotAvailable,
    FaultDetected,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for AltBeamHeadLightData2566799614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::FaultDetected,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RunningLight2566799614 {
    NotAvailable,
    FaultDetected,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for RunningLight2566799614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::FaultDetected,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ImplementRearWorkLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for ImplementRearWorkLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ImplmentLeftForwardWorkLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for ImplmentLeftForwardWorkLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ImplmntRightForwardWorkLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for ImplmntRightForwardWorkLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LightingDataRqCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for LightingDataRqCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ImplementLeftFacingWorkLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for ImplementLeftFacingWorkLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ImplmentRightFacingWorkLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for ImplmentRightFacingWorkLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ImplementOemOption1LightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for ImplementOemOption1LightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ImplementOemOption2LightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for ImplementOemOption2LightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrctrFrntHghMuntedWorkLightsCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for TrctrFrntHghMuntedWorkLightsCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrctrFrntLwMountedWorkLightsCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for TrctrFrntLwMountedWorkLightsCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrctrSdHighMountedWorkLightsCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for TrctrSdHighMountedWorkLightsCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrctrSdeLowMountedWorkLightsCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for TrctrSdeLowMountedWorkLightsCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrctrRrHighMountedWorkLightsCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for TrctrRrHighMountedWorkLightsCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrctrRarLowMountedWorkLightsCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for TrctrRarLowMountedWorkLightsCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrctrUndrsdMountedWorkLightsCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for TrctrUndrsdMountedWorkLightsCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RearFogLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for RearFogLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TractorMarkerLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for TractorMarkerLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ImplementMarkerLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for ImplementMarkerLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TractorClearanceLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for TractorClearanceLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ImplementClearanceLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for ImplementClearanceLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LeftStopLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for LeftStopLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RightStopLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for RightStopLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum CenterStopLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for CenterStopLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum BackUpLightAndAlarmHornCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for BackUpLightAndAlarmHornCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LeftTurnSignalLightsCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for LeftTurnSignalLightsCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RightTurnSignalLightsCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for RightTurnSignalLightsCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RotatingBeaconLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for RotatingBeaconLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TractorFrontFogLightsCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for TractorFrontFogLightsCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum HighBeamHeadLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for HighBeamHeadLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LowBeamHeadLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for LowBeamHeadLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AltBeamHeadLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for AltBeamHeadLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RunningLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u8),
}
impl From<u8> for RunningLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonTCare,
            2 => Self::Reserved,
            1 => Self::Activate,
            0 => Self::Deactivate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum BladeCtrlMode2365485822 {
    InactiveAutomaticMode,
    AutomaticMode,
    ManualMode,
    XValue(u8),
}
impl From<u8> for BladeCtrlMode2365485822 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            2 => Self::InactiveAutomaticMode,
            1 => Self::AutomaticMode,
            0 => Self::ManualMode,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngOprtrPrmryIntrmdtSpdSlctStte2566768894 {
    NotAvailable,
    SaeReserved,
    Thr1101CtrlSttIsIscSttng1Thru13,
    CtrlSttIsIscFnctnltyIsNtRqdEngO,
    XValue(u8),
}
impl From<u8> for EngOprtrPrmryIntrmdtSpdSlctStte2566768894 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            14 => Self::SaeReserved,
            1 => Self::Thr1101CtrlSttIsIscSttng1Thru13,
            0 => Self::CtrlSttIsIscFnctnltyIsNtRqdEngO,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngOprtrPrmryIntrmdtSpeedSelect2566769406 {
    NotAvailable,
    ErrorCondition,
    Thr1101IndctsThtIscSttng1Thr13I,
    IndctsThtIscFnctnltyIsNtRqdEngO,
    XValue(u8),
}
impl From<u8> for EngOprtrPrmryIntrmdtSpeedSelect2566769406 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            14 => Self::ErrorCondition,
            1 => Self::Thr1101IndctsThtIscSttng1Thr13I,
            0 => Self::IndctsThtIscFnctnltyIsNtRqdEngO,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum CabHeatingZone2566811134 {
    NotAvailable,
    Reserved,
    CabHeatingZoneOn,
    CabHeatingZoneOff,
    XValue(u8),
}
impl From<u8> for CabHeatingZone2566811134 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::CabHeatingZoneOn,
            0 => Self::CabHeatingZoneOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngHeatingZone2566811134 {
    NotAvailable,
    Reserved,
    EngHeatingZoneOn,
    EngHeatingZoneOff,
    XValue(u8),
}
impl From<u8> for EngHeatingZone2566811134 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::EngHeatingZoneOn,
            0 => Self::EngHeatingZoneOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum CabVentilation2566811134 {
    NotAvailable,
    Reserved,
    CabIsVentilated,
    CabNotVentilated,
    XValue(u8),
}
impl From<u8> for CabVentilation2566811134 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::CabIsVentilated,
            0 => Self::CabNotVentilated,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxilaryHeaterWaterPumpStatus2566811134 {
    NotAvailable,
    Reserved,
    WaterPumpIsRunning,
    WaterPumpIsNotRunning,
    XValue(u8),
}
impl From<u8> for AuxilaryHeaterWaterPumpStatus2566811134 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::WaterPumpIsRunning,
            0 => Self::WaterPumpIsNotRunning,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxHeaterMode2566811134 {
    NotAvailable,
    Error,
    X1101notDefined,
    NormalMode,
    EconomyMode,
    OffDtadrPrErpnRgltnsFrTrnsprtOf,
    HeaterNotActive,
    XValue(u8),
}
impl From<u8> for AuxHeaterMode2566811134 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            14 => Self::Error,
            4 => Self::X1101notDefined,
            3 => Self::NormalMode,
            2 => Self::EconomyMode,
            1 => Self::OffDtadrPrErpnRgltnsFrTrnsprtOf,
            0 => Self::HeaterNotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FireApparatusPumpEngagement2565867774 {
    NotAvailableNotInstalled,
    Error,
    PumpEngaged,
    PumpNotEngaged,
    XValue(u8),
}
impl From<u8> for FireApparatusPumpEngagement2565867774 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailableNotInstalled,
            2 => Self::Error,
            1 => Self::PumpEngaged,
            0 => Self::PumpNotEngaged,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngHydPressGovernorSwitch2565867774 {
    NotAvailable,
    ErrorIndicator,
    PressModeActive,
    PressModeInactive,
    XValue(u8),
}
impl From<u8> for EngHydPressGovernorSwitch2565867774 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::PressModeActive,
            0 => Self::PressModeInactive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngHydPrssGovernorModeIndicator2565867774 {
    NotAvailable,
    ErrorIndicator,
    Enabled,
    Disabled,
    XValue(u8),
}
impl From<u8> for EngHydPrssGovernorModeIndicator2565867774 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::Enabled,
            0 => Self::Disabled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum HydBrakeFluidLevelSwitch2365449982 {
    NotAvailable,
    ErrorIndicator,
    FluidLevelIsSufficient,
    FluidLevelIsNotSufficient,
    XValue(u8),
}
impl From<u8> for HydBrakeFluidLevelSwitch2365449982 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::FluidLevelIsSufficient,
            0 => Self::FluidLevelIsNotSufficient,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum HydBrakeSystemAudibleWarningCmd2365449982 {
    DontCare,
    Reserved,
    AudibleWarningOn,
    AudibleWarningOff,
    XValue(u8),
}
impl From<u8> for HydBrakeSystemAudibleWarningCmd2365449982 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DontCare,
            2 => Self::Reserved,
            1 => Self::AudibleWarningOn,
            0 => Self::AudibleWarningOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum HydBrkePressSupplyStateCircuit22365449982 {
    NotAvailable,
    ErrorIndicator,
    SupplyIsReliable,
    SupplyIsNotReliable,
    XValue(u8),
}
impl From<u8> for HydBrkePressSupplyStateCircuit22365449982 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::SupplyIsReliable,
            0 => Self::SupplyIsNotReliable,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum HydBrkePressSupplyStateCircuit12365449982 {
    NotAvailable,
    ErrorIndicator,
    SupplyIsReliable,
    SupplyIsNotReliable,
    XValue(u8),
}
impl From<u8> for HydBrkePressSupplyStateCircuit12365449982 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::SupplyIsReliable,
            0 => Self::SupplyIsNotReliable,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum HydBrkPressWarningStateCircuit22365449982 {
    NotAvailable,
    ErrorIndicator,
    PressLevelBelowWarningLevel,
    PressLevelSufficient,
    XValue(u8),
}
impl From<u8> for HydBrkPressWarningStateCircuit22365449982 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::PressLevelBelowWarningLevel,
            0 => Self::PressLevelSufficient,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum HydBrkPressWarningStateCircuit12365449982 {
    NotAvailable,
    ErrorIndicator,
    PressLevelBelowWarningLevel,
    PressLevelSufficient,
    XValue(u8),
}
impl From<u8> for HydBrkPressWarningStateCircuit12365449982 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::PressLevelBelowWarningLevel,
            0 => Self::PressLevelSufficient,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EnggmntSttusTransInputShaftPto12566759678 {
    NotAvailable,
    Error,
    DriveIsEngaged,
    DriveNotEngaged,
    XValue(u8),
}
impl From<u8> for EnggmntSttusTransInputShaftPto12566759678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DriveIsEngaged,
            0 => Self::DriveNotEngaged,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EnggmntSttusTransInputShaftPto22566759678 {
    NotAvailable,
    Error,
    DriveIsEngaged,
    DriveNotEngaged,
    XValue(u8),
}
impl From<u8> for EnggmntSttusTransInputShaftPto22566759678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DriveIsEngaged,
            0 => Self::DriveNotEngaged,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EnggmntSttusTransOutputShaftPto2566759678 {
    NotAvailable,
    Error,
    DriveIsEngaged,
    DriveNotEngaged,
    XValue(u8),
}
impl From<u8> for EnggmntSttusTransOutputShaftPto2566759678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DriveIsEngaged,
            0 => Self::DriveNotEngaged,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EnggmntSttsTrnsfrCsOtptShaftPto2566759678 {
    NotAvailable,
    Error,
    DriveIsEngaged,
    DriveNotEngaged,
    XValue(u8),
}
impl From<u8> for EnggmntSttsTrnsfrCsOtptShaftPto2566759678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DriveIsEngaged,
            0 => Self::DriveNotEngaged,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EnggmntCnsntTransInputShaftPto12566759678 {
    NotAvailable,
    Error,
    CnsentGivenPtoDriveMayBeEngaged,
    CnsntNtGvnPtoDrvShldNtBeEngaged,
    XValue(u8),
}
impl From<u8> for EnggmntCnsntTransInputShaftPto12566759678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CnsentGivenPtoDriveMayBeEngaged,
            0 => Self::CnsntNtGvnPtoDrvShldNtBeEngaged,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EnggmntCnsntTransInputShaftPto22566759678 {
    NotAvailable,
    Error,
    CnsentGivenPtoDriveMayBeEngaged,
    CnsntNtGvnPtoDrvShldNtBeEngaged,
    XValue(u8),
}
impl From<u8> for EnggmntCnsntTransInputShaftPto22566759678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CnsentGivenPtoDriveMayBeEngaged,
            0 => Self::CnsntNtGvnPtoDrvShldNtBeEngaged,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EnggmntCnsntTransOutputShaftPto2566759678 {
    NotAvailable,
    Error,
    CnsentGivenPtoDriveMayBeEngaged,
    CnsntNtGvnPtoDrvShldNtBeEngaged,
    XValue(u8),
}
impl From<u8> for EnggmntCnsntTransOutputShaftPto2566759678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CnsentGivenPtoDriveMayBeEngaged,
            0 => Self::CnsntNtGvnPtoDrvShldNtBeEngaged,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EnggmntCnsntTrnsfrCsOtptShftPto2566759678 {
    NotAvailable,
    Error,
    CnsentGivenPtoDriveMayBeEngaged,
    CnsntNtGvnPtoDrvShldNtBeEngaged,
    XValue(u8),
}
impl From<u8> for EnggmntCnsntTrnsfrCsOtptShftPto2566759678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CnsentGivenPtoDriveMayBeEngaged,
            0 => Self::CnsntNtGvnPtoDrvShldNtBeEngaged,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EnableSwitchTransInputShaftPto12566759678 {
    NotAvailable,
    Error,
    EnblSwtchOffPtoOperationDesired,
    EnblSwtchOffPtoOprtonNotDesired,
    XValue(u8),
}
impl From<u8> for EnableSwitchTransInputShaftPto12566759678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::EnblSwtchOffPtoOperationDesired,
            0 => Self::EnblSwtchOffPtoOprtonNotDesired,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EnableSwitchTransInputShaftPto22566759678 {
    NotAvailable,
    Error,
    EnblSwtchOffPtoOperationDesired,
    EnblSwtchOffPtoOprtonNotDesired,
    XValue(u8),
}
impl From<u8> for EnableSwitchTransInputShaftPto22566759678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::EnblSwtchOffPtoOperationDesired,
            0 => Self::EnblSwtchOffPtoOprtonNotDesired,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EnableSwitchTransOutputShaftPto2566759678 {
    NotAvailable,
    Error,
    EnblSwtchOffPtoOperationDesired,
    EnblSwtchOffPtoOprtonNotDesired,
    XValue(u8),
}
impl From<u8> for EnableSwitchTransOutputShaftPto2566759678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::EnblSwtchOffPtoOperationDesired,
            0 => Self::EnblSwtchOffPtoOprtonNotDesired,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EnblSwtchTrnsfrCsOutputShaftPto2566759678 {
    NotAvailable,
    Error,
    EnblSwtchOffPtoOperationDesired,
    EnblSwtchOffPtoOprtonNotDesired,
    XValue(u8),
}
impl From<u8> for EnblSwtchTrnsfrCsOutputShaftPto2566759678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::EnblSwtchOffPtoOperationDesired,
            0 => Self::EnblSwtchOffPtoOprtonNotDesired,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngTurboCompressorCtrl2432541694 {
    RprsntsFllyOpnTypcllyTrbCmprssr,
    XValue(f64),
}
impl From<f64> for EngTurboCompressorCtrl2432541694 {
    #[allow(dead_code)]
    fn from(val: f64) -> Self {
        match val as u64 {
            4 => Self::RprsntsFllyOpnTypcllyTrbCmprssr,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EnableStatusOfDoor102566759934 {
    NotAvailable,
    Error,
    DoorEnabled,
    DoorDisabled,
    XValue(u8),
}
impl From<u8> for EnableStatusOfDoor102566759934 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DoorEnabled,
            0 => Self::DoorDisabled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum OpenStatusOfDoor102566759934 {
    NotAvailable,
    Error,
    DoorOpened,
    DoorClosed,
    XValue(u8),
}
impl From<u8> for OpenStatusOfDoor102566759934 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DoorOpened,
            0 => Self::DoorClosed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LockStatusOfDoor102566759934 {
    NotAvailable,
    Error,
    Locked,
    Unlocked,
    XValue(u8),
}
impl From<u8> for LockStatusOfDoor102566759934 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Locked,
            0 => Self::Unlocked,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EnableStatusOfDoor92566759934 {
    NotAvailable,
    Error,
    DoorEnabled,
    DoorDisabled,
    XValue(u8),
}
impl From<u8> for EnableStatusOfDoor92566759934 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DoorEnabled,
            0 => Self::DoorDisabled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum OpenStatusOfDoor92566759934 {
    NotAvailable,
    Error,
    DoorOpened,
    DoorClosed,
    XValue(u8),
}
impl From<u8> for OpenStatusOfDoor92566759934 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DoorOpened,
            0 => Self::DoorClosed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LockStatusOfDoor92566759934 {
    NotAvailable,
    Error,
    Locked,
    Unlocked,
    XValue(u8),
}
impl From<u8> for LockStatusOfDoor92566759934 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Locked,
            0 => Self::Unlocked,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EnableStatusOfDoor82566759934 {
    NotAvailable,
    Error,
    DoorEnabled,
    DoorDisabled,
    XValue(u8),
}
impl From<u8> for EnableStatusOfDoor82566759934 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DoorEnabled,
            0 => Self::DoorDisabled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum OpenStatusOfDoor82566759934 {
    NotAvailable,
    Error,
    DoorOpened,
    DoorClosed,
    XValue(u8),
}
impl From<u8> for OpenStatusOfDoor82566759934 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DoorOpened,
            0 => Self::DoorClosed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LockStatusOfDoor82566759934 {
    NotAvailable,
    Error,
    Locked,
    Unlocked,
    XValue(u8),
}
impl From<u8> for LockStatusOfDoor82566759934 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Locked,
            0 => Self::Unlocked,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EnableStatusOfDoor72566759934 {
    NotAvailable,
    Error,
    DoorEnabled,
    DoorDisabled,
    XValue(u8),
}
impl From<u8> for EnableStatusOfDoor72566759934 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DoorEnabled,
            0 => Self::DoorDisabled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum OpenStatusOfDoor72566759934 {
    NotAvailable,
    Error,
    DoorOpened,
    DoorClosed,
    XValue(u8),
}
impl From<u8> for OpenStatusOfDoor72566759934 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DoorOpened,
            0 => Self::DoorClosed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LockStatusOfDoor72566759934 {
    NotAvailable,
    Error,
    Locked,
    Unlocked,
    XValue(u8),
}
impl From<u8> for LockStatusOfDoor72566759934 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Locked,
            0 => Self::Unlocked,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EnableStatusOfDoor62566759934 {
    NotAvailable,
    Error,
    DoorEnabled,
    DoorDisabled,
    XValue(u8),
}
impl From<u8> for EnableStatusOfDoor62566759934 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DoorEnabled,
            0 => Self::DoorDisabled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum OpenStatusOfDoor62566759934 {
    NotAvailable,
    Error,
    DoorOpened,
    DoorClosed,
    XValue(u8),
}
impl From<u8> for OpenStatusOfDoor62566759934 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DoorOpened,
            0 => Self::DoorClosed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LockStatusOfDoor62566759934 {
    NotAvailable,
    Error,
    Locked,
    Unlocked,
    XValue(u8),
}
impl From<u8> for LockStatusOfDoor62566759934 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Locked,
            0 => Self::Unlocked,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EnableStatusOfDoor52566759934 {
    NotAvailable,
    Error,
    DoorEnabled,
    DoorDisabled,
    XValue(u8),
}
impl From<u8> for EnableStatusOfDoor52566759934 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DoorEnabled,
            0 => Self::DoorDisabled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum OpenStatusOfDoor52566759934 {
    NotAvailable,
    Error,
    DoorOpened,
    DoorClosed,
    XValue(u8),
}
impl From<u8> for OpenStatusOfDoor52566759934 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DoorOpened,
            0 => Self::DoorClosed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LockStatusOfDoor52566759934 {
    NotAvailable,
    Error,
    Locked,
    Unlocked,
    XValue(u8),
}
impl From<u8> for LockStatusOfDoor52566759934 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Locked,
            0 => Self::Unlocked,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EnableStatusOfDoor42566759934 {
    NotAvailable,
    Error,
    DoorEnabled,
    DoorDisabled,
    XValue(u8),
}
impl From<u8> for EnableStatusOfDoor42566759934 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DoorEnabled,
            0 => Self::DoorDisabled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum OpenStatusOfDoor42566759934 {
    NotAvailable,
    Error,
    DoorOpened,
    DoorClosed,
    XValue(u8),
}
impl From<u8> for OpenStatusOfDoor42566759934 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DoorOpened,
            0 => Self::DoorClosed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LockStatusOfDoor42566759934 {
    NotAvailable,
    Error,
    Locked,
    Unlocked,
    XValue(u8),
}
impl From<u8> for LockStatusOfDoor42566759934 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Locked,
            0 => Self::Unlocked,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EnableStatusOfDoor32566759934 {
    NotAvailable,
    Error,
    DoorEnabled,
    DoorDisabled,
    XValue(u8),
}
impl From<u8> for EnableStatusOfDoor32566759934 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DoorEnabled,
            0 => Self::DoorDisabled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum OpenStatusOfDoor32566759934 {
    NotAvailable,
    Error,
    DoorOpened,
    DoorClosed,
    XValue(u8),
}
impl From<u8> for OpenStatusOfDoor32566759934 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DoorOpened,
            0 => Self::DoorClosed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LockStatusOfDoor32566759934 {
    NotAvailable,
    Error,
    Locked,
    Unlocked,
    XValue(u8),
}
impl From<u8> for LockStatusOfDoor32566759934 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Locked,
            0 => Self::Unlocked,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EnableStatusOfDoor22566759934 {
    NotAvailable,
    Error,
    DoorEnabled,
    DoorDisabled,
    XValue(u8),
}
impl From<u8> for EnableStatusOfDoor22566759934 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DoorEnabled,
            0 => Self::DoorDisabled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum OpenStatusOfDoor22566759934 {
    NotAvailable,
    Error,
    DoorOpened,
    DoorClosed,
    XValue(u8),
}
impl From<u8> for OpenStatusOfDoor22566759934 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DoorOpened,
            0 => Self::DoorClosed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LockStatusOfDoor22566759934 {
    NotAvailable,
    Error,
    Locked,
    Unlocked,
    XValue(u8),
}
impl From<u8> for LockStatusOfDoor22566759934 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Locked,
            0 => Self::Unlocked,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EnableStatusOfDoor12566759934 {
    NotAvailable,
    Error,
    DoorEnabled,
    DoorDisabled,
    XValue(u8),
}
impl From<u8> for EnableStatusOfDoor12566759934 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DoorEnabled,
            0 => Self::DoorDisabled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum OpenStatusOfDoor12566759934 {
    NotAvailable,
    Error,
    DoorOpened,
    DoorClosed,
    XValue(u8),
}
impl From<u8> for OpenStatusOfDoor12566759934 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DoorOpened,
            0 => Self::DoorClosed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LockStatusOfDoor12566759934 {
    NotAvailable,
    Error,
    Locked,
    Unlocked,
    XValue(u8),
}
impl From<u8> for LockStatusOfDoor12566759934 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Locked,
            0 => Self::Unlocked,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum CatalystReagentType2566757374 {
    NotAvailable,
    ErrrDtctdWthUrRgntTypeDetection,
    NtAblTDtrmneCatalystReagentType,
    To1100ReservedForSaeAssignment,
    CatalystReagentIsProper,
    CatalystReagentIsDiesel,
    CatalystReagentIsWater,
    CatalystReagentIsUrea,
    XValue(u8),
}
impl From<u8> for CatalystReagentType2566757374 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            14 => Self::ErrrDtctdWthUrRgntTypeDetection,
            13 => Self::NtAblTDtrmneCatalystReagentType,
            4 => Self::To1100ReservedForSaeAssignment,
            3 => Self::CatalystReagentIsProper,
            2 => Self::CatalystReagentIsDiesel,
            1 => Self::CatalystReagentIsWater,
            0 => Self::CatalystReagentIsUrea,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftrtratment2FuelEnableActuator2566758654 {
    NotAvailable,
    ReservedForSaeAssignment,
    Active,
    NotActive,
    XValue(u8),
}
impl From<u8> for Aftrtratment2FuelEnableActuator2566758654 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ReservedForSaeAssignment,
            1 => Self::Active,
            0 => Self::NotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftrtratment2RegenerationStatus2566758654 {
    NotAvailable,
    ReservedForSaeAssignment,
    Active,
    NotActive,
    XValue(u8),
}
impl From<u8> for Aftrtratment2RegenerationStatus2566758654 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ReservedForSaeAssignment,
            1 => Self::Active,
            0 => Self::NotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftertreatment2Ignt2566758654 {
    NotAvailable,
    ReservedForSaeAssignment,
    Active,
    NotActive,
    XValue(u8),
}
impl From<u8> for Aftertreatment2Ignt2566758654 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ReservedForSaeAssignment,
            1 => Self::Active,
            0 => Self::NotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftrtratment1FuelEnableActuator2566758910 {
    NotAvailable,
    ReservedForSaeAssignment,
    Active,
    NotActive,
    XValue(u8),
}
impl From<u8> for Aftrtratment1FuelEnableActuator2566758910 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ReservedForSaeAssignment,
            1 => Self::Active,
            0 => Self::NotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftrtratment1RegenerationStatus2566758910 {
    NotAvailable,
    ReservedForSaeAssignment,
    Active,
    NotActive,
    XValue(u8),
}
impl From<u8> for Aftrtratment1RegenerationStatus2566758910 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ReservedForSaeAssignment,
            1 => Self::Active,
            0 => Self::NotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftertreatment1Ignt2566758910 {
    NotAvailable,
    ReservedForSaeAssignment,
    Active,
    NotActive,
    XValue(u8),
}
impl From<u8> for Aftertreatment1Ignt2566758910 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ReservedForSaeAssignment,
            1 => Self::Active,
            0 => Self::NotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftrtreatment2AirEnableActuator2566758142 {
    NotAvailable,
    ReservedForSaeAssignment,
    Active,
    NotActive,
    XValue(u8),
}
impl From<u8> for Aftrtreatment2AirEnableActuator2566758142 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ReservedForSaeAssignment,
            1 => Self::Active,
            0 => Self::NotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftertreatment2PurgeAirActuator2566758142 {
    NotAvailable,
    ReservedForSaeAssignment,
    Active,
    NotActive,
    XValue(u8),
}
impl From<u8> for Aftertreatment2PurgeAirActuator2566758142 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ReservedForSaeAssignment,
            1 => Self::Active,
            0 => Self::NotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftrtrtmnt2AtmzationAirActuator2566758142 {
    NotAvailable,
    ReservedForSaeAssignment,
    Active,
    NotActive,
    XValue(u8),
}
impl From<u8> for Aftrtrtmnt2AtmzationAirActuator2566758142 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ReservedForSaeAssignment,
            1 => Self::Active,
            0 => Self::NotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftertreatment2AirSystemRelay2566758142 {
    NotAvailable,
    ReservedForSaeAssignment,
    Active,
    NotActive,
    XValue(u8),
}
impl From<u8> for Aftertreatment2AirSystemRelay2566758142 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ReservedForSaeAssignment,
            1 => Self::Active,
            0 => Self::NotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftrtreatment1AirEnableActuator2566758398 {
    NotAvailable,
    ReservedForSaeAssignment,
    Active,
    NotActive,
    XValue(u8),
}
impl From<u8> for Aftrtreatment1AirEnableActuator2566758398 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ReservedForSaeAssignment,
            1 => Self::Active,
            0 => Self::NotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftertreatment1PurgeAirActuator2566758398 {
    NotAvailable,
    ReservedForSaeAssignment,
    Active,
    NotActive,
    XValue(u8),
}
impl From<u8> for Aftertreatment1PurgeAirActuator2566758398 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ReservedForSaeAssignment,
            1 => Self::Active,
            0 => Self::NotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftrtrtmnt1AtmzationAirActuator2566758398 {
    NotAvailable,
    ReservedForSaeAssignment,
    Active,
    NotActive,
    XValue(u8),
}
impl From<u8> for Aftrtrtmnt1AtmzationAirActuator2566758398 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ReservedForSaeAssignment,
            1 => Self::Active,
            0 => Self::NotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftertreatment1AirSystemRelay2566758398 {
    NotAvailable,
    ReservedForSaeAssignment,
    Active,
    NotActive,
    XValue(u8),
}
impl From<u8> for Aftertreatment1AirSystemRelay2566758398 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ReservedForSaeAssignment,
            1 => Self::Active,
            0 => Self::NotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngCyl9CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u8),
}
impl From<u8> for EngCyl9CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CombustionExists,
            0 => Self::NoCombustion,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngCyl8CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u8),
}
impl From<u8> for EngCyl8CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CombustionExists,
            0 => Self::NoCombustion,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngCyl7CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u8),
}
impl From<u8> for EngCyl7CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CombustionExists,
            0 => Self::NoCombustion,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngCyl6CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u8),
}
impl From<u8> for EngCyl6CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CombustionExists,
            0 => Self::NoCombustion,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngCyl5CombustionStatus2364544766 {
    CombustionExists,
    NoCombustion,
    NotAvailable,
    Error,
    XValue(u8),
}
impl From<u8> for EngCyl5CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::CombustionExists,
            0 => Self::NoCombustion,
            3 => Self::NotAvailable,
            2 => Self::Error,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngCyl4CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u8),
}
impl From<u8> for EngCyl4CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CombustionExists,
            0 => Self::NoCombustion,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngCyl3CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u8),
}
impl From<u8> for EngCyl3CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CombustionExists,
            0 => Self::NoCombustion,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngCyl2CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u8),
}
impl From<u8> for EngCyl2CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CombustionExists,
            0 => Self::NoCombustion,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngCyl24CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u8),
}
impl From<u8> for EngCyl24CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CombustionExists,
            0 => Self::NoCombustion,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngCyl23CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u8),
}
impl From<u8> for EngCyl23CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CombustionExists,
            0 => Self::NoCombustion,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngCyl22CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u8),
}
impl From<u8> for EngCyl22CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CombustionExists,
            0 => Self::NoCombustion,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngCyl21CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u8),
}
impl From<u8> for EngCyl21CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CombustionExists,
            0 => Self::NoCombustion,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngCyl20CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u8),
}
impl From<u8> for EngCyl20CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CombustionExists,
            0 => Self::NoCombustion,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngCyl1CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u8),
}
impl From<u8> for EngCyl1CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CombustionExists,
            0 => Self::NoCombustion,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngCyl19CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u8),
}
impl From<u8> for EngCyl19CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CombustionExists,
            0 => Self::NoCombustion,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngCyl18CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u8),
}
impl From<u8> for EngCyl18CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CombustionExists,
            0 => Self::NoCombustion,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngCyl17CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u8),
}
impl From<u8> for EngCyl17CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CombustionExists,
            0 => Self::NoCombustion,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngCyl16CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u8),
}
impl From<u8> for EngCyl16CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CombustionExists,
            0 => Self::NoCombustion,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngCyl15CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u8),
}
impl From<u8> for EngCyl15CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CombustionExists,
            0 => Self::NoCombustion,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngCyl14CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u8),
}
impl From<u8> for EngCyl14CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CombustionExists,
            0 => Self::NoCombustion,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngCyl13CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u8),
}
impl From<u8> for EngCyl13CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CombustionExists,
            0 => Self::NoCombustion,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngCyl12CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u8),
}
impl From<u8> for EngCyl12CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CombustionExists,
            0 => Self::NoCombustion,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngCyl11CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u8),
}
impl From<u8> for EngCyl11CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CombustionExists,
            0 => Self::NoCombustion,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngCyl10CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u8),
}
impl From<u8> for EngCyl10CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CombustionExists,
            0 => Self::NoCombustion,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RqGenOverallPowerFactorLagging2364544510 {
    NotAvailable,
    Error,
    Lagging,
    Leading,
    XValue(u8),
}
impl From<u8> for RqGenOverallPowerFactorLagging2364544510 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Lagging,
            0 => Self::Leading,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum BladeRotationAngleFigureOfMerit2364544254 {
    AngleNotAvailable,
    AngleFailed,
    AngleDegraded,
    AngleFullyFunctional,
    XValue(u8),
}
impl From<u8> for BladeRotationAngleFigureOfMerit2364544254 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::AngleNotAvailable,
            2 => Self::AngleFailed,
            1 => Self::AngleDegraded,
            0 => Self::AngleFullyFunctional,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RelBladeHeightFigureOfMerit2364544254 {
    HeightNotAvailable,
    HeightFailed,
    HeightDegraded,
    HeightFullyFunctional,
    XValue(u8),
}
impl From<u8> for RelBladeHeightFigureOfMerit2364544254 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::HeightNotAvailable,
            2 => Self::HeightFailed,
            1 => Self::HeightDegraded,
            0 => Self::HeightFullyFunctional,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum VehicleType2349006590 {
    DollyAxle,
    TowingOrTowedVehicle,
    XValue(u8),
}
impl From<u8> for VehicleType2349006590 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::DollyAxle,
            0 => Self::TowingOrTowedVehicle,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum BrakeLightSwitch2349006590 {
    SwitchOn,
    SwitchOff,
    XValue(u8),
}
impl From<u8> for BrakeLightSwitch2349006590 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::SwitchOn,
            0 => Self::SwitchOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AsrEngineControlActive2349006590 {
    NotAvailable,
    Reserved,
    AsrEngineControlActive,
    AsrEngnCntrlPassiveButInstalled,
    XValue(u8),
}
impl From<u8> for AsrEngineControlActive2349006590 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::AsrEngineControlActive,
            0 => Self::AsrEngnCntrlPassiveButInstalled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AsrBreakControlActive2349006590 {
    Active,
    PassiveButInstalled,
    XValue(u8),
}
impl From<u8> for AsrBreakControlActive2349006590 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::Active,
            0 => Self::PassiveButInstalled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum VehicleRetarderCtrlActive2349006590 {
    Active,
    Passive,
    XValue(u8),
}
impl From<u8> for VehicleRetarderCtrlActive2349006590 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::Active,
            0 => Self::Passive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum VehicleAbsActive2349006590 {
    Active,
    PassivButInstalled,
    XValue(u8),
}
impl From<u8> for VehicleAbsActive2349006590 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::Active,
            0 => Self::PassivButInstalled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum PneumaticControlLine2566834686 {
    TowingVehWithPnCtrlLine,
    TowingVehWithoutPnCtrlLine,
    XValue(u8),
}
impl From<u8> for PneumaticControlLine2566834686 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::TowingVehWithPnCtrlLine,
            0 => Self::TowingVehWithoutPnCtrlLine,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AbsOffroadRequest2566834686 {
    AbsOffRoadSwitchOn,
    AbsOffRoadSwitchOff,
    XValue(u8),
}
impl From<u8> for AbsOffroadRequest2566834686 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::AbsOffRoadSwitchOn,
            0 => Self::AbsOffRoadSwitchOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TwoElCircuitsBrakeDemand2566834686 {
    TwoElCircuitBrakeAvailable,
    OneElCircuitBrakeAvailable,
    XValue(u8),
}
impl From<u8> for TwoElCircuitsBrakeDemand2566834686 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::TwoElCircuitBrakeAvailable,
            0 => Self::OneElCircuitBrakeAvailable,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum VehicleRetarderCtrlActive2566834686 {
    Active,
    Passive,
    XValue(u8),
}
impl From<u8> for VehicleRetarderCtrlActive2566834686 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::Active,
            0 => Self::Passive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SupplyLineBrakingRequest2550398718 {
    SupplyLineBrakingRequest,
    NoSupplyLineBrakingRequest,
    XValue(u8),
}
impl From<u8> for SupplyLineBrakingRequest2550398718 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::SupplyLineBrakingRequest,
            0 => Self::NoSupplyLineBrakingRequest,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum VdcActive2550398718 {
    Active,
    PassiveButInstalled,
    XValue(u8),
}
impl From<u8> for VdcActive2550398718 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::Active,
            0 => Self::PassiveButInstalled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AutomTowedVehBreakActive2550398718 {
    Active,
    Passive,
    XValue(u8),
}
impl From<u8> for AutomTowedVehBreakActive2550398718 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::Active,
            0 => Self::Passive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum VehicleServiceBrakeActive2550398718 {
    Active,
    Passive,
    XValue(u8),
}
impl From<u8> for VehicleServiceBrakeActive2550398718 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::Active,
            0 => Self::Passive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum VehicleRetarderCtrlActive2550398718 {
    Active,
    Passive,
    XValue(u8),
}
impl From<u8> for VehicleRetarderCtrlActive2550398718 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::Active,
            0 => Self::Passive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum VehicleAbsActive2550398718 {
    Active,
    PassivButInstalled,
    XValue(u8),
}
impl From<u8> for VehicleAbsActive2550398718 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::Active,
            0 => Self::PassivButInstalled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SupplyLineBrakingRequest2566833406 {
    SupplyLineBrakingRequest,
    NoSupplyLineBrakingRequest,
    XValue(u8),
}
impl From<u8> for SupplyLineBrakingRequest2566833406 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::SupplyLineBrakingRequest,
            0 => Self::NoSupplyLineBrakingRequest,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LoadingRampApproachAssist2566833406 {
    AssistanceActive,
    AssistanceNotActive,
    XValue(u8),
}
impl From<u8> for LoadingRampApproachAssist2566833406 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::AssistanceActive,
            0 => Self::AssistanceNotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SpringBrakeEngaged2566833406 {
    VehicleSpringBrakeIsEngaged,
    VehicleSpringBrakeIsReleased,
    XValue(u8),
}
impl From<u8> for SpringBrakeEngaged2566833406 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::VehicleSpringBrakeIsEngaged,
            0 => Self::VehicleSpringBrakeIsReleased,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ElectrLoadPropFunc2566833406 {
    VehicleWithElLoadProportion,
    VehicleWithoutElLoadProport,
    XValue(u8),
}
impl From<u8> for ElectrLoadPropFunc2566833406 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::VehicleWithElLoadProportion,
            0 => Self::VehicleWithoutElLoadProport,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SpringBrakeInstalled2566833406 {
    VehicleWithSpringBrakes,
    VehicleWithoutSpringBrakes,
    XValue(u8),
}
impl From<u8> for SpringBrakeInstalled2566833406 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::VehicleWithSpringBrakes,
            0 => Self::VehicleWithoutSpringBrakes,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum VehicleType2566833406 {
    DollyAxle,
    TowingOrTowedVehicle,
    XValue(u8),
}
impl From<u8> for VehicleType2566833406 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::DollyAxle,
            0 => Self::TowingOrTowedVehicle,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ElecSupplyOfNonBrakingSys2566833406 {
    SupplySwitchedOn,
    SupplySwitchedOff,
    XValue(u8),
}
impl From<u8> for ElecSupplyOfNonBrakingSys2566833406 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::SupplySwitchedOn,
            0 => Self::SupplySwitchedOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AmberWarningSignalReq2566833406 {
    TowedVehicleFailureIndicated,
    NoTowedVehicleFailureIndicat,
    XValue(u8),
}
impl From<u8> for AmberWarningSignalReq2566833406 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::TowedVehicleFailureIndicated,
            0 => Self::NoTowedVehicleFailureIndicat,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RedWarningSignalRequest2566833406 {
    TowedVehicleFailureIndicated,
    NoTowedVehicleFailureIndicat,
    XValue(u8),
}
impl From<u8> for RedWarningSignalRequest2566833406 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::TowedVehicleFailureIndicated,
            0 => Self::NoTowedVehicleFailureIndicat,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum VehicleElectrSupplySuff2566833406 {
    VehicleElSupplySufficient,
    VehicleElSupplyInsufficient,
    XValue(u8),
}
impl From<u8> for VehicleElectrSupplySuff2566833406 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::VehicleElSupplySufficient,
            0 => Self::VehicleElSupplyInsufficient,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AutomTowedVehBreakActive2566833406 {
    Active,
    Passive,
    XValue(u8),
}
impl From<u8> for AutomTowedVehBreakActive2566833406 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::Active,
            0 => Self::Passive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum VehicleServiceBrakeActive2566833406 {
    Active,
    Passive,
    XValue(u8),
}
impl From<u8> for VehicleServiceBrakeActive2566833406 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::Active,
            0 => Self::Passive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum VehicleRetarderCtrlActive2566833406 {
    Active,
    Passive,
    XValue(u8),
}
impl From<u8> for VehicleRetarderCtrlActive2566833406 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::Active,
            0 => Self::Passive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum VehicleAbsActive2566833406 {
    Active,
    PassivButInstalled,
    XValue(u8),
}
impl From<u8> for VehicleAbsActive2566833406 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::Active,
            0 => Self::PassivButInstalled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TyreWheelIdentTemp22365507326 {
    AxlePosition15,
    AxlePosition14,
    AxlePosition13,
    AxlePosition12,
    AxlePosition11,
    AxlePosition10,
    AxlePosition9,
    AxlePosition8,
    AxlePosition7,
    AxlePosition6,
    AxlePosition5,
    AxlePosition4,
    AxlePosition3,
    AxlePosition2,
    AxlePosition1,
    AxlePositionNotIdentified,
    XValue(u8),
}
impl From<u8> for TyreWheelIdentTemp22365507326 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::AxlePosition15,
            14 => Self::AxlePosition14,
            13 => Self::AxlePosition13,
            12 => Self::AxlePosition12,
            11 => Self::AxlePosition11,
            10 => Self::AxlePosition10,
            9 => Self::AxlePosition9,
            8 => Self::AxlePosition8,
            7 => Self::AxlePosition7,
            6 => Self::AxlePosition6,
            5 => Self::AxlePosition5,
            4 => Self::AxlePosition4,
            3 => Self::AxlePosition3,
            2 => Self::AxlePosition2,
            1 => Self::AxlePosition1,
            0 => Self::AxlePositionNotIdentified,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TyreWheelIdentTemp12365507326 {
    WheelPosition15,
    WheelPosition14,
    WheelPosition13,
    WheelPosition12,
    WheelPosition11,
    WheelPosition10,
    WheelPosition9,
    WheelPosition8,
    WheelPosition7,
    WheelPosition6,
    WheelPosition5,
    WheelPosition4,
    WheelPosition3,
    WheelPosition2,
    WheelPosition1,
    WheelPositionNotIdentified,
    XValue(u8),
}
impl From<u8> for TyreWheelIdentTemp12365507326 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::WheelPosition15,
            14 => Self::WheelPosition14,
            13 => Self::WheelPosition13,
            12 => Self::WheelPosition12,
            11 => Self::WheelPosition11,
            10 => Self::WheelPosition10,
            9 => Self::WheelPosition9,
            8 => Self::WheelPosition8,
            7 => Self::WheelPosition7,
            6 => Self::WheelPosition6,
            5 => Self::WheelPosition5,
            4 => Self::WheelPosition4,
            3 => Self::WheelPosition3,
            2 => Self::WheelPosition2,
            1 => Self::WheelPosition1,
            0 => Self::WheelPositionNotIdentified,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TyreWheelIdentPressure22365507326 {
    AxlePosition15,
    AxlePosition14,
    AxlePosition13,
    AxlePosition12,
    AxlePosition11,
    AxlePosition10,
    AxlePosition9,
    AxlePosition8,
    AxlePosition7,
    AxlePosition6,
    AxlePosition5,
    AxlePosition4,
    AxlePosition3,
    AxlePosition2,
    AxlePosition1,
    AxlePositionNotIdentified,
    XValue(u8),
}
impl From<u8> for TyreWheelIdentPressure22365507326 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::AxlePosition15,
            14 => Self::AxlePosition14,
            13 => Self::AxlePosition13,
            12 => Self::AxlePosition12,
            11 => Self::AxlePosition11,
            10 => Self::AxlePosition10,
            9 => Self::AxlePosition9,
            8 => Self::AxlePosition8,
            7 => Self::AxlePosition7,
            6 => Self::AxlePosition6,
            5 => Self::AxlePosition5,
            4 => Self::AxlePosition4,
            3 => Self::AxlePosition3,
            2 => Self::AxlePosition2,
            1 => Self::AxlePosition1,
            0 => Self::AxlePositionNotIdentified,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TyreWheelIdentPressure12365507326 {
    WheelPosition15,
    WheelPosition14,
    WheelPosition13,
    WheelPosition12,
    WheelPosition11,
    WheelPosition10,
    WheelPosition9,
    WheelPosition8,
    WheelPosition7,
    WheelPosition6,
    WheelPosition5,
    WheelPosition4,
    WheelPosition3,
    WheelPosition2,
    WheelPosition1,
    WheelPositionNotIdentified,
    XValue(u8),
}
impl From<u8> for TyreWheelIdentPressure12365507326 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::WheelPosition15,
            14 => Self::WheelPosition14,
            13 => Self::WheelPosition13,
            12 => Self::WheelPosition12,
            11 => Self::WheelPosition11,
            10 => Self::WheelPosition10,
            9 => Self::WheelPosition9,
            8 => Self::WheelPosition8,
            7 => Self::WheelPosition7,
            6 => Self::WheelPosition6,
            5 => Self::WheelPosition5,
            4 => Self::WheelPosition4,
            3 => Self::WheelPosition3,
            2 => Self::WheelPosition2,
            1 => Self::WheelPosition1,
            0 => Self::WheelPositionNotIdentified,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TyreWheelIdentLining22365507326 {
    AxlePosition15,
    AxlePosition14,
    AxlePosition13,
    AxlePosition12,
    AxlePosition11,
    AxlePosition10,
    AxlePosition9,
    AxlePosition8,
    AxlePosition7,
    AxlePosition6,
    AxlePosition5,
    AxlePosition4,
    AxlePosition3,
    AxlePosition2,
    AxlePosition1,
    AxlePositionNotIdentified,
    XValue(u8),
}
impl From<u8> for TyreWheelIdentLining22365507326 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::AxlePosition15,
            14 => Self::AxlePosition14,
            13 => Self::AxlePosition13,
            12 => Self::AxlePosition12,
            11 => Self::AxlePosition11,
            10 => Self::AxlePosition10,
            9 => Self::AxlePosition9,
            8 => Self::AxlePosition8,
            7 => Self::AxlePosition7,
            6 => Self::AxlePosition6,
            5 => Self::AxlePosition5,
            4 => Self::AxlePosition4,
            3 => Self::AxlePosition3,
            2 => Self::AxlePosition2,
            1 => Self::AxlePosition1,
            0 => Self::AxlePositionNotIdentified,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TyreWheelIdentLining12365507326 {
    WheelPosition15,
    WheelPosition14,
    WheelPosition13,
    WheelPosition12,
    WheelPosition11,
    WheelPosition10,
    WheelPosition9,
    WheelPosition8,
    WheelPosition7,
    WheelPosition6,
    WheelPosition5,
    WheelPosition4,
    WheelPosition3,
    WheelPosition2,
    WheelPosition1,
    WheelPositionNotIdentified,
    XValue(u8),
}
impl From<u8> for TyreWheelIdentLining12365507326 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::WheelPosition15,
            14 => Self::WheelPosition14,
            13 => Self::WheelPosition13,
            12 => Self::WheelPosition12,
            11 => Self::WheelPosition11,
            10 => Self::WheelPosition10,
            9 => Self::WheelPosition9,
            8 => Self::WheelPosition8,
            7 => Self::WheelPosition7,
            6 => Self::WheelPosition6,
            5 => Self::WheelPosition5,
            4 => Self::WheelPosition4,
            3 => Self::WheelPosition3,
            2 => Self::WheelPosition2,
            1 => Self::WheelPosition1,
            0 => Self::WheelPositionNotIdentified,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum VehiclePneumSupplySuff2365507326 {
    PneumaticSupplySufficient,
    PneumaticSupplyInsufficient,
    XValue(u8),
}
impl From<u8> for VehiclePneumSupplySuff2365507326 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::PneumaticSupplySufficient,
            0 => Self::PneumaticSupplyInsufficient,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum BrakeTemperatureStatus2365507326 {
    BrakeTemperatureNormal,
    BrakeTemperatureOutOfRange,
    XValue(u8),
}
impl From<u8> for BrakeTemperatureStatus2365507326 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::BrakeTemperatureNormal,
            0 => Self::BrakeTemperatureOutOfRange,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum BrakeLiningSufficient2365507326 {
    BrakeLiningsSufficient,
    BrakeLiningsInsufficient,
    XValue(u8),
}
impl From<u8> for BrakeLiningSufficient2365507326 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::BrakeLiningsSufficient,
            0 => Self::BrakeLiningsInsufficient,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TyrePressureSufficient2365507326 {
    TyrePressureSufficient,
    TyrePressureInsufficient,
    XValue(u8),
}
impl From<u8> for TyrePressureSufficient2365507326 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::TyrePressureSufficient,
            0 => Self::TyrePressureInsufficient,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum OddRequest2565013246 {
    TakeNoAction,
    OddOn,
    OddOff,
    XValue(u8),
}
impl From<u8> for OddRequest2565013246 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::TakeNoAction,
            1 => Self::OddOn,
            0 => Self::OddOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AntiTheftDeviceReq2565013246 {
    TakeNoAction,
    AntiTheftDeviceOn,
    AntiTheftDeviceOff,
    XValue(u8),
}
impl From<u8> for AntiTheftDeviceReq2565013246 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::TakeNoAction,
            1 => Self::AntiTheftDeviceOn,
            0 => Self::AntiTheftDeviceOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum VehicleType2565013246 {
    DollyAxle,
    TowingOrTowedVehicle,
    XValue(u8),
}
impl From<u8> for VehicleType2565013246 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::DollyAxle,
            0 => Self::TowingOrTowedVehicle,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngineTorqueMode2365480958 {
    NotAvailable,
    RemoteAccelerator,
    BrakingSystem,
    HighSpeedGovernor,
    TorqueLimiting,
    AbsControl,
    TransmissionControl,
    AsrControl,
    RoadSpeedGovernor,
    PtoGovernor,
    CruiseControl,
    AcceleratorPedalOperatorSelec,
    LowIdleGovernorNoRequestDe,
    XValue(u8),
}
impl From<u8> for EngineTorqueMode2365480958 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            11 => Self::RemoteAccelerator,
            10 => Self::BrakingSystem,
            9 => Self::HighSpeedGovernor,
            8 => Self::TorqueLimiting,
            7 => Self::AbsControl,
            6 => Self::TransmissionControl,
            5 => Self::AsrControl,
            4 => Self::RoadSpeedGovernor,
            3 => Self::PtoGovernor,
            2 => Self::CruiseControl,
            1 => Self::AcceleratorPedalOperatorSelec,
            0 => Self::LowIdleGovernorNoRequestDe,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngineRunning2365480958 {
    EngineRunning,
    EngineNotRunning,
    XValue(u8),
}
impl From<u8> for EngineRunning2365480958 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::EngineRunning,
            0 => Self::EngineNotRunning,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngineControlAllowed2365480958 {
    EngineControlAllowed,
    EngineControlNotAllowed,
    XValue(u8),
}
impl From<u8> for EngineControlAllowed2365480958 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::EngineControlAllowed,
            0 => Self::EngineControlNotAllowed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ClutchIndptdPtoFeedback2566808062 {
    Engaged,
    NotEngaged,
    XValue(u8),
}
impl From<u8> for ClutchIndptdPtoFeedback2566808062 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::Engaged,
            0 => Self::NotEngaged,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AccelPedalLowIdleSwitch2566808062 {
    InLowIdleCondition,
    NotInLowIdleCondition,
    XValue(u8),
}
impl From<u8> for AccelPedalLowIdleSwitch2566808062 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::InLowIdleCondition,
            0 => Self::NotInLowIdleCondition,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum StarterActive2566808062 {
    StarterActive,
    StarterNotActive,
    XValue(u8),
}
impl From<u8> for StarterActive2566808062 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::StarterActive,
            0 => Self::StarterNotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TorqueConvtOilTempWarning2566808062 {
    Warning,
    Prewarning,
    NoWarning,
    XValue(u8),
}
impl From<u8> for TorqueConvtOilTempWarning2566808062 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            2 => Self::Warning,
            1 => Self::Prewarning,
            0 => Self::NoWarning,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum PtoControlAllowed2566808062 {
    PtoControlAllowed,
    PtoControlNotAllowed,
    XValue(u8),
}
impl From<u8> for PtoControlAllowed2566808062 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::PtoControlAllowed,
            0 => Self::PtoControlNotAllowed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SecEngineMtdPtoFeedback2566808062 {
    LimitsActivated,
    LimitsNotActivated,
    XValue(u8),
}
impl From<u8> for SecEngineMtdPtoFeedback2566808062 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::LimitsActivated,
            0 => Self::LimitsNotActivated,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FirstEngineMtdPtoFeedback2566808062 {
    LimitsActivated,
    LimitsNotActivated,
    XValue(u8),
}
impl From<u8> for FirstEngineMtdPtoFeedback2566808062 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::LimitsActivated,
            0 => Self::LimitsNotActivated,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SecClutchDptdPtoFeedback2566808062 {
    Engaged,
    NotEngaged,
    XValue(u8),
}
impl From<u8> for SecClutchDptdPtoFeedback2566808062 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::Engaged,
            0 => Self::NotEngaged,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FirstClutchDpdtPtoFeedback2566808062 {
    Engaged,
    NotEngaged,
    XValue(u8),
}
impl From<u8> for FirstClutchDpdtPtoFeedback2566808062 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::Engaged,
            0 => Self::NotEngaged,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FuelLevelWarning2566808574 {
    FuelLevelWarningOn,
    FuelLevelWarningOff,
    XValue(u8),
}
impl From<u8> for FuelLevelWarning2566808574 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::FuelLevelWarningOn,
            0 => Self::FuelLevelWarningOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngineOilPressureWarning2566808574 {
    Warning,
    NoWarning,
    XValue(u8),
}
impl From<u8> for EngineOilPressureWarning2566808574 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::Warning,
            0 => Self::NoWarning,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngineCoolantTempWarning2566808574 {
    Warning,
    Prewarning,
    NoWarning,
    XValue(u8),
}
impl From<u8> for EngineCoolantTempWarning2566808574 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            2 => Self::Warning,
            1 => Self::Prewarning,
            0 => Self::NoWarning,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum VehicleType2564947710 {
    DollyAxle,
    TowingOrTowedVehicle,
    XValue(u8),
}
impl From<u8> for VehicleType2564947710 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::DollyAxle,
            0 => Self::TowingOrTowedVehicle,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AntiTheftDeviceStatus2566834430 {
    AntiTheftDeviceOn,
    AntiTheftDeviceOff,
    XValue(u8),
}
impl From<u8> for AntiTheftDeviceStatus2566834430 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::AntiTheftDeviceOn,
            0 => Self::AntiTheftDeviceOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum OddStatus2566834430 {
    OddActive,
    OddInactive,
    XValue(u8),
}
impl From<u8> for OddStatus2566834430 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::OddActive,
            0 => Self::OddInactive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SecEngineMtdPtoSwitch2566808318 {
    SwitchedOn,
    SwitchedOff,
    XValue(u8),
}
impl From<u8> for SecEngineMtdPtoSwitch2566808318 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::SwitchedOn,
            0 => Self::SwitchedOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SecClutchDpdtPtoSwitch2566808318 {
    SwitchedOn,
    SwitchedOff,
    XValue(u8),
}
impl From<u8> for SecClutchDpdtPtoSwitch2566808318 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::SwitchedOn,
            0 => Self::SwitchedOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FirstClutchDpdtPtoSwitch2566808318 {
    SwitchedOn,
    SwitchedOff,
    XValue(u8),
}
impl From<u8> for FirstClutchDpdtPtoSwitch2566808318 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::SwitchedOn,
            0 => Self::SwitchedOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum OperatingPanelActive2566808318 {
    OperatingPanelActive,
    OperatingPanelNotActive,
    XValue(u8),
}
impl From<u8> for OperatingPanelActive2566808318 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::OperatingPanelActive,
            0 => Self::OperatingPanelNotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RefusePackerStepSwitch2566808318 {
    SwitchedOn,
    SwitchedOff,
    XValue(u8),
}
impl From<u8> for RefusePackerStepSwitch2566808318 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::SwitchedOn,
            0 => Self::SwitchedOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngineStopSwitch2566808318 {
    SwitchedOn,
    SwitchedOff,
    XValue(u8),
}
impl From<u8> for EngineStopSwitch2566808318 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::SwitchedOn,
            0 => Self::SwitchedOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngineStartSwitch2566808318 {
    SwitchedOn,
    SwitchedOff,
    XValue(u8),
}
impl From<u8> for EngineStartSwitch2566808318 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::SwitchedOn,
            0 => Self::SwitchedOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum StarterLockoutSwitch2566808318 {
    SwitchedOn,
    SwitchedOff,
    XValue(u8),
}
impl From<u8> for StarterLockoutSwitch2566808318 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::SwitchedOn,
            0 => Self::SwitchedOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FirstEngineMtdPtoSwitch2566808318 {
    SwitchedOn,
    SwitchedOff,
    XValue(u8),
}
impl From<u8> for FirstEngineMtdPtoSwitch2566808318 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::SwitchedOn,
            0 => Self::SwitchedOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ClutchIndpdtPtoSwitch2566808318 {
    SwitchedOn,
    SwitchedOff,
    XValue(u8),
}
impl From<u8> for ClutchIndpdtPtoSwitch2566808318 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::SwitchedOn,
            0 => Self::SwitchedOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerLeftSideMarkerLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u8),
}
impl From<u8> for TrailerLeftSideMarkerLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::LampSLit,
            0 => Self::LampSNotLit,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerLeftReversingLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u8),
}
impl From<u8> for TrailerLeftReversingLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::LampSLit,
            0 => Self::LampSNotLit,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerLeftRearWidIndLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u8),
}
impl From<u8> for TrailerLeftRearWidIndLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::LampSLit,
            0 => Self::LampSNotLit,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerLeftRearRegPltLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u8),
}
impl From<u8> for TrailerLeftRearRegPltLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::LampSLit,
            0 => Self::LampSNotLit,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerLeftRearLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u8),
}
impl From<u8> for TrailerLeftRearLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::LampSLit,
            0 => Self::LampSNotLit,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerLeftRearFogLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u8),
}
impl From<u8> for TrailerLeftRearFogLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::LampSLit,
            0 => Self::LampSNotLit,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerLeftDirIndLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u8),
}
impl From<u8> for TrailerLeftDirIndLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::LampSLit,
            0 => Self::LampSNotLit,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerLeftCrnMarkerLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u8),
}
impl From<u8> for TrailerLeftCrnMarkerLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::LampSLit,
            0 => Self::LampSNotLit,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerInteriorLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u8),
}
impl From<u8> for TrailerInteriorLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::LampSLit,
            0 => Self::LampSNotLit,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerWorkLamp2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u8),
}
impl From<u8> for TrailerWorkLamp2566808830 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::LampSLit,
            0 => Self::LampSNotLit,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerRotatingIdentLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u8),
}
impl From<u8> for TrailerRotatingIdentLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::LampSLit,
            0 => Self::LampSNotLit,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerRightStopLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u8),
}
impl From<u8> for TrailerRightStopLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::LampSLit,
            0 => Self::LampSNotLit,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerRightSideMrkLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u8),
}
impl From<u8> for TrailerRightSideMrkLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::LampSLit,
            0 => Self::LampSNotLit,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerRightReversingLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u8),
}
impl From<u8> for TrailerRightReversingLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::LampSLit,
            0 => Self::LampSNotLit,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailRightRearWidIndLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u8),
}
impl From<u8> for TrailRightRearWidIndLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::LampSLit,
            0 => Self::LampSNotLit,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerRightRearRegPltLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u8),
}
impl From<u8> for TrailerRightRearRegPltLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::LampSLit,
            0 => Self::LampSNotLit,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerRightRearLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u8),
}
impl From<u8> for TrailerRightRearLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::LampSLit,
            0 => Self::LampSNotLit,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerRightRearFogLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u8),
}
impl From<u8> for TrailerRightRearFogLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::LampSLit,
            0 => Self::LampSNotLit,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerRightDirIndLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u8),
}
impl From<u8> for TrailerRightDirIndLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::LampSLit,
            0 => Self::LampSNotLit,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerRightCrnMarkerLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u8),
}
impl From<u8> for TrailerRightCrnMarkerLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::LampSLit,
            0 => Self::LampSNotLit,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerRearWarningLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u8),
}
impl From<u8> for TrailerRearWarningLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::LampSLit,
            0 => Self::LampSNotLit,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerLeftStopLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u8),
}
impl From<u8> for TrailerLeftStopLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::LampSLit,
            0 => Self::LampSNotLit,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FlowStatus2564554494 {
    Overflow,
    Wait,
    ContinueToSend,
    XValue(u8),
}
impl From<u8> for FlowStatus2564554494 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            2 => Self::Overflow,
            1 => Self::Wait,
            0 => Self::ContinueToSend,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ProtocolCtrlInformation2564554494 {
    FlowControl,
    ConsecutiveFrame,
    FirstFrame,
    SingleFrame,
    XValue(u8),
}
impl From<u8> for ProtocolCtrlInformation2564554494 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::FlowControl,
            2 => Self::ConsecutiveFrame,
            1 => Self::FirstFrame,
            0 => Self::SingleFrame,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FlowStatus2564488958 {
    Overflow,
    Wait,
    ContinueToSend,
    XValue(u8),
}
impl From<u8> for FlowStatus2564488958 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            2 => Self::Overflow,
            1 => Self::Wait,
            0 => Self::ContinueToSend,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ProtocolCtrlInformation2564488958 {
    FlowControl,
    ConsecutiveFrame,
    FirstFrame,
    SingleFrame,
    XValue(u8),
}
impl From<u8> for ProtocolCtrlInformation2564488958 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::FlowControl,
            2 => Self::ConsecutiveFrame,
            1 => Self::FirstFrame,
            0 => Self::SingleFrame,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ControlByte2565734142 {
    MfdbCreateEntry,
    MfdbSetMode,
    MfdbClear,
    MfdbDelete,
    MfdbAdd,
    MfdbResponse,
    MfdbRequest,
    XValue(u8),
}
impl From<u8> for ControlByte2565734142 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            6 => Self::MfdbCreateEntry,
            5 => Self::MfdbSetMode,
            4 => Self::MfdbClear,
            3 => Self::MfdbDelete,
            2 => Self::MfdbAdd,
            1 => Self::MfdbResponse,
            0 => Self::MfdbRequest,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FilterMode2565734142 {
    PassSpecificPgNs,
    BlockSpecificPgNs,
    XValue(u8),
}
impl From<u8> for FilterMode2565734142 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::PassSpecificPgNs,
            0 => Self::BlockSpecificPgNs,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum StopLevelChangeReq2565144318 {
    TakeNoAction,
    StopRequest,
    NoStopRequest,
    XValue(u8),
}
impl From<u8> for StopLevelChangeReq2565144318 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::TakeNoAction,
            1 => Self::StopRequest,
            0 => Self::NoStopRequest,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RampLevelStorageReq2565144318 {
    TakeNoAction,
    StoreRampLevel2,
    StoreRampLevel1,
    XValue(u8),
}
impl From<u8> for RampLevelStorageReq2565144318 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::TakeNoAction,
            1 => Self::StoreRampLevel2,
            0 => Self::StoreRampLevel1,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LevelControlReq2565144318 {
    TakeNoAction,
    EnableLevelControl,
    DisableLevelControl,
    XValue(u8),
}
impl From<u8> for LevelControlReq2565144318 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::TakeNoAction,
            1 => Self::EnableLevelControl,
            0 => Self::DisableLevelControl,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RampLevelReq2565144318 {
    TakeNoAction,
    RampLevel2,
    RampLevel1,
    XValue(u8),
}
impl From<u8> for RampLevelReq2565144318 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::TakeNoAction,
            1 => Self::RampLevel2,
            0 => Self::RampLevel1,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SteeringAxleLockingReq2565144318 {
    TakeNoAction,
    LockSteeringAxle,
    UnlockSteeringAxle,
    XValue(u8),
}
impl From<u8> for SteeringAxleLockingReq2565144318 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::TakeNoAction,
            1 => Self::LockSteeringAxle,
            0 => Self::UnlockSteeringAxle,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LiftAxle2PositionReq2565144318 {
    TakeNoAction,
    PositionUpTagAxleUnladen,
    PositionDownTagAxleLaden,
    XValue(u8),
}
impl From<u8> for LiftAxle2PositionReq2565144318 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::TakeNoAction,
            1 => Self::PositionUpTagAxleUnladen,
            0 => Self::PositionDownTagAxleLaden,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LiftAxle1PositionReq2565144318 {
    DonXtCareTakeNoAction,
    Reserved,
    PositionUpTagAxleUnladen,
    PositionDownTagAxleLaden,
    XValue(u8),
}
impl From<u8> for LiftAxle1PositionReq2565144318 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonXtCareTakeNoAction,
            2 => Self::Reserved,
            1 => Self::PositionUpTagAxleUnladen,
            0 => Self::PositionDownTagAxleLaden,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TractionHelpReq2565144318 {
    TakeNoAction,
    TractionHelpRequest,
    NoTractionHelpRequest,
    XValue(u8),
}
impl From<u8> for TractionHelpReq2565144318 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::TakeNoAction,
            1 => Self::TractionHelpRequest,
            0 => Self::NoTractionHelpRequest,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LevelChangeReqRearAxle2565144318 {
    TakeNoAction,
    VehicleBodyDownLowering,
    VehicleBodyUpLifting,
    XValue(u8),
}
impl From<u8> for LevelChangeReqRearAxle2565144318 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            2 => Self::TakeNoAction,
            1 => Self::VehicleBodyDownLowering,
            0 => Self::VehicleBodyUpLifting,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LevelChangeReqFrontAxle2565144318 {
    TakeNoAction,
    VehicleBodyDownLowering,
    VehicleBodyUpLifting,
    XValue(u8),
}
impl From<u8> for LevelChangeReqFrontAxle2565144318 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            2 => Self::TakeNoAction,
            1 => Self::VehicleBodyDownLowering,
            0 => Self::VehicleBodyUpLifting,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RideHeightRequest2565144318 {
    TakeNoAction,
    NormalLevel2,
    NormalLevel1,
    XValue(u8),
}
impl From<u8> for RideHeightRequest2565144318 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            2 => Self::TakeNoAction,
            1 => Self::NormalLevel2,
            0 => Self::NormalLevel1,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LevelControl2565209854 {
    LevelControlEnabled,
    LevelControlDisabled,
    XValue(u8),
}
impl From<u8> for LevelControl2565209854 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::LevelControlEnabled,
            0 => Self::LevelControlDisabled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RampLevel2565209854 {
    BodyAtRequestedRampLevel,
    BodyNotAtRequestedRampLevel,
    XValue(u8),
}
impl From<u8> for RampLevel2565209854 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::BodyAtRequestedRampLevel,
            0 => Self::BodyNotAtRequestedRampLevel,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum NormalLevel2565209854 {
    NotAvailable,
    NormalLevel2,
    NormalLevel1,
    XValue(u8),
}
impl From<u8> for NormalLevel2565209854 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            1 => Self::NormalLevel2,
            0 => Self::NormalLevel1,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum StopLevelChangeAcknowledge2565209854 {
    LevelChangeStopped,
    NoStopRequest,
    XValue(u8),
}
impl From<u8> for StopLevelChangeAcknowledge2565209854 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::LevelChangeStopped,
            0 => Self::NoStopRequest,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LevelChangeRearAxle2565209854 {
    BodyLiftingLoweringActive,
    BodyLiftingLoweringNotActive,
    XValue(u8),
}
impl From<u8> for LevelChangeRearAxle2565209854 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::BodyLiftingLoweringActive,
            0 => Self::BodyLiftingLoweringNotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LevelChangeFrontAxle2565209854 {
    BodyLiftingLoweringActive,
    BodyLiftingLoweringNotActive,
    XValue(u8),
}
impl From<u8> for LevelChangeFrontAxle2565209854 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::BodyLiftingLoweringActive,
            0 => Self::BodyLiftingLoweringNotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RampLevelStorage2565209854 {
    NewRampLevelStored,
    NoNewStorageRequest,
    XValue(u8),
}
impl From<u8> for RampLevelStorage2565209854 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::NewRampLevelStored,
            0 => Self::NoNewStorageRequest,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SteeringAxleLocking2565209854 {
    SteeringAxleLocked,
    SteeringAxleUnlocked,
    XValue(u8),
}
impl From<u8> for SteeringAxleLocking2565209854 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::SteeringAxleLocked,
            0 => Self::SteeringAxleUnlocked,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LiftAxle2Pos2565209854 {
    NotAvailable,
    Error,
    LiftAxlePosUpTagAxleUnladen,
    LiftAxlePosDownTagAxleLaden,
    XValue(u8),
}
impl From<u8> for LiftAxle2Pos2565209854 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::LiftAxlePosUpTagAxleUnladen,
            0 => Self::LiftAxlePosDownTagAxleLaden,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LiftAxle1Pos2565209854 {
    NotAvailable,
    Error,
    LiftAxlePosUpTagAxleUnladen,
    LiftAxlePosDownTagAxleLaden,
    XValue(u8),
}
impl From<u8> for LiftAxle1Pos2565209854 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::LiftAxlePosUpTagAxleUnladen,
            0 => Self::LiftAxlePosDownTagAxleLaden,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RampLevelPosition2565209854 {
    NotAvailable,
    RampLevel2,
    RampLevel1,
    XValue(u8),
}
impl From<u8> for RampLevelPosition2565209854 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            1 => Self::RampLevel2,
            0 => Self::RampLevel1,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TractionHelp2565209854 {
    TractionHelpActive,
    TractionHelpInactive,
    XValue(u8),
}
impl From<u8> for TractionHelp2565209854 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::TractionHelpActive,
            0 => Self::TractionHelpInactive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LevelCtrlSysRideHeightLevel2565209854 {
    VehicleBodyAtRequestedLevel,
    VehicleBodyNotAtReqLevel,
    XValue(u8),
}
impl From<u8> for LevelCtrlSysRideHeightLevel2565209854 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::VehicleBodyAtRequestedLevel,
            0 => Self::VehicleBodyNotAtReqLevel,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TyrePressThresholdDetect2566807294 {
    NotAvailable,
    ErrorIndicator,
    NotDefined,
    ExtremeUnderPressure,
    UnderPressure,
    NoWarningPressure,
    OverPressure,
    ExtremeOverPressure,
    XValue(u8),
}
impl From<u8> for TyrePressThresholdDetect2566807294 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            6 => Self::ErrorIndicator,
            5 => Self::NotDefined,
            4 => Self::ExtremeUnderPressure,
            3 => Self::UnderPressure,
            2 => Self::NoWarningPressure,
            1 => Self::OverPressure,
            0 => Self::ExtremeOverPressure,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TyreModulePowerSupply2566807294 {
    SufficientPowerSupply,
    InsufficientPowerSupply,
    XValue(u8),
}
impl From<u8> for TyreModulePowerSupply2566807294 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::SufficientPowerSupply,
            0 => Self::InsufficientPowerSupply,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TyreWheelIdentification22566807294 {
    AxlePosition15,
    AxlePosition14,
    AxlePosition13,
    AxlePosition12,
    AxlePosition11,
    AxlePosition10,
    AxlePosition9,
    AxlePosition8,
    AxlePosition7,
    AxlePosition6,
    AxlePosition5,
    AxlePosition4,
    AxlePosition3,
    AxlePosition2,
    AxlePosition1,
    AxlePositionNotIdentified,
    XValue(u8),
}
impl From<u8> for TyreWheelIdentification22566807294 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::AxlePosition15,
            14 => Self::AxlePosition14,
            13 => Self::AxlePosition13,
            12 => Self::AxlePosition12,
            11 => Self::AxlePosition11,
            10 => Self::AxlePosition10,
            9 => Self::AxlePosition9,
            8 => Self::AxlePosition8,
            7 => Self::AxlePosition7,
            6 => Self::AxlePosition6,
            5 => Self::AxlePosition5,
            4 => Self::AxlePosition4,
            3 => Self::AxlePosition3,
            2 => Self::AxlePosition2,
            1 => Self::AxlePosition1,
            0 => Self::AxlePositionNotIdentified,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TyreWheelIdentification12566807294 {
    WheelPosition15,
    WheelPosition14,
    WheelPosition13,
    WheelPosition12,
    WheelPosition11,
    WheelPosition10,
    WheelPosition9,
    WheelPosition8,
    WheelPosition7,
    WheelPosition6,
    WheelPosition5,
    WheelPosition4,
    WheelPosition3,
    WheelPosition2,
    WheelPosition1,
    WheelPositionNotIdentified,
    XValue(u8),
}
impl From<u8> for TyreWheelIdentification12566807294 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::WheelPosition15,
            14 => Self::WheelPosition14,
            13 => Self::WheelPosition13,
            12 => Self::WheelPosition12,
            11 => Self::WheelPosition11,
            10 => Self::WheelPosition10,
            9 => Self::WheelPosition9,
            8 => Self::WheelPosition8,
            7 => Self::WheelPosition7,
            6 => Self::WheelPosition6,
            5 => Self::WheelPosition5,
            4 => Self::WheelPosition4,
            3 => Self::WheelPosition3,
            2 => Self::WheelPosition2,
            1 => Self::WheelPosition1,
            0 => Self::WheelPositionNotIdentified,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum MisfireMonitoringComplete2566764798 {
    EnabledForCycle,
    DisabledForRestOfCycle,
    XValue(bool),
}
impl From<bool> for MisfireMonitoringComplete2566764798 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::EnabledForCycle,
            0 => Self::DisabledForRestOfCycle,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum MisfireMonitoringEnabled2566764798 {
    EnabledForCycle,
    DisabledForRestOfCycle,
    XValue(bool),
}
impl From<bool> for MisfireMonitoringEnabled2566764798 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::EnabledForCycle,
            0 => Self::DisabledForRestOfCycle,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FuelSystemMonitoringEnabled2566764798 {
    NotCompleteCycle,
    CompleteCycleOrNotSupported,
    XValue(bool),
}
impl From<bool> for FuelSystemMonitoringEnabled2566764798 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::NotCompleteCycle,
            0 => Self::CompleteCycleOrNotSupported,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ComprehensiveComptMonComplete2566764798 {
    NotCompleteCycle,
    CompleteCycleOrNotSupported,
    XValue(bool),
}
impl From<bool> for ComprehensiveComptMonComplete2566764798 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::NotCompleteCycle,
            0 => Self::CompleteCycleOrNotSupported,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ComprehensiveCompMonEnabled2566764798 {
    NotCompleteCycle,
    CompleteCycleOrNotSupported,
    XValue(bool),
}
impl From<bool> for ComprehensiveCompMonEnabled2566764798 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::NotCompleteCycle,
            0 => Self::CompleteCycleOrNotSupported,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SecondAirSystemMonComplete2566764798 {
    EnabledForCycle,
    DisabledForRestOfCycle,
    XValue(bool),
}
impl From<bool> for SecondAirSystemMonComplete2566764798 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::EnabledForCycle,
            0 => Self::DisabledForRestOfCycle,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SecondAirSystemMonEnabled2566764798 {
    EnabledForCycle,
    DisabledForRestOfCycle,
    XValue(bool),
}
impl From<bool> for SecondAirSystemMonEnabled2566764798 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::EnabledForCycle,
            0 => Self::DisabledForRestOfCycle,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum OxygenSensorMonComplete2566764798 {
    EnabledForCycle,
    DisabledForRestOfCycle,
    XValue(bool),
}
impl From<bool> for OxygenSensorMonComplete2566764798 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::EnabledForCycle,
            0 => Self::DisabledForRestOfCycle,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum OxygenSensorMonEnabled2566764798 {
    NotCompleteCycle,
    CompleteCycleOrNotSupported,
    XValue(bool),
}
impl From<bool> for OxygenSensorMonEnabled2566764798 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::NotCompleteCycle,
            0 => Self::CompleteCycleOrNotSupported,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum OxygenSensorHeaterMonComplete2566764798 {
    EnabledForCycle,
    DisabledForRestOfCycle,
    XValue(bool),
}
impl From<bool> for OxygenSensorHeaterMonComplete2566764798 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::EnabledForCycle,
            0 => Self::DisabledForRestOfCycle,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum OxygenSensorHeaterMonEnabled2566764798 {
    NotCompleteCycle,
    CompleteCycleOrNotSupported,
    XValue(bool),
}
impl From<bool> for OxygenSensorHeaterMonEnabled2566764798 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::NotCompleteCycle,
            0 => Self::CompleteCycleOrNotSupported,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum HeatedCatalystMonComplete2566764798 {
    EnabledForCycle,
    DisabledForRestOfCycle,
    XValue(bool),
}
impl From<bool> for HeatedCatalystMonComplete2566764798 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::EnabledForCycle,
            0 => Self::DisabledForRestOfCycle,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum HeatedCatalystMonEnabled2566764798 {
    EnabledForCycle,
    DisabledForRestOfCycle,
    XValue(bool),
}
impl From<bool> for HeatedCatalystMonEnabled2566764798 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::EnabledForCycle,
            0 => Self::DisabledForRestOfCycle,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EvaporativeSystemMonComplete2566764798 {
    NotCompleteCycle,
    CompleteCycleOrNotSupported,
    XValue(bool),
}
impl From<bool> for EvaporativeSystemMonComplete2566764798 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::NotCompleteCycle,
            0 => Self::CompleteCycleOrNotSupported,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EvaporativeSystemMonEnabled2566764798 {
    NotCompleteCycle,
    CompleteCycleOrNotSupported,
    XValue(bool),
}
impl From<bool> for EvaporativeSystemMonEnabled2566764798 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::NotCompleteCycle,
            0 => Self::CompleteCycleOrNotSupported,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EgrSystemMonitoringComplete2566764798 {
    NotCompleteCycle,
    CompleteCycleOrNotSupported,
    XValue(bool),
}
impl From<bool> for EgrSystemMonitoringComplete2566764798 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::NotCompleteCycle,
            0 => Self::CompleteCycleOrNotSupported,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EgrSystemMonitoringEnabled2566764798 {
    EnabledForCycle,
    DisabledForRestOfCycle,
    XValue(bool),
}
impl From<bool> for EgrSystemMonitoringEnabled2566764798 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::EnabledForCycle,
            0 => Self::DisabledForRestOfCycle,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ColdStartAidSystemMonComplete2566764798 {
    EnabledForCycle,
    DisabledForRestOfCycle,
    XValue(bool),
}
impl From<bool> for ColdStartAidSystemMonComplete2566764798 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::EnabledForCycle,
            0 => Self::DisabledForRestOfCycle,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ColdStartAidSystemMonEnabled2566764798 {
    EnabledForCycle,
    DisabledForRestOfCycle,
    XValue(bool),
}
impl From<bool> for ColdStartAidSystemMonEnabled2566764798 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::EnabledForCycle,
            0 => Self::DisabledForRestOfCycle,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum CatalystMonComplete2566764798 {
    NotCompleteCycle,
    CompleteCycleOrNotSupported,
    XValue(bool),
}
impl From<bool> for CatalystMonComplete2566764798 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::NotCompleteCycle,
            0 => Self::CompleteCycleOrNotSupported,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum CatalystMonEnabled2566764798 {
    NotCompleteCycle,
    CompleteCycleOrNotSupported,
    XValue(bool),
}
impl From<bool> for CatalystMonEnabled2566764798 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::NotCompleteCycle,
            0 => Self::CompleteCycleOrNotSupported,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AcSystemRefrigerantMonComplete2566764798 {
    NotCompleteCycle,
    CompleteCycleOrNotSupported,
    XValue(bool),
}
impl From<bool> for AcSystemRefrigerantMonComplete2566764798 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::NotCompleteCycle,
            0 => Self::CompleteCycleOrNotSupported,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AcSystemRefrigerantMonEnabled2566764798 {
    NotCompleteCycle,
    CompleteCycleOrNotSupported,
    XValue(bool),
}
impl From<bool> for AcSystemRefrigerantMonEnabled2566764798 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::NotCompleteCycle,
            0 => Self::CompleteCycleOrNotSupported,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FuelSystemMonitoringComplete2566764798 {
    NotCompleteCycle,
    CompleteCycleOrNotSupported,
    XValue(bool),
}
impl From<bool> for FuelSystemMonitoringComplete2566764798 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::NotCompleteCycle,
            0 => Self::CompleteCycleOrNotSupported,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SecurityEntityType2564095742 {
    DataIsCertificate,
    DataIsSessionKey,
    DataIsLongKey,
    DataIsLongSeed,
    XValue(u8),
}
impl From<u8> for SecurityEntityType2564095742 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DataIsCertificate,
            2 => Self::DataIsSessionKey,
            1 => Self::DataIsLongKey,
            0 => Self::DataIsLongSeed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum XbrCtrlMode2349137662 {
    NotDefined,
    AcclrtnCtrlWthMxMdExctXbrAcclrt,
    AcclrtnCtrlWthAddtnMdAddXbrAccl,
    OvrrdDsbldDsblAnyExstngCtrlCmdd,
    XValue(u8),
}
impl From<u8> for XbrCtrlMode2349137662 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotDefined,
            2 => Self::AcclrtnCtrlWthMxMdExctXbrAcclrt,
            1 => Self::AcclrtnCtrlWthAddtnMdAddXbrAccl,
            0 => Self::OvrrdDsbldDsblAnyExstngCtrlCmdd,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum XbrPriority2349137662 {
    LwPrrtyUsdInOvrrdDsbldXbrCtrlMd,
    MdmPrrtyUsdFrAccSystmsThsMdDsNt,
    HighPriorityNotDefined,
    HghstPrrtyUsdFrEmrgncySttnsEgFr,
    XValue(u8),
}
impl From<u8> for XbrPriority2349137662 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::LwPrrtyUsdInOvrrdDsbldXbrCtrlMd,
            2 => Self::MdmPrrtyUsdFrAccSystmsThsMdDsNt,
            1 => Self::HighPriorityNotDefined,
            0 => Self::HghstPrrtyUsdFrEmrgncySttnsEgFr,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum XbrebiMode2349137662 {
    NotDefined,
    EndranceBrakeIntegrationAllowed,
    OnlyEnduranceBrakesAllowed,
    NEndrnceBrakeIntegrationAllowed,
    XValue(u8),
}
impl From<u8> for XbrebiMode2349137662 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotDefined,
            2 => Self::EndranceBrakeIntegrationAllowed,
            1 => Self::OnlyEnduranceBrakesAllowed,
            0 => Self::NEndrnceBrakeIntegrationAllowed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum WaterInFuelIndicator2566848510 {
    NotAvailable,
    Error,
    Yes,
    No,
    XValue(u8),
}
impl From<u8> for WaterInFuelIndicator2566848510 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Yes,
            0 => Self::No,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum WinchOilPressSwitch2566809854 {
    NotAvailable,
    ErrrSwtchStteCannotBeDetermined,
    OkOilPressIsAboveMin,
    NotokOilPressIsTooLow,
    XValue(u8),
}
impl From<u8> for WinchOilPressSwitch2566809854 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrrSwtchStteCannotBeDetermined,
            1 => Self::OkOilPressIsAboveMin,
            0 => Self::NotokOilPressIsTooLow,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum HydOilFilterRestrictionSwitch2566809854 {
    NotAvailable,
    Error,
    RestrictionExistsOnOilFilter,
    NoRestriction,
    XValue(u8),
}
impl From<u8> for HydOilFilterRestrictionSwitch2566809854 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::RestrictionExistsOnOilFilter,
            0 => Self::NoRestriction,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SteerWheelAngleSensorType2565868030 {
    NotAvailable,
    Reserved,
    AbsMeasuringPrinciple,
    RelativeMeasuringPrinciple,
    XValue(u8),
}
impl From<u8> for SteerWheelAngleSensorType2565868030 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::AbsMeasuringPrinciple,
            0 => Self::RelativeMeasuringPrinciple,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum YcBrakeCtrlActive2566803454 {
    DontCareTakeNoAction,
    Reserved,
    YcBrakeCtrlActive,
    YcBrakeCtrlPassiveButInstalled,
    XValue(u8),
}
impl From<u8> for YcBrakeCtrlActive2566803454 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DontCareTakeNoAction,
            2 => Self::Reserved,
            1 => Self::YcBrakeCtrlActive,
            0 => Self::YcBrakeCtrlPassiveButInstalled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum YcEngCtrlActive2566803454 {
    DontCareTakeNoAction,
    Reserved,
    YcEngCtrlActive,
    YcEngCtrlPassiveButInstalled,
    XValue(u8),
}
impl From<u8> for YcEngCtrlActive2566803454 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DontCareTakeNoAction,
            2 => Self::Reserved,
            1 => Self::YcEngCtrlActive,
            0 => Self::YcEngCtrlPassiveButInstalled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RopBrakeCtrlActive2566803454 {
    DontCareTakeNoAction,
    Reserved,
    RopBrakeCtrlActive,
    RopBrakeCtrlPassiveButInstalled,
    XValue(u8),
}
impl From<u8> for RopBrakeCtrlActive2566803454 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DontCareTakeNoAction,
            2 => Self::Reserved,
            1 => Self::RopBrakeCtrlActive,
            0 => Self::RopBrakeCtrlPassiveButInstalled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RopEngCtrlActive2566803454 {
    DontCareTakeNoAction,
    Reserved,
    RopEngCtrlActive,
    RopEngCtrlPassiveButInstalled,
    XValue(u8),
}
impl From<u8> for RopEngCtrlActive2566803454 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DontCareTakeNoAction,
            2 => Self::Reserved,
            1 => Self::RopEngCtrlActive,
            0 => Self::RopEngCtrlPassiveButInstalled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum VdcBrakeLightRq2566803454 {
    DontCareTakeNoAction,
    Reserved,
    TurnBrakeLightOn,
    TurnBrakeLightNotOn,
    XValue(u8),
}
impl From<u8> for VdcBrakeLightRq2566803454 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DontCareTakeNoAction,
            2 => Self::Reserved,
            1 => Self::TurnBrakeLightOn,
            0 => Self::TurnBrakeLightNotOn,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum VdcFullyOperational2566803454 {
    DontCareTakeNoAction,
    Reserved,
    FullyOperational,
    NotFullyOperational,
    XValue(u8),
}
impl From<u8> for VdcFullyOperational2566803454 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DontCareTakeNoAction,
            2 => Self::Reserved,
            1 => Self::FullyOperational,
            0 => Self::NotFullyOperational,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum VdcInformationSignal2566803454 {
    DontCareTakeNoAction,
    Reserved,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for VdcInformationSignal2566803454 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DontCareTakeNoAction,
            2 => Self::Reserved,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ControlPurpose2348875518 {
    TemporaryPowerTrainControl,
    EngineProtection,
    RoadSpeedGovernor,
    PtoGovernor,
    CruiseControl,
    AcceleratorPedal,
    XValue(u8),
}
impl From<u8> for ControlPurpose2348875518 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            5 => Self::TemporaryPowerTrainControl,
            4 => Self::EngineProtection,
            3 => Self::RoadSpeedGovernor,
            2 => Self::PtoGovernor,
            1 => Self::CruiseControl,
            0 => Self::AcceleratorPedal,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransmissionRate2348875518 {
    UseStandardRate,
    X25ms,
    X50ms,
    X100ms,
    X250ms,
    X500ms,
    X750ms,
    X1000ms,
    XValue(u8),
}
impl From<u8> for TransmissionRate2348875518 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::UseStandardRate,
            6 => Self::X25ms,
            5 => Self::X50ms,
            4 => Self::X100ms,
            3 => Self::X250ms,
            2 => Self::X500ms,
            1 => Self::X750ms,
            0 => Self::X1000ms,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum OverrideCtrlModePriority2348875518 {
    LowPriority,
    MdmPrrtyUsdFrPwrtrnCtrlOprtnsWh,
    HighPriority,
    HghstPrrtyUsdFrSttnsThtRqrImmdt,
    XValue(u8),
}
impl From<u8> for OverrideCtrlModePriority2348875518 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::LowPriority,
            2 => Self::MdmPrrtyUsdFrPwrtrnCtrlOprtnsWh,
            1 => Self::HighPriority,
            0 => Self::HghstPrrtyUsdFrSttnsThtRqrImmdt,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngRqedSpeedCtrlConditions2348875518 {
    ThsCtrlCndtnHsBnOptmzdTMnmzRpmO,
    StbltyOptmzdFrDrvlnEnggdAndOrI,
    StbltyOptmzdFrDrvlnDsnggdAndNnl,
    ThsSpdGvrnrGnSlctnIsAdjstdTPrvd,
    XValue(u8),
}
impl From<u8> for EngRqedSpeedCtrlConditions2348875518 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            2 => Self::ThsCtrlCndtnHsBnOptmzdTMnmzRpmO,
            3 => Self::StbltyOptmzdFrDrvlnEnggdAndOrI,
            1 => Self::StbltyOptmzdFrDrvlnDsnggdAndNnl,
            0 => Self::ThsSpdGvrnrGnSlctnIsAdjstdTPrvd,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngOverrideCtrlMode2348875518 {
    SpdTrqLmtCtrlLmtSpdAndOrTrqBs,
    TrqCtrlCntrlTrqTInclddDsrdTrqVl,
    SpdCtrlGvrnSpdTInclddDsrdSpdVle,
    OvrrdDsbldDsblAnyExstngCtrlCmdd,
    XValue(u8),
}
impl From<u8> for EngOverrideCtrlMode2348875518 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::SpdTrqLmtCtrlLmtSpdAndOrTrqBs,
            2 => Self::TrqCtrlCntrlTrqTInclddDsrdTrqVl,
            1 => Self::SpdCtrlGvrnSpdTInclddDsrdSpdVle,
            0 => Self::OvrrdDsbldDsblAnyExstngCtrlCmdd,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransitRunStatus2566766846 {
    NotAvailable,
    ErrorCondition,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for TransitRunStatus2566766846 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorCondition,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum VehicleUseStatus2566766846 {
    NotAvailable,
    ErrorCondition,
    UnauthorizedUse,
    NormalUse,
    XValue(u8),
}
impl From<u8> for VehicleUseStatus2566766846 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorCondition,
            1 => Self::UnauthorizedUse,
            0 => Self::NormalUse,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SilentAlarmStatus2566766846 {
    NotAvailable,
    ErrorCondition,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for SilentAlarmStatus2566766846 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorCondition,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TypeOfPassengerCount2566766846 {
    BoardingPassenger,
    AbsPassengerCount,
    ExitingPassengerSecondPassengerStream,
    BoardingPassengerSecondPassengerStream,
    ExitingPassenger,
    XValue(u8),
}
impl From<u8> for TypeOfPassengerCount2566766846 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::BoardingPassenger,
            0 => Self::AbsPassengerCount,
            4 => Self::ExitingPassengerSecondPassengerStream,
            3 => Self::BoardingPassengerSecondPassengerStream,
            2 => Self::ExitingPassenger,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FareboxAlarmIdentifier2566765310 {
    X1111111agencyDefined,
    X1100000reservedToBeAssigned,
    MaintenanceAccessOutOfService,
    MntnncAccssInSrvcCnsdrdAnAlrmCn,
    PaperCurrencyJamCleared,
    PaperCurrencyJam,
    PassTransferJamCleared,
    PassTransferJam,
    FareboxResetToAutomaticMode,
    FareboxSetInManualBypass,
    CoinDejamOperated,
    CardPassBoxFull,
    CardPassBoxLessThan75Full,
    CardPassBox75Full,
    CurrencyBoxFull,
    CurrencyBoxLessThan75Full,
    CurrencyBox75Full,
    CoinboxFull,
    Coinbox75Full,
    InsufficientFareAccepted,
    CshbxOpndInSrvcCnsdrdAnAlrmCndt,
    CashboxDoorTimeout,
    CashboxRestored,
    CashboxRemoved,
    ProbeCompleted,
    ProbeStarted,
    VoltageRestored,
    VoltageDropout,
    XValue(u8),
}
impl From<u8> for FareboxAlarmIdentifier2566765310 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            97 => Self::X1111111agencyDefined,
            26 => Self::X1100000reservedToBeAssigned,
            25 => Self::MaintenanceAccessOutOfService,
            24 => Self::MntnncAccssInSrvcCnsdrdAnAlrmCn,
            23 => Self::PaperCurrencyJamCleared,
            22 => Self::PaperCurrencyJam,
            21 => Self::PassTransferJamCleared,
            20 => Self::PassTransferJam,
            19 => Self::FareboxResetToAutomaticMode,
            18 => Self::FareboxSetInManualBypass,
            17 => Self::CoinDejamOperated,
            16 => Self::CardPassBoxFull,
            15 => Self::CardPassBoxLessThan75Full,
            14 => Self::CardPassBox75Full,
            13 => Self::CurrencyBoxFull,
            12 => Self::CurrencyBoxLessThan75Full,
            11 => Self::CurrencyBox75Full,
            10 => Self::CoinboxFull,
            9 => Self::Coinbox75Full,
            8 => Self::InsufficientFareAccepted,
            7 => Self::CshbxOpndInSrvcCnsdrdAnAlrmCndt,
            6 => Self::CashboxDoorTimeout,
            5 => Self::CashboxRestored,
            4 => Self::CashboxRemoved,
            3 => Self::ProbeCompleted,
            2 => Self::ProbeStarted,
            1 => Self::VoltageRestored,
            0 => Self::VoltageDropout,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FareboxEmergencyStatus2566765310 {
    NotAvailable,
    ErrorCondition,
    EmergencyCondition,
    NonemergencyCondition,
    XValue(u8),
}
impl From<u8> for FareboxEmergencyStatus2566765310 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorCondition,
            1 => Self::EmergencyCondition,
            0 => Self::NonemergencyCondition,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransferType2566765566 {
    X11111agencyDefined,
    Out,
    In,
    West,
    East,
    South,
    North,
    XValue(u8),
}
impl From<u8> for TransferType2566765566 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            6 => Self::X11111agencyDefined,
            5 => Self::Out,
            4 => Self::In,
            3 => Self::West,
            2 => Self::East,
            1 => Self::South,
            0 => Self::North,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TypeOfService2566765566 {
    X111agencyDefined,
    ExpressService,
    LocalService,
    XValue(u8),
}
impl From<u8> for TypeOfService2566765566 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            2 => Self::X111agencyDefined,
            1 => Self::ExpressService,
            0 => Self::LocalService,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum PaymentDetails2566765566 {
    X1111agencyDefined,
    X1010reservedForAssignment,
    Card,
    Pass,
    Ticket,
    Token,
    Cash,
    NotAnUpgrade,
    XValue(u8),
}
impl From<u8> for PaymentDetails2566765566 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            11 => Self::X1111agencyDefined,
            6 => Self::X1010reservedForAssignment,
            5 => Self::Card,
            4 => Self::Pass,
            3 => Self::Ticket,
            2 => Self::Token,
            1 => Self::Cash,
            0 => Self::NotAnUpgrade,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TypeOfFare2566765566 {
    X1111agencyDefined,
    X1010reservedForAssignment,
    PassB,
    PassA,
    TicketB,
    TicketA,
    TokenB,
    TokenA,
    CashNoDetail,
    XValue(u8),
}
impl From<u8> for TypeOfFare2566765566 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            11 => Self::X1111agencyDefined,
            7 => Self::X1010reservedForAssignment,
            6 => Self::PassB,
            5 => Self::PassA,
            4 => Self::TicketB,
            3 => Self::TicketA,
            2 => Self::TokenB,
            1 => Self::TokenA,
            0 => Self::CashNoDetail,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransactionType2566765566 {
    X1111agencyDefined,
    X1011reservedForAssignment,
    Free,
    Transfer,
    Permit,
    Card,
    Pass,
    Ticket,
    Token,
    Cash,
    XValue(u8),
}
impl From<u8> for TransactionType2566765566 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            12 => Self::X1111agencyDefined,
            8 => Self::X1011reservedForAssignment,
            7 => Self::Free,
            6 => Self::Transfer,
            5 => Self::Permit,
            4 => Self::Card,
            3 => Self::Pass,
            2 => Self::Ticket,
            1 => Self::Token,
            0 => Self::Cash,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum DriversFareboxSecurityCode2566765822 {
    X65535securityCode,
    FareboxIsInReportingStatus,
    XValue(u16),
}
impl From<u16> for DriversFareboxSecurityCode2566765822 {
    #[allow(dead_code)]
    fn from(val: u16) -> Self {
        match val as u64 {
            1 => Self::X65535securityCode,
            0 => Self::FareboxIsInReportingStatus,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TripDirection2566765822 {
    X1111agencyDefined,
    Out,
    In,
    West,
    East,
    South,
    North,
    XValue(u8),
}
impl From<u8> for TripDirection2566765822 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            6 => Self::X1111agencyDefined,
            5 => Self::Out,
            4 => Self::In,
            3 => Self::West,
            2 => Self::East,
            1 => Self::South,
            0 => Self::North,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TripStatus2566765822 {
    LayoverEnd,
    LayoverStart,
    TripEnd,
    TripStart,
    Undefined,
    XValue(u8),
}
impl From<u8> for TripStatus2566765822 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            6 => Self::LayoverEnd,
            5 => Self::LayoverStart,
            2 => Self::TripEnd,
            1 => Self::TripStart,
            7 => Self::Undefined,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FareboxServiceStatus2566765822 {
    NotAvailable,
    ErrorCondition,
    FareboxInService,
    FareboxOutOfService,
    XValue(u8),
}
impl From<u8> for FareboxServiceStatus2566765822 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorCondition,
            1 => Self::FareboxInService,
            0 => Self::FareboxOutOfService,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum StrobeActivationCtrlStatus2566766078 {
    NotAvailable,
    ErrorCondition,
    ActivateStrobe,
    DeactivateStrobe,
    XValue(u8),
}
impl From<u8> for StrobeActivationCtrlStatus2566766078 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorCondition,
            1 => Self::ActivateStrobe,
            0 => Self::DeactivateStrobe,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransitDoorEnable2566766078 {
    NotAvailable,
    ErrorCondition,
    TrnstDrSttsWllOvrrdStrbActvtion,
    IgnoreTransitDoorStatus,
    XValue(u8),
}
impl From<u8> for TransitDoorEnable2566766078 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorCondition,
            1 => Self::TrnstDrSttsWllOvrrdStrbActvtion,
            0 => Self::IgnoreTransitDoorStatus,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum PriorityOfRespSentByEmitter2566766078 {
    NotAvailable,
    ErrorCondition,
    To1101Reserved,
    PrrtyStByHardwareToHighPriority,
    PrrtyStByHrdwareToProbePriority,
    PrrtySetByHardwareToLowPriority,
    To1000Reserved,
    HighPriority,
    ProbePriority,
    LowPriority,
    Reserved,
    XValue(u8),
}
impl From<u8> for PriorityOfRespSentByEmitter2566766078 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            14 => Self::ErrorCondition,
            12 => Self::To1101Reserved,
            11 => Self::PrrtyStByHardwareToHighPriority,
            10 => Self::PrrtyStByHrdwareToProbePriority,
            9 => Self::PrrtySetByHardwareToLowPriority,
            4 => Self::To1000Reserved,
            3 => Self::HighPriority,
            2 => Self::ProbePriority,
            1 => Self::LowPriority,
            0 => Self::Reserved,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum IntersectionPreemptionRqResp2566766078 {
    NotAvailable,
    ErrorCondition,
    MessageIsARespFromEmitter,
    MessageIsARqDirectedToEmitter,
    XValue(u8),
}
impl From<u8> for IntersectionPreemptionRqResp2566766078 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorCondition,
            1 => Self::MessageIsARespFromEmitter,
            0 => Self::MessageIsARqDirectedToEmitter,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransitRouteIdUsage2566766078 {
    NotAvailable,
    ErrorCondition,
    TrnstRtIdUsedForInterleavedData,
    TrnstRtIdNtUsdFrInterleavedData,
    XValue(u8),
}
impl From<u8> for TransitRouteIdUsage2566766078 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorCondition,
            1 => Self::TrnstRtIdUsedForInterleavedData,
            0 => Self::TrnstRtIdNtUsdFrInterleavedData,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RangeCodeEnable2566766078 {
    NotAvailable,
    ErrorCondition,
    RangeCodeUsedForInterleavedData,
    RngCdeNotUsedForInterleavedData,
    XValue(u8),
}
impl From<u8> for RangeCodeEnable2566766078 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorCondition,
            1 => Self::RangeCodeUsedForInterleavedData,
            0 => Self::RngCdeNotUsedForInterleavedData,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum PcuSupplySolenoidStatus2633922814 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for PcuSupplySolenoidStatus2633922814 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum PcuCtrlSolenoidStatus2633922814 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for PcuCtrlSolenoidStatus2633922814 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum PcuDeflateSolenoidStatus2633922814 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for PcuDeflateSolenoidStatus2633922814 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TirePressSupplySwitchStatus2633922814 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for TirePressSupplySwitchStatus2633922814 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum PcuSteerSolenoidStatus2633922814 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for PcuSteerSolenoidStatus2633922814 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum PcuDriveSolenoidStatus2633922814 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for PcuDriveSolenoidStatus2633922814 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum DriveChannelMode2633922814 {
    NotAvailable,
    ErrorCondition,
    X1101reserved,
    PressCheck,
    DfltWtSystmWllDfltWhnCndtnsAllw,
    InfltWtSystmWllInfltWhnCndtnsAl,
    Confirm,
    Deflate,
    Inflate,
    Maintain,
    XValue(u8),
}
impl From<u8> for DriveChannelMode2633922814 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            14 => Self::ErrorCondition,
            7 => Self::X1101reserved,
            6 => Self::PressCheck,
            5 => Self::DfltWtSystmWllDfltWhnCndtnsAllw,
            4 => Self::InfltWtSystmWllInfltWhnCndtnsAl,
            3 => Self::Confirm,
            2 => Self::Deflate,
            1 => Self::Inflate,
            0 => Self::Maintain,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerTagChannelMode2633922814 {
    NotAvailable,
    ErrorCondition,
    X1101reserved,
    PressCheck,
    DfltWtSystmWllDfltWhnCndtnsAllw,
    InfltWtSystmWllInfltWhnCndtnsAl,
    Confirm,
    Deflate,
    Inflate,
    Maintain,
    XValue(u8),
}
impl From<u8> for TrailerTagChannelMode2633922814 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            14 => Self::ErrorCondition,
            7 => Self::X1101reserved,
            6 => Self::PressCheck,
            5 => Self::DfltWtSystmWllDfltWhnCndtnsAllw,
            4 => Self::InfltWtSystmWllInfltWhnCndtnsAl,
            3 => Self::Confirm,
            2 => Self::Deflate,
            1 => Self::Inflate,
            0 => Self::Maintain,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SteerChannelMode2633922814 {
    NotAvailable,
    ErrorCondition,
    X1101reserved,
    PressCheck,
    DfltWtSystmWllDfltWhnCndtnsAllw,
    InfltWtSystmWllInfltWhnCndtnsAl,
    Confirm,
    Deflate,
    Inflate,
    Maintain,
    XValue(u8),
}
impl From<u8> for SteerChannelMode2633922814 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            14 => Self::ErrorCondition,
            7 => Self::X1101reserved,
            6 => Self::PressCheck,
            5 => Self::DfltWtSystmWllDfltWhnCndtnsAllw,
            4 => Self::InfltWtSystmWllInfltWhnCndtnsAl,
            3 => Self::Confirm,
            2 => Self::Deflate,
            1 => Self::Inflate,
            0 => Self::Maintain,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum PcuTrailerTagPushSolenoidStatus2633922814 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for PcuTrailerTagPushSolenoidStatus2633922814 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TirePressThresholdDetection2566845694 {
    NotAvailable,
    ErrorIndicator,
    NotDefined,
    ExtrmUndrPrssTrPrssrIsAtALvlWhr,
    UndrPrssTrPrssrIsLwrThnThPrssrD,
    NWrnngPrssTrPrssrIsWthnThThrshl,
    OvrPrssTrPrssrIsHghrThnThPrssrD,
    ExtrmOvrPrssTrPrssrIsAtALvlWhrT,
    XValue(u8),
}
impl From<u8> for TirePressThresholdDetection2566845694 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            6 => Self::ErrorIndicator,
            5 => Self::NotDefined,
            4 => Self::ExtrmUndrPrssTrPrssrIsAtALvlWhr,
            3 => Self::UndrPrssTrPrssrIsLwrThnThPrssrD,
            2 => Self::NWrnngPrssTrPrssrIsWthnThThrshl,
            1 => Self::OvrPrssTrPrssrIsHghrThnThPrssrD,
            0 => Self::ExtrmOvrPrssTrPrssrIsAtALvlWhrT,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum CtiWheelEndElectricalFault2566845694 {
    NotSupported,
    Error,
    NotDefined,
    Ok,
    XValue(u8),
}
impl From<u8> for CtiWheelEndElectricalFault2566845694 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotSupported,
            2 => Self::Error,
            1 => Self::NotDefined,
            0 => Self::Ok,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum CtiTireStatus2566845694 {
    NotSupported,
    Error,
    TireLeakDetected,
    Ok,
    XValue(u8),
}
impl From<u8> for CtiTireStatus2566845694 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotSupported,
            2 => Self::Error,
            1 => Self::TireLeakDetected,
            0 => Self::Ok,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum CtiWheelSensorStatus2566845694 {
    NotSupported,
    NotDefined,
    On,
    OffIsolatedFromCtiPressCtrl,
    XValue(u8),
}
impl From<u8> for CtiWheelSensorStatus2566845694 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotSupported,
            2 => Self::NotDefined,
            1 => Self::On,
            0 => Self::OffIsolatedFromCtiPressCtrl,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum DirectionIndicator2365484286 {
    NotAvailable,
    Error,
    Reverse,
    Forward,
    XValue(u8),
}
impl From<u8> for DirectionIndicator2365484286 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Reverse,
            0 => Self::Forward,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TachographPerformance2365484286 {
    NotAvailable,
    Error,
    PerformanceAnalysis,
    NormalPerformance,
    XValue(u8),
}
impl From<u8> for TachographPerformance2365484286 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::PerformanceAnalysis,
            0 => Self::NormalPerformance,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum HandlingInformation2365484286 {
    NotAvailable,
    Error,
    HandlingInformation,
    NoHandlingInformation,
    XValue(u8),
}
impl From<u8> for HandlingInformation2365484286 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::HandlingInformation,
            0 => Self::NoHandlingInformation,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SystemEvent2365484286 {
    NotAvailable,
    Error,
    TachographEvent,
    NoTachographEvent,
    XValue(u8),
}
impl From<u8> for SystemEvent2365484286 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::TachographEvent,
            0 => Self::NoTachographEvent,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum DriverCardDriver22365484286 {
    NotAvailable,
    Error,
    DriverCardPresent,
    DriverCardNotPresent,
    XValue(u8),
}
impl From<u8> for DriverCardDriver22365484286 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DriverCardPresent,
            0 => Self::DriverCardNotPresent,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Driver2TimeRelatedStates2365484286 {
    NotAvailable,
    Error,
    Other,
    X1100reserved,
    Limit616HReached,
    Limit515MinBefore16H,
    Limit49HReached,
    Limit315MinBefore9H,
    Limit24HReached,
    Limit115MinBefore4H,
    NormalNoLimitsReached,
    XValue(u8),
}
impl From<u8> for Driver2TimeRelatedStates2365484286 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            14 => Self::Error,
            13 => Self::Other,
            7 => Self::X1100reserved,
            6 => Self::Limit616HReached,
            5 => Self::Limit515MinBefore16H,
            4 => Self::Limit49HReached,
            3 => Self::Limit315MinBefore9H,
            2 => Self::Limit24HReached,
            1 => Self::Limit115MinBefore4H,
            0 => Self::NormalNoLimitsReached,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Overspeed2365484286 {
    NotAvailable,
    Error,
    Overspeed,
    NoOverspeed,
    XValue(u8),
}
impl From<u8> for Overspeed2365484286 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Overspeed,
            0 => Self::NoOverspeed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum DriverCardDriver12365484286 {
    NotAvailable,
    Error,
    DriverCardPresent,
    DriverCardNotPresent,
    XValue(u8),
}
impl From<u8> for DriverCardDriver12365484286 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DriverCardPresent,
            0 => Self::DriverCardNotPresent,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Driver1TimeRelatedStates2365484286 {
    NotAvailable,
    Error,
    Other,
    X1100reserved,
    Limit616HReached,
    Limit515MinBefore16H,
    Limit49HReached,
    Limit315MinBefore9H,
    Limit24HReached,
    Limit115MinBefore4H,
    NormalNoLimitsReached,
    XValue(u8),
}
impl From<u8> for Driver1TimeRelatedStates2365484286 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            14 => Self::Error,
            13 => Self::Other,
            7 => Self::X1100reserved,
            6 => Self::Limit616HReached,
            5 => Self::Limit515MinBefore16H,
            4 => Self::Limit49HReached,
            3 => Self::Limit315MinBefore9H,
            2 => Self::Limit24HReached,
            1 => Self::Limit115MinBefore4H,
            0 => Self::NormalNoLimitsReached,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum DriveRecognize2365484286 {
    NotAvailable,
    Error,
    VehicleMotionDetected,
    VehicleMotionNotDetected,
    XValue(u8),
}
impl From<u8> for DriveRecognize2365484286 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::VehicleMotionDetected,
            0 => Self::VehicleMotionNotDetected,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Driver2WorkingState2365484286 {
    NotAvailable,
    Error,
    X101reserved,
    DriveBehindWheel,
    WrkLdngUnldingWorkingInAnOffice,
    DriverAvailableShortBreak,
    RestSleeping,
    XValue(u8),
}
impl From<u8> for Driver2WorkingState2365484286 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            6 => Self::Error,
            4 => Self::X101reserved,
            3 => Self::DriveBehindWheel,
            2 => Self::WrkLdngUnldingWorkingInAnOffice,
            1 => Self::DriverAvailableShortBreak,
            0 => Self::RestSleeping,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Driver1WorkingState2365484286 {
    NotAvailable,
    Error,
    X101reserved,
    DriveBehindWheel,
    WrkLdngUnldingWorkingInAnOffice,
    DriverAvailableShortBreak,
    RestSleeping,
    XValue(u8),
}
impl From<u8> for Driver1WorkingState2365484286 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            6 => Self::Error,
            4 => Self::X101reserved,
            3 => Self::DriveBehindWheel,
            2 => Self::WrkLdngUnldingWorkingInAnOffice,
            1 => Self::DriverAvailableShortBreak,
            0 => Self::RestSleeping,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrnsShftSlctorDisplayModeSwitch2348941054 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for TrnsShftSlctorDisplayModeSwitch2348941054 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransMode42348941054 {
    TakeNoAction,
    Reserved,
    Enable,
    Disable,
    XValue(u8),
}
impl From<u8> for TransMode42348941054 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::TakeNoAction,
            2 => Self::Reserved,
            1 => Self::Enable,
            0 => Self::Disable,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransMode32348941054 {
    TakeNoAction,
    Reserved,
    Enable,
    Disable,
    XValue(u8),
}
impl From<u8> for TransMode32348941054 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::TakeNoAction,
            2 => Self::Reserved,
            1 => Self::Enable,
            0 => Self::Disable,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransMode22348941054 {
    TakeNoAction,
    Reserved,
    Enable,
    Disable,
    XValue(u8),
}
impl From<u8> for TransMode22348941054 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::TakeNoAction,
            2 => Self::Reserved,
            1 => Self::Enable,
            0 => Self::Disable,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransMode12348941054 {
    TakeNoAction,
    Reserved,
    Enable,
    Disable,
    XValue(u8),
}
impl From<u8> for TransMode12348941054 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::TakeNoAction,
            2 => Self::Reserved,
            1 => Self::Enable,
            0 => Self::Disable,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum DisengageDiffLockRqCentralRear2348941054 {
    Reserved,
    TakeNoAction,
    DisengageDiffLock,
    EngageDiffLock,
    XValue(u8),
}
impl From<u8> for DisengageDiffLockRqCentralRear2348941054 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            2 => Self::Reserved,
            3 => Self::TakeNoAction,
            1 => Self::DisengageDiffLock,
            0 => Self::EngageDiffLock,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum DisengageDiffLockRqCentralFront2348941054 {
    Reserved,
    TakeNoAction,
    DisengageDiffLock,
    EngageDiffLock,
    XValue(u8),
}
impl From<u8> for DisengageDiffLockRqCentralFront2348941054 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            2 => Self::Reserved,
            3 => Self::TakeNoAction,
            1 => Self::DisengageDiffLock,
            0 => Self::EngageDiffLock,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum DisengageDiffLockRqCentral2348941054 {
    Reserved,
    TakeNoAction,
    DisengageDiffLock,
    EngageDiffLock,
    XValue(u8),
}
impl From<u8> for DisengageDiffLockRqCentral2348941054 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            2 => Self::Reserved,
            3 => Self::TakeNoAction,
            1 => Self::DisengageDiffLock,
            0 => Self::EngageDiffLock,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum DisengageDiffLockRqRearAxle22348941054 {
    Reserved,
    TakeNoAction,
    DisengageDiffLock,
    EngageDiffLock,
    XValue(u8),
}
impl From<u8> for DisengageDiffLockRqRearAxle22348941054 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            2 => Self::Reserved,
            3 => Self::TakeNoAction,
            1 => Self::DisengageDiffLock,
            0 => Self::EngageDiffLock,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum DisengageDiffLockRqRearAxle12348941054 {
    Reserved,
    TakeNoAction,
    DisengageDiffLock,
    EngageDiffLock,
    XValue(u8),
}
impl From<u8> for DisengageDiffLockRqRearAxle12348941054 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            2 => Self::Reserved,
            3 => Self::TakeNoAction,
            1 => Self::DisengageDiffLock,
            0 => Self::EngageDiffLock,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum DisengageDiffLockRqFrontAxle22348941054 {
    Reserved,
    TakeNoAction,
    DisengageDiffLock,
    EngageDiffLock,
    XValue(u8),
}
impl From<u8> for DisengageDiffLockRqFrontAxle22348941054 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            2 => Self::Reserved,
            3 => Self::TakeNoAction,
            1 => Self::DisengageDiffLock,
            0 => Self::EngageDiffLock,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum DisengageDiffLockRqFrontAxle12348941054 {
    Reserved,
    TakeNoAction,
    DisengageDiffLock,
    EngageDiffLock,
    XValue(u8),
}
impl From<u8> for DisengageDiffLockRqFrontAxle12348941054 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            2 => Self::Reserved,
            3 => Self::TakeNoAction,
            1 => Self::DisengageDiffLock,
            0 => Self::EngageDiffLock,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransRqedGear2348941054 {
    Reserved,
    NeutralSelectorPos,
    ReverseSelectorPos,
    PsUnknownAndOrNoButtonsPressed,
    PrssOfMmntryBttnTRslctCrrentPos,
    BtwnRvrsAndPrkShiftSelectorPoss,
    BtwnNtrlAndRvrsShftSelectorPoss,
    BtwnDrvAndNtrlShiftSelectorPoss,
    BtwnD1AndDriveShiftSelectorPoss,
    BetweenD2AndD1ShiftSelectorPoss,
    BetweenD3AndD2ShiftSelectorPoss,
    BetweenD4AndD3ShiftSelectorPoss,
    BetweenD5AndD4ShiftSelectorPoss,
    BetweenD6AndD5ShiftSelectorPoss,
    BetweenD7AndD6ShiftSelectorPoss,
    BtwnTwoForwardShiftSelectorPoss,
    BtwnTwoReverseShiftSelectorPoss,
    BetweenTwoShiftSelectorPoss,
    D77thFrwrdSlctrPsRfrncdFrmDrive,
    D66thFrwrdSlctrPsRfrncdFrmDrive,
    D55thFrwrdSlctrPsRfrncdFrmDrive,
    D44thFrwrdSlctrPsRfrncdFrmDrive,
    D33rdFrwrdSlctrPsRfrncdFrmDrive,
    D22ndFrwrdSlctrPsRfrncdFrmDrive,
    D11stFrwrdSlctrPsRfrncdFrmDrive,
    Downshift2GearsFromCurrentPos,
    Downshift1GearFromCurrentPos,
    Upshift2GearsFromCurrentPos,
    Upshift1GearFromCurrentPos,
    ForwardLowPos,
    ParkPos,
    ForwardDrivePos,
    HoldCurrentGear,
    XValue(f64),
}
impl From<f64> for TransRqedGear2348941054 {
    #[allow(dead_code)]
    fn from(val: f64) -> Self {
        match val as u64 {
            61 => Self::Reserved,
            222 => Self::NeutralSelectorPos,
            223 => Self::ReverseSelectorPos,
            224 => Self::PsUnknownAndOrNoButtonsPressed,
            225 => Self::PrssOfMmntryBttnTRslctCrrentPos,
            226 => Self::BtwnRvrsAndPrkShiftSelectorPoss,
            227 => Self::BtwnNtrlAndRvrsShftSelectorPoss,
            228 => Self::BtwnDrvAndNtrlShiftSelectorPoss,
            229 => Self::BtwnD1AndDriveShiftSelectorPoss,
            230 => Self::BetweenD2AndD1ShiftSelectorPoss,
            231 => Self::BetweenD3AndD2ShiftSelectorPoss,
            232 => Self::BetweenD4AndD3ShiftSelectorPoss,
            233 => Self::BetweenD5AndD4ShiftSelectorPoss,
            234 => Self::BetweenD6AndD5ShiftSelectorPoss,
            235 => Self::BetweenD7AndD6ShiftSelectorPoss,
            236 => Self::BtwnTwoForwardShiftSelectorPoss,
            237 => Self::BtwnTwoReverseShiftSelectorPoss,
            238 => Self::BetweenTwoShiftSelectorPoss,
            239 => Self::D77thFrwrdSlctrPsRfrncdFrmDrive,
            240 => Self::D66thFrwrdSlctrPsRfrncdFrmDrive,
            241 => Self::D55thFrwrdSlctrPsRfrncdFrmDrive,
            242 => Self::D44thFrwrdSlctrPsRfrncdFrmDrive,
            243 => Self::D33rdFrwrdSlctrPsRfrncdFrmDrive,
            244 => Self::D22ndFrwrdSlctrPsRfrncdFrmDrive,
            245 => Self::D11stFrwrdSlctrPsRfrncdFrmDrive,
            246 => Self::Downshift2GearsFromCurrentPos,
            247 => Self::Downshift1GearFromCurrentPos,
            248 => Self::Upshift2GearsFromCurrentPos,
            249 => Self::Upshift1GearFromCurrentPos,
            250 => Self::ForwardLowPos,
            251 => Self::ParkPos,
            252 => Self::ForwardDrivePos,
            253 => Self::HoldCurrentGear,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum DisengageDrivelineRq2348941054 {
    Reserved,
    TakeNoAction,
    DisengageDriveline,
    AllowDrivelineEngagement,
    XValue(u8),
}
impl From<u8> for DisengageDrivelineRq2348941054 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            2 => Self::Reserved,
            3 => Self::TakeNoAction,
            1 => Self::DisengageDriveline,
            0 => Self::AllowDrivelineEngagement,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TorqueConverterLockupDisableRq2348941054 {
    Reserved,
    TakeNoAction,
    DisableTorqueConvertorLockup,
    AllowTorqueConvertorLockup,
    XValue(u8),
}
impl From<u8> for TorqueConverterLockupDisableRq2348941054 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            2 => Self::Reserved,
            3 => Self::TakeNoAction,
            1 => Self::DisableTorqueConvertorLockup,
            0 => Self::AllowTorqueConvertorLockup,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransGearShiftInhibitRq2348941054 {
    Reserved,
    TakeNoAction,
    GearShiftsAreInhibited,
    GearShiftsAreAllowed,
    XValue(u8),
}
impl From<u8> for TransGearShiftInhibitRq2348941054 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            2 => Self::Reserved,
            3 => Self::TakeNoAction,
            1 => Self::GearShiftsAreInhibited,
            0 => Self::GearShiftsAreAllowed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngOverspeedTest2566841598 {
    NotAvailable,
    Reserved,
    EngOverspeedTestActive,
    EngOverspeedTestNotActive,
    XValue(u8),
}
impl From<u8> for EngOverspeedTest2566841598 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::EngOverspeedTestActive,
            0 => Self::EngOverspeedTestNotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngAirShutoffCmdStatus2566841598 {
    ArShtffDsbldNtAttmptngTShtffEng,
    NotAvailable,
    Reserved,
    ArShtffEnbldAttmptngTShtffEngAr,
    XValue(u8),
}
impl From<u8> for EngAirShutoffCmdStatus2566841598 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            0 => Self::ArShtffDsbldNtAttmptngTShtffEng,
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::ArShtffEnbldAttmptngTShtffEngAr,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngAlarmOutputCmdStatus2566841598 {
    NotAvailable,
    Reserved,
    EngAlarmOutputCmdActive,
    EngAlarmOutputCmdNotActive,
    XValue(u8),
}
impl From<u8> for EngAlarmOutputCmdStatus2566841598 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::EngAlarmOutputCmdActive,
            0 => Self::EngAlarmOutputCmdNotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngAlarmAcknowledge2566841598 {
    NotAvailable,
    Error,
    EngAlarmAcknowledgeActive,
    EngAlarmAcknowledgeNotActive,
    XValue(u8),
}
impl From<u8> for EngAlarmAcknowledge2566841598 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::EngAlarmAcknowledgeActive,
            0 => Self::EngAlarmAcknowledgeNotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngProtectionSystemConfig2566841598 {
    NotAvailable,
    Error,
    EnabledInCalib,
    DisabledInCalib,
    XValue(u8),
}
impl From<u8> for EngProtectionSystemConfig2566841598 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::EnabledInCalib,
            0 => Self::DisabledInCalib,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngProtectionSystemTimerState2566841598 {
    NotAvailable,
    Error,
    Active,
    Inactive,
    XValue(u8),
}
impl From<u8> for EngProtectionSystemTimerState2566841598 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Active,
            0 => Self::Inactive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngPrtectionSystemTimerOverride2566841598 {
    NotAvailable,
    Error,
    Active,
    Inactive,
    XValue(u8),
}
impl From<u8> for EngPrtectionSystemTimerOverride2566841598 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Active,
            0 => Self::Inactive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngPrtctnSystmApprchingShutdown2566841598 {
    NotAvailable,
    Error,
    Approaching,
    NotApproaching,
    XValue(u8),
}
impl From<u8> for EngPrtctnSystmApprchingShutdown2566841598 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Approaching,
            0 => Self::NotApproaching,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngPrtctionSystemHasShutdownEng2566841598 {
    No,
    XValue(u8),
}
impl From<u8> for EngPrtctionSystemHasShutdownEng2566841598 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            0 => Self::No,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngWaitToStartLamp2566841598 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for EngWaitToStartLamp2566841598 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RefrigerantHighPressSwitch2566841598 {
    NotAvailable,
    Error,
    PrssTHghCmprssrCltchMyBDsngaged,
    PressNormal,
    XValue(u8),
}
impl From<u8> for RefrigerantHighPressSwitch2566841598 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::PrssTHghCmprssrCltchMyBDsngaged,
            0 => Self::PressNormal,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RefrigerantLowPressSwitch2566841598 {
    NotAvailable,
    Error,
    PrssTLwCmprssrCltchMyBDsengaged,
    PressNormal,
    XValue(u8),
}
impl From<u8> for RefrigerantLowPressSwitch2566841598 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::PrssTLwCmprssrCltchMyBDsengaged,
            0 => Self::PressNormal,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ACHighPressFanSwitch2566841598 {
    NotAvailable,
    Error,
    PressHighFanMayBeEngaged,
    PressNormal,
    XValue(u8),
}
impl From<u8> for ACHighPressFanSwitch2566841598 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::PressHighFanMayBeEngaged,
            0 => Self::PressNormal,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngIdleShutdownTimerFunction2566841598 {
    NotAvailable,
    Error,
    EnabledInCalib,
    DisabledInCalib,
    XValue(u8),
}
impl From<u8> for EngIdleShutdownTimerFunction2566841598 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::EnabledInCalib,
            0 => Self::DisabledInCalib,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngIdleShutdownTimerState2566841598 {
    NotAvailable,
    Error,
    Active,
    Inactive,
    XValue(u8),
}
impl From<u8> for EngIdleShutdownTimerState2566841598 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Active,
            0 => Self::Inactive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngIdleShutdownTimerOverride2566841598 {
    NotAvailable,
    Error,
    Active,
    Inactive,
    XValue(u8),
}
impl From<u8> for EngIdleShutdownTimerOverride2566841598 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Active,
            0 => Self::Inactive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngIdleShutdownDriverAlertMode2566841598 {
    NotAvailable,
    Error,
    Active,
    Inactive,
    XValue(u8),
}
impl From<u8> for EngIdleShutdownDriverAlertMode2566841598 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Active,
            0 => Self::Inactive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngIdleShutdownHasShutdownEng2566841598 {
    Yes,
    No,
    XValue(u8),
}
impl From<u8> for EngIdleShutdownHasShutdownEng2566841598 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::Yes,
            0 => Self::No,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngBuildHoursReset2631859966 {
    Reserved,
    TakeNoAction,
    Reset,
    DoNotReset,
    XValue(u8),
}
impl From<u8> for EngBuildHoursReset2631859966 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            2 => Self::Reserved,
            3 => Self::TakeNoAction,
            1 => Self::Reset,
            0 => Self::DoNotReset,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TripGroup2Proprietary2631859966 {
    Reserved,
    NotApplicable,
    Reset,
    TakeNoAction,
    XValue(u8),
}
impl From<u8> for TripGroup2Proprietary2631859966 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            2 => Self::Reserved,
            3 => Self::NotApplicable,
            1 => Self::Reset,
            0 => Self::TakeNoAction,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TripGroup12631859966 {
    Reserved,
    NotApplicable,
    Reset,
    TakeNoAction,
    XValue(u8),
}
impl From<u8> for TripGroup12631859966 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            2 => Self::Reserved,
            3 => Self::NotApplicable,
            1 => Self::Reset,
            0 => Self::TakeNoAction,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RetarderLocation2566840830 {
    NotAvailable,
    Other,
    X1101notDefined,
    Trailer,
    Driveline,
    TransOutput,
    TransInput,
    EngExhaustBrake,
    EngCompressionReleaseBrake,
    XValue(u8),
}
impl From<u8> for RetarderLocation2566840830 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            14 => Self::Other,
            6 => Self::X1101notDefined,
            5 => Self::Trailer,
            4 => Self::Driveline,
            3 => Self::TransOutput,
            2 => Self::TransInput,
            1 => Self::EngExhaustBrake,
            0 => Self::EngCompressionReleaseBrake,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RetarderType2566840830 {
    NotAvailable,
    Other,
    X1101notDefined,
    Exhaust,
    CompressionRelease,
    CooledFriction,
    Hyd,
    ElectricMagnetic,
    XValue(u8),
}
impl From<u8> for RetarderType2566840830 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            14 => Self::Other,
            5 => Self::X1101notDefined,
            4 => Self::Exhaust,
            3 => Self::CompressionRelease,
            2 => Self::CooledFriction,
            1 => Self::Hyd,
            0 => Self::ElectricMagnetic,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum OperatorPtoMemorySelectSwitch2566844670 {
    NotAvailable,
    Error,
    PtoSetSpeedMemory2Selected,
    PtoSetSpeedMemory1Selected,
    XValue(u8),
}
impl From<u8> for OperatorPtoMemorySelectSwitch2566844670 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::PtoSetSpeedMemory2Selected,
            0 => Self::PtoSetSpeedMemory1Selected,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngPtoAccelerateSwitch2566844670 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for EngPtoAccelerateSwitch2566844670 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngPtoResumeSwitch2566844670 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for EngPtoResumeSwitch2566844670 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngPtoCoastDecelerateSwitch2566844670 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for EngPtoCoastDecelerateSwitch2566844670 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngPtoSetSwitch2566844670 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for EngPtoSetSwitch2566844670 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngRmtPtoVriableSpeedCtrlSwitch2566844670 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for EngRmtPtoVriableSpeedCtrlSwitch2566844670 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngRmtPtoPrprgrmmdSpdCtrlSwitch2566844670 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for EngRmtPtoPrprgrmmdSpdCtrlSwitch2566844670 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngPtoEnableSwitch2566844670 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for EngPtoEnableSwitch2566844670 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RmtPtoPrprgrmmdSpeedCtrlSwitch22566844670 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for RmtPtoPrprgrmmdSpeedCtrlSwitch22566844670 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxInputIgnoreSwitch2566844670 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for AuxInputIgnoreSwitch2566844670 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RearWasherFunction2566770174 {
    NotAvailable,
    X110reserved,
    High,
    Medium,
    Low,
    Off,
    XValue(u8),
}
impl From<u8> for RearWasherFunction2566770174 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            4 => Self::X110reserved,
            3 => Self::High,
            2 => Self::Medium,
            1 => Self::Low,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FrontOperatorWasherSwitch2566770174 {
    NotAvailable,
    X110reserved,
    High,
    Medium,
    Low,
    Off,
    XValue(u8),
}
impl From<u8> for FrontOperatorWasherSwitch2566770174 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            4 => Self::X110reserved,
            3 => Self::High,
            2 => Self::Medium,
            1 => Self::Low,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FrontNonoperatorWasherSwitch2566770174 {
    NotAvailable,
    X110reserved,
    High,
    Medium,
    Low,
    Off,
    XValue(u8),
}
impl From<u8> for FrontNonoperatorWasherSwitch2566770174 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            4 => Self::X110reserved,
            3 => Self::High,
            2 => Self::Medium,
            1 => Self::Low,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RearWiperSwitch2566770174 {
    X1110reserved,
    Mist,
    Delayed2,
    Delayed1,
    Medium,
    NotAvailable,
    High,
    Low,
    Off,
    XValue(u8),
}
impl From<u8> for RearWiperSwitch2566770174 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::X1110reserved,
            6 => Self::Mist,
            5 => Self::Delayed2,
            4 => Self::Delayed1,
            2 => Self::Medium,
            15 => Self::NotAvailable,
            3 => Self::High,
            1 => Self::Low,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FrontOperatorWiperSwitch2566770174 {
    X1110reserved,
    Mist,
    Delayed2,
    Delayed1,
    Medium,
    NotAvailable,
    High,
    Low,
    Off,
    XValue(u8),
}
impl From<u8> for FrontOperatorWiperSwitch2566770174 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::X1110reserved,
            6 => Self::Mist,
            5 => Self::Delayed2,
            4 => Self::Delayed1,
            2 => Self::Medium,
            15 => Self::NotAvailable,
            3 => Self::High,
            1 => Self::Low,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FrontNonoperatorWiperSwitch2566770174 {
    X1110reserved,
    Mist,
    Delayed2,
    Delayed1,
    Medium,
    NotAvailable,
    High,
    Low,
    Off,
    XValue(u8),
}
impl From<u8> for FrontNonoperatorWiperSwitch2566770174 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::X1110reserved,
            6 => Self::Mist,
            5 => Self::Delayed2,
            4 => Self::Delayed1,
            2 => Self::Medium,
            15 => Self::NotAvailable,
            3 => Self::High,
            1 => Self::Low,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngAltDroopAuxInputSelect2566769662 {
    NotAvailable,
    ErrorCondition,
    Thr1101OnOfAltDrpSttng1Thrgh13I,
    NormalDroopSettingIsSelected,
    XValue(u8),
}
impl From<u8> for EngAltDroopAuxInputSelect2566769662 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            14 => Self::ErrorCondition,
            1 => Self::Thr1101OnOfAltDrpSttng1Thrgh13I,
            0 => Self::NormalDroopSettingIsSelected,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngAltDroopRemoteAccelSelect2566769662 {
    NotAvailable,
    ErrorCondition,
    Thr1101OnOfAltDrpSttng1Thrgh13I,
    NormalDroopSettingIsSelected,
    XValue(u8),
}
impl From<u8> for EngAltDroopRemoteAccelSelect2566769662 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            14 => Self::ErrorCondition,
            1 => Self::Thr1101OnOfAltDrpSttng1Thrgh13I,
            0 => Self::NormalDroopSettingIsSelected,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngAltDroopAccel2Select2566769662 {
    NotAvailable,
    ErrorCondition,
    Thr1101OnOfAltDrpSttng1Thrgh13I,
    NormalDroopSettingIsSelected,
    XValue(u8),
}
impl From<u8> for EngAltDroopAccel2Select2566769662 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            14 => Self::ErrorCondition,
            1 => Self::Thr1101OnOfAltDrpSttng1Thrgh13I,
            0 => Self::NormalDroopSettingIsSelected,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngAltDroopAccel1Select2566769662 {
    NotAvailable,
    ErrorCondition,
    Thr1101OnOfAltDrpSttng1Thrgh13I,
    NormalDroopSettingIsSelected,
    XValue(u8),
}
impl From<u8> for EngAltDroopAccel1Select2566769662 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            14 => Self::ErrorCondition,
            1 => Self::Thr1101OnOfAltDrpSttng1Thrgh13I,
            0 => Self::NormalDroopSettingIsSelected,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngAltRatingSelect2566769662 {
    IndctsThtAltPwrFling1IsSelected,
    IndctsThtMxPwrFuelingIsSelected,
    XValue(u8),
}
impl From<u8> for EngAltRatingSelect2566769662 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::IndctsThtAltPwrFling1IsSelected,
            0 => Self::IndctsThtMxPwrFuelingIsSelected,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngAltLowIdleSwitch2566769662 {
    NotAvailableUnused,
    Error,
    AltLowIdlePointIsSelected,
    DefaultLowIdlePointIsSelected,
    XValue(u8),
}
impl From<u8> for EngAltLowIdleSwitch2566769662 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailableUnused,
            2 => Self::Error,
            1 => Self::AltLowIdlePointIsSelected,
            0 => Self::DefaultLowIdlePointIsSelected,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngSynchronizationSwitch2566769662 {
    NotAvailableUnused,
    Error,
    FunctionalityIsEnabled,
    FunctionalityIsDisabled,
    XValue(u8),
}
impl From<u8> for EngSynchronizationSwitch2566769662 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailableUnused,
            2 => Self::Error,
            1 => Self::FunctionalityIsEnabled,
            0 => Self::FunctionalityIsDisabled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngAuxGovernorSwitch2566769662 {
    ErrorCondition,
    AuxGovernorIsEnabled,
    AuxGovernorIsDisabled,
    XValue(u8),
}
impl From<u8> for EngAuxGovernorSwitch2566769662 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            2 => Self::ErrorCondition,
            1 => Self::AuxGovernorIsEnabled,
            0 => Self::AuxGovernorIsDisabled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngAltDroopAuxInputSelectState2566768638 {
    SaeReserved,
    Thr1101CtrlSttIsOnOfAltDrpSttng,
    CtrlStateIsNormalDroopSetting,
    XValue(u8),
}
impl From<u8> for EngAltDroopAuxInputSelectState2566768638 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            14 => Self::SaeReserved,
            1 => Self::Thr1101CtrlSttIsOnOfAltDrpSttng,
            0 => Self::CtrlStateIsNormalDroopSetting,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngAltDrpRemoteAccelSelectState2566768638 {
    NotAvailable,
    SaeReserved,
    Thr1101CtrlSttIsOnOfAltDrpSttng,
    CtrlStateIsNormalDroopSetting,
    XValue(u8),
}
impl From<u8> for EngAltDrpRemoteAccelSelectState2566768638 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            14 => Self::SaeReserved,
            1 => Self::Thr1101CtrlSttIsOnOfAltDrpSttng,
            0 => Self::CtrlStateIsNormalDroopSetting,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngAltDroopAccel2SelectState2566768638 {
    NotAvailable,
    SaeReserved,
    Thr1101CtrlsSttIsOnOfAltDrpSttn,
    CtrlsStateIsNormalDroopSetting,
    XValue(u8),
}
impl From<u8> for EngAltDroopAccel2SelectState2566768638 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            14 => Self::SaeReserved,
            1 => Self::Thr1101CtrlsSttIsOnOfAltDrpSttn,
            0 => Self::CtrlsStateIsNormalDroopSetting,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngAltDroopAccel1SelectState2566768638 {
    NotAvailable,
    SaeReserved,
    Thr1101CtrlSttIsOnOfAltDrpSttng,
    CtrlStateIsNormalDroopSetting,
    XValue(u8),
}
impl From<u8> for EngAltDroopAccel1SelectState2566768638 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            14 => Self::SaeReserved,
            1 => Self::Thr1101CtrlSttIsOnOfAltDrpSttng,
            0 => Self::CtrlStateIsNormalDroopSetting,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngAltRatingSelectState2566768638 {
    CtrlStateIsAltPowerFueling1,
    CtrlStateIsMaxPowerFueling,
    XValue(u8),
}
impl From<u8> for EngAltRatingSelectState2566768638 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::CtrlStateIsAltPowerFueling1,
            0 => Self::CtrlStateIsMaxPowerFueling,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngAltLowIdleSelectState2566768638 {
    NotAvailable,
    SaeReserved,
    AltIdleState,
    NormalIdleState,
    XValue(u8),
}
impl From<u8> for EngAltLowIdleSelectState2566768638 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::SaeReserved,
            1 => Self::AltIdleState,
            0 => Self::NormalIdleState,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngMultiUnitSyncState2566768638 {
    NotAvailable,
    SaeReserved,
    CtrlStateIsFunctionalityEnabled,
    CtrlStteIsFunctionalityDisabled,
    XValue(u8),
}
impl From<u8> for EngMultiUnitSyncState2566768638 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::SaeReserved,
            1 => Self::CtrlStateIsFunctionalityEnabled,
            0 => Self::CtrlStteIsFunctionalityDisabled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngAuxGovernorState2566768638 {
    NotAvailable,
    SaeReserved,
    CtrlStateIsAuxGovernorEnabled,
    CtrlStateIsAuxGovernorDisabled,
    XValue(u8),
}
impl From<u8> for EngAuxGovernorState2566768638 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::SaeReserved,
            1 => Self::CtrlStateIsAuxGovernorEnabled,
            0 => Self::CtrlStateIsAuxGovernorDisabled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum HighLowBeamSwitch2365443326 {
    NotAvailable,
    Error,
    HighBeamSelected,
    LowBeamSelected,
    XValue(u8),
}
impl From<u8> for HighLowBeamSwitch2365443326 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::HighBeamSelected,
            0 => Self::LowBeamSelected,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum HazardLightSwitch2365443326 {
    NotAvailable,
    Error,
    HazardLampsToBeFlashing,
    HazardLampsToBeOff,
    XValue(u8),
}
impl From<u8> for HazardLightSwitch2365443326 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::HazardLampsToBeFlashing,
            0 => Self::HazardLampsToBeOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TurnSignalSwitch2365443326 {
    RightTurnToBeFlashing,
    NotAvailable,
    Error,
    X1101reserved,
    LeftTurnToBeFlashing,
    NoTurnBeingSignaled,
    XValue(u8),
}
impl From<u8> for TurnSignalSwitch2365443326 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            2 => Self::RightTurnToBeFlashing,
            15 => Self::NotAvailable,
            14 => Self::Error,
            3 => Self::X1101reserved,
            1 => Self::LeftTurnToBeFlashing,
            0 => Self::NoTurnBeingSignaled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum MainLightSwitch2365443326 {
    X1101reserved,
    DlydOffPsByWhchThOprtrSlctsThtA,
    X0111reserved,
    HdlghtOnPsByWhchThOprtrSlctsTht,
    NotAvailable,
    Error,
    HdlghtAndPrkOnPsByWhchThOprtrSl,
    PrkOnPsByWhchThOprtrSlctsThtThP,
    OffPsByWhchThOprtrSlctsThtNnOfT,
    XValue(u8),
}
impl From<u8> for MainLightSwitch2365443326 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            9 => Self::X1101reserved,
            8 => Self::DlydOffPsByWhchThOprtrSlctsThtA,
            4 => Self::X0111reserved,
            2 => Self::HdlghtOnPsByWhchThOprtrSlctsTht,
            15 => Self::NotAvailable,
            14 => Self::Error,
            3 => Self::HdlghtAndPrkOnPsByWhchThOprtrSl,
            1 => Self::PrkOnPsByWhchThOprtrSlctsThtThP,
            0 => Self::OffPsByWhchThOprtrSlctsThtNnOfT,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum WorkLightSwitch2365443326 {
    X1101reserved,
    WrkLghtCmbntn4OnPsByWhchThOprtr,
    WrkLghtCmbntn2OnPsByWhchThOprtr,
    NotAvailable,
    Error,
    WrkLghtCmbntn3OnPsByWhchThOprtr,
    WrkLghtCmbntn1OnPsByWhchThOprtr,
    OffPsByWhchThOprtrSlctsThtNnOfT,
    XValue(u8),
}
impl From<u8> for WorkLightSwitch2365443326 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            5 => Self::X1101reserved,
            4 => Self::WrkLghtCmbntn4OnPsByWhchThOprtr,
            2 => Self::WrkLghtCmbntn2OnPsByWhchThOprtr,
            15 => Self::NotAvailable,
            14 => Self::Error,
            3 => Self::WrkLghtCmbntn3OnPsByWhchThOprtr,
            1 => Self::WrkLghtCmbntn1OnPsByWhchThOprtr,
            0 => Self::OffPsByWhchThOprtrSlctsThtNnOfT,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum BlackOutWorkLampSelect2566802686 {
    NotSupported,
    Reserved,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for BlackOutWorkLampSelect2566802686 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotSupported,
            2 => Self::Reserved,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum NightVisionIlluminatorSelect2566802686 {
    NotSupported,
    Reserved,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for NightVisionIlluminatorSelect2566802686 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotSupported,
            2 => Self::Reserved,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum BlackOutBrakeStopLampSelect2566802686 {
    NotSupported,
    Reserved,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for BlackOutBrakeStopLampSelect2566802686 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotSupported,
            2 => Self::Reserved,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ConvoyDrivingLampSelect2566802686 {
    NotSupported,
    Reserved,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for ConvoyDrivingLampSelect2566802686 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotSupported,
            2 => Self::Reserved,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ConvoyLampSelect2566802686 {
    NotSupported,
    Reserved,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for ConvoyLampSelect2566802686 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotSupported,
            2 => Self::Reserved,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FrontBlackOutMarkerLampSelect2566802686 {
    NotSupported,
    Reserved,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for FrontBlackOutMarkerLampSelect2566802686 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotSupported,
            2 => Self::Reserved,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RearBlackOutMarkerSelect2566802686 {
    NotSupported,
    Reserved,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for RearBlackOutMarkerSelect2566802686 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotSupported,
            2 => Self::Reserved,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SlowVesselModeStatus2566774014 {
    TakeNoAction,
    Reserved,
    SlowVesselModeIsActive,
    SlowVesselModeIsOff,
    XValue(u8),
}
impl From<u8> for SlowVesselModeStatus2566774014 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::TakeNoAction,
            2 => Self::Reserved,
            1 => Self::SlowVesselModeIsActive,
            0 => Self::SlowVesselModeIsOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrollingModeStatus2566774014 {
    TakeNoAction,
    Reserved,
    TrollingModeIsActive,
    TrollingModeIsOff,
    XValue(u8),
}
impl From<u8> for TrollingModeStatus2566774014 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::TakeNoAction,
            2 => Self::Reserved,
            1 => Self::TrollingModeIsActive,
            0 => Self::TrollingModeIsOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngThrttlSynchrnztionModeStatus2566774014 {
    TakeNoAction,
    X1110reserved,
    SynchronizedMaster,
    SynchronizedStarboard,
    SynchronizedPort,
    SynchronizedCenter,
    NotSynchronized,
    XValue(u8),
}
impl From<u8> for EngThrttlSynchrnztionModeStatus2566774014 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::TakeNoAction,
            5 => Self::X1110reserved,
            4 => Self::SynchronizedMaster,
            3 => Self::SynchronizedStarboard,
            2 => Self::SynchronizedPort,
            1 => Self::SynchronizedCenter,
            0 => Self::NotSynchronized,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum DisplayDeadbands2432595710 {
    NotAvailable,
    X1110reserved,
    Wide24mm,
    Standard12mm,
    Narrow45mm,
    XValue(u8),
}
impl From<u8> for DisplayDeadbands2432595710 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            3 => Self::X1110reserved,
            2 => Self::Wide24mm,
            1 => Self::Standard12mm,
            0 => Self::Narrow45mm,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LedPatternCtrl2432595710 {
    NotAvailable,
    X1110reserved,
    X7channel,
    Offset,
    X5channel,
    XValue(u8),
}
impl From<u8> for LedPatternCtrl2432595710 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            3 => Self::X1110reserved,
            2 => Self::X7channel,
            1 => Self::Offset,
            0 => Self::X5channel,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LedDisplayDeadbandCtrl2432595710 {
    NotAvailableNotApplicable,
    X1110reserved,
    X1mm,
    X5mm,
    X24mm,
    X12mm,
    X45mm,
    XValue(u8),
}
impl From<u8> for LedDisplayDeadbandCtrl2432595710 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailableNotApplicable,
            5 => Self::X1110reserved,
            4 => Self::X1mm,
            3 => Self::X5mm,
            2 => Self::X24mm,
            1 => Self::X12mm,
            0 => Self::X45mm,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LedDisplayModeCtrl2432595710 {
    NotAvailableNotApplicable,
    X1110reserved,
    CenterOnGradeDisplayMode2,
    OffsetOnGradeDisplayMode,
    CenterOnGradeDisplayMode1,
    XValue(u8),
}
impl From<u8> for LedDisplayModeCtrl2432595710 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailableNotApplicable,
            3 => Self::X1110reserved,
            2 => Self::CenterOnGradeDisplayMode2,
            1 => Self::OffsetOnGradeDisplayMode,
            0 => Self::CenterOnGradeDisplayMode1,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LedDisplayData12432595710 {
    LowCoarseLedOn,
    LowFineLedOn,
    OngradeLedOn,
    HighFineLedOn,
    HighCoarseLedOn,
    XValue(u8),
}
impl From<u8> for LedDisplayData12432595710 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            32 => Self::LowCoarseLedOn,
            16 => Self::LowFineLedOn,
            8 => Self::OngradeLedOn,
            4 => Self::HighFineLedOn,
            2 => Self::HighCoarseLedOn,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LaserReceiverType2365486590 {
    LinearLaserReceiver,
    Reserved,
    XValue(u8),
}
impl From<u8> for LaserReceiverType2365486590 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::LinearLaserReceiver,
            0 => Self::Reserved,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LaserTracerInformation2365485566 {
    Curb,
    Stringline,
    PreviousPass,
    ValidTarget,
    LaserIsReady,
    LaserPowerIsOn,
    XValue(u8),
}
impl From<u8> for LaserTracerInformation2365485566 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            32 => Self::Curb,
            16 => Self::Stringline,
            8 => Self::PreviousPass,
            4 => Self::ValidTarget,
            2 => Self::LaserIsReady,
            1 => Self::LaserPowerIsOn,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LedDisplayData22365485566 {
    RightLedOn,
    LeftLedOn,
    DownLedOn,
    UpLedOn,
    OngradeCledOn,
    OngradeBledOn,
    OngradeAledOn,
    XValue(u8),
}
impl From<u8> for LedDisplayData22365485566 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            64 => Self::RightLedOn,
            32 => Self::LeftLedOn,
            16 => Self::DownLedOn,
            8 => Self::UpLedOn,
            4 => Self::OngradeCledOn,
            2 => Self::OngradeBledOn,
            1 => Self::OngradeAledOn,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SdshftDsrdBldOffsetOperatorCtrl2364542462 {
    NotInstalled,
    ErrorIndicator,
    X1101reserved,
    AutomaticOperatorCtrlRq,
    ManualOperatorCtrlRq,
    NoOperatorCtrlRq,
    MomentaryOperatorCtrlRq,
    XValue(u8),
}
impl From<u8> for SdshftDsrdBldOffsetOperatorCtrl2364542462 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotInstalled,
            14 => Self::ErrorIndicator,
            4 => Self::X1101reserved,
            3 => Self::AutomaticOperatorCtrlRq,
            2 => Self::ManualOperatorCtrlRq,
            0 => Self::NoOperatorCtrlRq,
            1 => Self::MomentaryOperatorCtrlRq,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SdshftBldCtrlMdeOperatorControl2364542462 {
    NotInstalled,
    ErrorIndicator,
    X1101reserved,
    AutomaticOperatorCtrlRq,
    ManualOperatorCtrlRq,
    NoOperatorCtrlRq,
    OprtrCtrlSttCnBRdInTwWysOnMthdU,
    XValue(u8),
}
impl From<u8> for SdshftBldCtrlMdeOperatorControl2364542462 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotInstalled,
            14 => Self::ErrorIndicator,
            4 => Self::X1101reserved,
            3 => Self::AutomaticOperatorCtrlRq,
            2 => Self::ManualOperatorCtrlRq,
            0 => Self::NoOperatorCtrlRq,
            1 => Self::OprtrCtrlSttCnBRdInTwWysOnMthdU,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RghtDsrdBladeOffsetOperatorCtrl2364542462 {
    NotInstalled,
    ErrorIndicator,
    X1101reserved,
    DecrementOperatorCtrlRq,
    NoOperatorCtrlRq,
    OprtrCtrlSttCnBRdInTwWysOnMthdU,
    XValue(u8),
}
impl From<u8> for RghtDsrdBladeOffsetOperatorCtrl2364542462 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotInstalled,
            14 => Self::ErrorIndicator,
            3 => Self::X1101reserved,
            2 => Self::DecrementOperatorCtrlRq,
            0 => Self::NoOperatorCtrlRq,
            1 => Self::OprtrCtrlSttCnBRdInTwWysOnMthdU,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RghtBldeCtrlModeOperatorControl2364542462 {
    NotInstalled,
    ErrorIndicator,
    AutomaticOperatorCtrlRq,
    ManualOperatorCtrlRq,
    NoChange,
    MomentaryOperatorCtrlRq,
    XValue(u8),
}
impl From<u8> for RghtBldeCtrlModeOperatorControl2364542462 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotInstalled,
            14 => Self::ErrorIndicator,
            3 => Self::AutomaticOperatorCtrlRq,
            2 => Self::ManualOperatorCtrlRq,
            0 => Self::NoChange,
            1 => Self::MomentaryOperatorCtrlRq,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LftDsredBladeOffsetOperatorCtrl2364542462 {
    NotInstalled,
    ErrorIndicator,
    X1101reserved,
    DecrementOperatorCtrlRq,
    NoOperatorCtrlRq,
    OprtrCtrlSttCnBRdInTwWysOnMthdU,
    XValue(u8),
}
impl From<u8> for LftDsredBladeOffsetOperatorCtrl2364542462 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotInstalled,
            14 => Self::ErrorIndicator,
            3 => Self::X1101reserved,
            2 => Self::DecrementOperatorCtrlRq,
            0 => Self::NoOperatorCtrlRq,
            1 => Self::OprtrCtrlSttCnBRdInTwWysOnMthdU,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LftBladeCtrlModeOperatorControl2364542462 {
    NotInstalled,
    ErrorIndicator,
    X1101reserved,
    AutomaticOperatorCtrlRq,
    ManualOperatorCtrlRq,
    NoChange,
    OprtrCtrlSttCnBRdInTwWysOnMthdU,
    XValue(u8),
}
impl From<u8> for LftBladeCtrlModeOperatorControl2364542462 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotInstalled,
            14 => Self::ErrorIndicator,
            12 => Self::X1101reserved,
            3 => Self::AutomaticOperatorCtrlRq,
            2 => Self::ManualOperatorCtrlRq,
            0 => Self::NoChange,
            1 => Self::OprtrCtrlSttCnBRdInTwWysOnMthdU,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum BladeAutoModeCmd2364542462 {
    NotSupported,
    ErrorIndicator,
    AutoNotAllowed,
    SrvcMdAtAllwdOnlyDrngSrvceModes,
    SspndAtTmprarilySuspendAutoMode,
    ActvtyAllwsAtMstDtctOprtrBfrAtA,
    AutoAllowed,
    XValue(u8),
}
impl From<u8> for BladeAutoModeCmd2364542462 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotSupported,
            14 => Self::ErrorIndicator,
            4 => Self::AutoNotAllowed,
            3 => Self::SrvcMdAtAllwdOnlyDrngSrvceModes,
            2 => Self::SspndAtTmprarilySuspendAutoMode,
            1 => Self::ActvtyAllwsAtMstDtctOprtrBfrAtA,
            0 => Self::AutoAllowed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum DesiredGradeOffsetSwitch2364542462 {
    NotInstalled,
    ErrorIndicator,
    DecrementButtonPressed,
    NoButtonPressed,
    SwtchSttCnBRdInTwWysOnMthdUssTh,
    XValue(u8),
}
impl From<u8> for DesiredGradeOffsetSwitch2364542462 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotInstalled,
            14 => Self::ErrorIndicator,
            2 => Self::DecrementButtonPressed,
            0 => Self::NoButtonPressed,
            1 => Self::SwtchSttCnBRdInTwWysOnMthdUssTh,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum BladeCtrlModeSwitch2364542462 {
    NotInstalled,
    ErrorIndicator,
    AutomaticButtonPressed,
    ManualButtonPressed,
    NoButtonPressed,
    SwtchSttCnBRdInTwWysOnMthdUssTh,
    XValue(u8),
}
impl From<u8> for BladeCtrlModeSwitch2364542462 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotInstalled,
            14 => Self::ErrorIndicator,
            3 => Self::AutomaticButtonPressed,
            2 => Self::ManualButtonPressed,
            0 => Self::NoButtonPressed,
            1 => Self::SwtchSttCnBRdInTwWysOnMthdUssTh,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FrontWheelDriveActuatorStatus2633883646 {
    NotAvailable,
    Error,
    FrontWheelDriveActuatorEngaged,
    FrntWhelDriveActuatorNotEngaged,
    XValue(u8),
}
impl From<u8> for FrontWheelDriveActuatorStatus2633883646 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::FrontWheelDriveActuatorEngaged,
            0 => Self::FrntWhelDriveActuatorNotEngaged,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FmSstandardRqsSupported2633880062 {
    DontCare,
    Reserved,
    OnRqModeIsSupported,
    OnRqModeIsNotSupported,
    XValue(u8),
}
impl From<u8> for FmSstandardRqsSupported2633880062 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DontCare,
            2 => Self::Reserved,
            1 => Self::OnRqModeIsSupported,
            0 => Self::OnRqModeIsNotSupported,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FmSstandardDiagnosticsSupported2633880062 {
    DontCare,
    Reserved,
    DiagnosticsIsSupported,
    DiagnosticsIsNotSupported,
    XValue(u8),
}
impl From<u8> for FmSstandardDiagnosticsSupported2633880062 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DontCare,
            2 => Self::Reserved,
            1 => Self::DiagnosticsIsSupported,
            0 => Self::DiagnosticsIsNotSupported,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LnDprtureIndicationEnableStatus2566806526 {
    NotUsed,
    Reserved,
    LaneDepartureIndicationEnabled,
    LaneDepartureIndicationDisabled,
    XValue(u8),
}
impl From<u8> for LnDprtureIndicationEnableStatus2566806526 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotUsed,
            2 => Self::Reserved,
            1 => Self::LaneDepartureIndicationEnabled,
            0 => Self::LaneDepartureIndicationDisabled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LaneTrackingStatusLeftSide2566806526 {
    DontCareTakeNoAction,
    Reserved,
    TrackingLeftSide,
    NotTrackingLeftSide,
    XValue(u8),
}
impl From<u8> for LaneTrackingStatusLeftSide2566806526 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DontCareTakeNoAction,
            2 => Self::Reserved,
            1 => Self::TrackingLeftSide,
            0 => Self::NotTrackingLeftSide,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LaneTrackingStatusRightSide2566806526 {
    DontCareTakeNoAction,
    Reserved,
    TrackingRightSide,
    NotTrackingRightSide,
    XValue(u8),
}
impl From<u8> for LaneTrackingStatusRightSide2566806526 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DontCareTakeNoAction,
            2 => Self::Reserved,
            1 => Self::TrackingRightSide,
            0 => Self::NotTrackingRightSide,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LaneDepartureImminentLeftSide2431649790 {
    NotUsed,
    Reserved,
    Imminent,
    NotImminent,
    XValue(u8),
}
impl From<u8> for LaneDepartureImminentLeftSide2431649790 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotUsed,
            2 => Self::Reserved,
            1 => Self::Imminent,
            0 => Self::NotImminent,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LaneDepartureImminentRightSide2431649790 {
    NotUsed,
    Reserved,
    Imminent,
    NotImminent,
    XValue(u8),
}
impl From<u8> for LaneDepartureImminentRightSide2431649790 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotUsed,
            2 => Self::Reserved,
            1 => Self::Imminent,
            0 => Self::NotImminent,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngFuelLeakage22633929214 {
    NotAvailable,
    Error,
    LeakageDetected,
    NoLeakageDetected,
    XValue(u8),
}
impl From<u8> for EngFuelLeakage22633929214 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::LeakageDetected,
            0 => Self::NoLeakageDetected,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngFuelLeakage12633929214 {
    NotAvailable,
    Error,
    LeakageDetected,
    NoLeakageDetected,
    XValue(u8),
}
impl From<u8> for EngFuelLeakage12633929214 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::LeakageDetected,
            0 => Self::NoLeakageDetected,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FanDriveState2566831614 {
    NotAvailable,
    Other,
    EngBrake,
    Timer,
    ACSystem,
    TransRetarder,
    ManualCtrl,
    NotDefined,
    DefaultOperation,
    ExcessiveHydOilTemp,
    ExcessiveTransOilTemp,
    ExcessiveEngCoolantTemp,
    ExcessiveEngOilTemp,
    ExcessiveEngAirTemp,
    EngSystemGeneral,
    FanOff,
    XValue(u8),
}
impl From<u8> for FanDriveState2566831614 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            14 => Self::Other,
            13 => Self::EngBrake,
            12 => Self::Timer,
            11 => Self::ACSystem,
            10 => Self::TransRetarder,
            9 => Self::ManualCtrl,
            8 => Self::NotDefined,
            7 => Self::DefaultOperation,
            6 => Self::ExcessiveHydOilTemp,
            5 => Self::ExcessiveTransOilTemp,
            4 => Self::ExcessiveEngCoolantTemp,
            3 => Self::ExcessiveEngOilTemp,
            2 => Self::ExcessiveEngAirTemp,
            1 => Self::EngSystemGeneral,
            0 => Self::FanOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngTorqueLimitFeature2566820094 {
    NotAvailable,
    X110reserved,
    CurrentTorqueRating,
    PreviousTorqueRating,
    FirstTorqueRating,
    HighestTorqueRating,
    Reserved,
    XValue(u8),
}
impl From<u8> for EngTorqueLimitFeature2566820094 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            5 => Self::X110reserved,
            4 => Self::CurrentTorqueRating,
            3 => Self::PreviousTorqueRating,
            2 => Self::FirstTorqueRating,
            1 => Self::HighestTorqueRating,
            0 => Self::Reserved,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TorqueLimitingFeatureStatus2566820094 {
    NotAvailable,
    Error,
    Enabled,
    Disabled,
    XValue(u8),
}
impl From<u8> for TorqueLimitingFeatureStatus2566820094 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Enabled,
            0 => Self::Disabled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransMode1Indicator2566802174 {
    NotAvailable,
    Error,
    TransMode1Active,
    TransMode1NotActive,
    XValue(u8),
}
impl From<u8> for TransMode1Indicator2566802174 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::TransMode1Active,
            0 => Self::TransMode1NotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransMode2Indicator2566802174 {
    NotAvailable,
    Error,
    TransMode2Active,
    TransMode2NotActive,
    XValue(u8),
}
impl From<u8> for TransMode2Indicator2566802174 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::TransMode2Active,
            0 => Self::TransMode2NotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransMode3Indicator2566802174 {
    NotAvailable,
    Error,
    TransMode3Active,
    TransMode3NotActive,
    XValue(u8),
}
impl From<u8> for TransMode3Indicator2566802174 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::TransMode3Active,
            0 => Self::TransMode3NotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransMode4Indicator2566802174 {
    NotAvailable,
    Error,
    TransMode4Active,
    TransMode4NotActive,
    XValue(u8),
}
impl From<u8> for TransMode4Indicator2566802174 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::TransMode4Active,
            0 => Self::TransMode4NotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransShiftInhibitIndicator2566802174 {
    TakeNoAction,
    Reserved,
    ActiveShiftIsInhibited,
    InactiveShiftIsNotInhibited,
    XValue(u8),
}
impl From<u8> for TransShiftInhibitIndicator2566802174 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::TakeNoAction,
            2 => Self::Reserved,
            1 => Self::ActiveShiftIsInhibited,
            0 => Self::InactiveShiftIsNotInhibited,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransEngCrankEnable2566802174 {
    NotAvailable,
    Error,
    CrnkngEnbldEngCrnkngIsAllwdByTr,
    CrnkngDsbldEngCrnkngIsPrhbtdByT,
    XValue(u8),
}
impl From<u8> for TransEngCrankEnable2566802174 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CrnkngEnbldEngCrnkngIsAllwdByTr,
            0 => Self::CrnkngDsbldEngCrnkngIsPrhbtdByT,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ActiveShiftConsoleIndicator2566802174 {
    NotAvailable,
    Reserved,
    SecondShiftConsoleIsActive,
    PrimaryShiftConsoleIsActive,
    XValue(u8),
}
impl From<u8> for ActiveShiftConsoleIndicator2566802174 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::SecondShiftConsoleIsActive,
            0 => Self::PrimaryShiftConsoleIsActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransReadyForBrakeRelease2566802174 {
    DontCare,
    Reserved,
    TransReadyForBrakeRelease,
    TransNotReadyForBrakeRelease,
    XValue(u8),
}
impl From<u8> for TransReadyForBrakeRelease2566802174 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DontCare,
            2 => Self::Reserved,
            1 => Self::TransReadyForBrakeRelease,
            0 => Self::TransNotReadyForBrakeRelease,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransRqedRangeDisplayFlashState2566802174 {
    TakeNoAction,
    Reserved,
    ActvTrnsRqdRngDsplyShldBFlshing,
    InctvTrnsRqdRngDsplyShldNtBFlsh,
    XValue(u8),
}
impl From<u8> for TransRqedRangeDisplayFlashState2566802174 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::TakeNoAction,
            2 => Self::Reserved,
            1 => Self::ActvTrnsRqdRngDsplyShldBFlshing,
            0 => Self::InctvTrnsRqdRngDsplyShldNtBFlsh,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransRqedRangeDisplayBlankState2566802174 {
    TakeNoAction,
    Reserved,
    ActvTrnsRqdRngDsplyShldBBlanked,
    InctvTrnsRqdRngDsplyShldNtBBlnk,
    XValue(u8),
}
impl From<u8> for TransRqedRangeDisplayBlankState2566802174 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::TakeNoAction,
            2 => Self::Reserved,
            1 => Self::ActvTrnsRqdRngDsplyShldBBlanked,
            0 => Self::InctvTrnsRqdRngDsplyShldNtBBlnk,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransForwardDirectionSwitch2633942014 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for TransForwardDirectionSwitch2633942014 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransNeutralSwitch2633942014 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for TransNeutralSwitch2633942014 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransReverseDirectionSwitch2633942014 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for TransReverseDirectionSwitch2633942014 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransLowRangeSenseSwitch2633942014 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for TransLowRangeSenseSwitch2633942014 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransHighRangeSenseSwitch2633942014 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for TransHighRangeSenseSwitch2633942014 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransInertiaBrakeActuator2633943038 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for TransInertiaBrakeActuator2633943038 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransDefuelActuator2633943038 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for TransDefuelActuator2633943038 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransLockupClutchActuator2633943038 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for TransLockupClutchActuator2633943038 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransClutchActuator2633943038 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for TransClutchActuator2633943038 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransSplitterIndirectActuator2633943038 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for TransSplitterIndirectActuator2633943038 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransSplitterDirectActuator2633943038 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for TransSplitterDirectActuator2633943038 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransRangeLowActuator2633943038 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for TransRangeLowActuator2633943038 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransRangeHighActuator2633943038 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for TransRangeHighActuator2633943038 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransShiftFingerGearActuator22633943038 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for TransShiftFingerGearActuator22633943038 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransShiftFingerRailActuator22633943038 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for TransShiftFingerRailActuator22633943038 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransShiftFingerGearActuator12633943038 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for TransShiftFingerGearActuator12633943038 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransShiftFingerRailActuator12633943038 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for TransShiftFingerRailActuator12633943038 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrnsShftFngrCenterRailIndicator2633943038 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for TrnsShftFngrCenterRailIndicator2633943038 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrnsShftFngrEngagementIndicator2633943038 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for TrnsShftFngrEngagementIndicator2633943038 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrnsShiftFingerNeutralIndicator2633943038 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for TrnsShiftFingerNeutralIndicator2633943038 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ProgressiveShiftDisable2364539646 {
    Reserved,
    TakeNoAction,
    ProgressiveShiftIsDisabled,
    ProgressiveShiftIsNotDisabled,
    XValue(u8),
}
impl From<u8> for ProgressiveShiftDisable2364539646 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            2 => Self::Reserved,
            3 => Self::TakeNoAction,
            1 => Self::ProgressiveShiftIsDisabled,
            0 => Self::ProgressiveShiftIsNotDisabled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngMomentaryOverspeedEnable2364539646 {
    Reserved,
    TakeNoAction,
    MomentaryEngOverspeedIsEnabled,
    MomentaryEngOverspeedIsDisabled,
    XValue(u8),
}
impl From<u8> for EngMomentaryOverspeedEnable2364539646 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            2 => Self::Reserved,
            3 => Self::TakeNoAction,
            1 => Self::MomentaryEngOverspeedIsEnabled,
            0 => Self::MomentaryEngOverspeedIsDisabled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransShiftInProcess2364539646 {
    NotAvailable,
    Error,
    ShiftInProcess,
    ShiftIsNotInProcess,
    XValue(u8),
}
impl From<u8> for TransShiftInProcess2364539646 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::ShiftInProcess,
            0 => Self::ShiftIsNotInProcess,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TorqueConverterLockupEngaged2364539646 {
    NotAvailable,
    Error,
    TorqueConverterLockupEngaged,
    TorqueConverterLockupDisengaged,
    XValue(u8),
}
impl From<u8> for TorqueConverterLockupEngaged2364539646 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::TorqueConverterLockupEngaged,
            0 => Self::TorqueConverterLockupDisengaged,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransDrivelineEngaged2364539646 {
    NotAvailable,
    Error,
    DrivelineEngaged,
    DrivelineDisengaged,
    XValue(u8),
}
impl From<u8> for TransDrivelineEngaged2364539646 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DrivelineEngaged,
            0 => Self::DrivelineDisengaged,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SterableLiftAxleLoweringInhibit2565868542 {
    NotAvailable,
    Reserved,
    LoweringInhibited,
    LoweringAllowed,
    XValue(u8),
}
impl From<u8> for SterableLiftAxleLoweringInhibit2565868542 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::LoweringInhibited,
            0 => Self::LoweringAllowed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TypeOfSteerTrans2565868542 {
    NotAvailable,
    X1110reservedForSaeAssignment,
    HybrdStrTrnsAStrngTrnsmssnInWhc,
    PrlyElctrcStrTrnsAStrngTrnsmssn,
    PrlyHydStrTrnsAStrngTrnsmssnInW,
    PrlyMchStrTrnsAStrngTrnsmssnInW,
    XValue(u8),
}
impl From<u8> for TypeOfSteerTrans2565868542 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            4 => Self::X1110reservedForSaeAssignment,
            3 => Self::HybrdStrTrnsAStrngTrnsmssnInWhc,
            2 => Self::PrlyElctrcStrTrnsAStrngTrnsmssn,
            1 => Self::PrlyHydStrTrnsAStrngTrnsmssnInW,
            0 => Self::PrlyMchStrTrnsAStrngTrnsmssnInW,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TypeOfSteerForces2565868542 {
    NotAvailable,
    X1110reservedForSaeAssignment,
    SlfTrckngStrEqpmntASystmDsgndTc,
    FllPwrStrEqpmntStrngFrcsArPrvdd,
    PwrAssstdStrEqpmntStrngFrcsRslt,
    MnlStrEqpmntStrngFrcsRsltSllyFr,
    XValue(u8),
}
impl From<u8> for TypeOfSteerForces2565868542 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            4 => Self::X1110reservedForSaeAssignment,
            3 => Self::SlfTrckngStrEqpmntASystmDsgndTc,
            2 => Self::FllPwrStrEqpmntStrngFrcsArPrvdd,
            1 => Self::PwrAssstdStrEqpmntStrngFrcsRslt,
            0 => Self::MnlStrEqpmntStrngFrcsRsltSllyFr,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SteerType2565868542 {
    NotAvailable,
    X1110reservedForAssignmentBySae,
    AxStrEqpmntASystmInWhchWhlsOnAx,
    MnStrSystmStrngEqpmntOfAVhclWhc,
    XValue(u8),
}
impl From<u8> for SteerType2565868542 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            2 => Self::X1110reservedForAssignmentBySae,
            1 => Self::AxStrEqpmntASystmInWhchWhlsOnAx,
            0 => Self::MnStrSystmStrngEqpmntOfAVhclWhc,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum StatusOfSteerAxle2565868542 {
    NotAvailable,
    X1110reservedForSaeAssignment,
    AxleSteerInSpecialMode,
    AxleNotActiveBecauseOfAnError,
    AxleCenteredBecauseOfAnError,
    AxleCentered,
    AxleSteerActive,
    AxleSteerNotActive,
    XValue(u8),
}
impl From<u8> for StatusOfSteerAxle2565868542 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            6 => Self::X1110reservedForSaeAssignment,
            5 => Self::AxleSteerInSpecialMode,
            4 => Self::AxleNotActiveBecauseOfAnError,
            3 => Self::AxleCenteredBecauseOfAnError,
            2 => Self::AxleCentered,
            1 => Self::AxleSteerActive,
            0 => Self::AxleSteerNotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransOutputRetarder2633941758 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for TransOutputRetarder2633941758 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngCoolantLoadIncrease2565865726 {
    NotAvailable,
    Error,
    CoolantLoadIncreasePossible,
    NoCoolantLoadIncrease,
    XValue(u8),
}
impl From<u8> for EngCoolantLoadIncrease2565865726 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CoolantLoadIncreasePossible,
            0 => Self::NoCoolantLoadIncrease,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RetarderEnableShiftAssistSwitch2565865726 {
    NotAvailable,
    Error,
    RetarderShiftAssistEnabled,
    RetarderShiftAssistDisabled,
    XValue(u8),
}
impl From<u8> for RetarderEnableShiftAssistSwitch2565865726 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::RetarderShiftAssistEnabled,
            0 => Self::RetarderShiftAssistDisabled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RetarderEnableBrakeAssistSwitch2565865726 {
    NotAvailable,
    Error,
    RetarderBrakeAssistEnabled,
    RetarderBrakeAssistDisabled,
    XValue(u8),
}
impl From<u8> for RetarderEnableBrakeAssistSwitch2565865726 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::RetarderBrakeAssistEnabled,
            0 => Self::RetarderBrakeAssistDisabled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngExhstGsOxygnSnsrClsdLpOprton2633935358 {
    DontCareTakeNoAction,
    Reserved,
    CmdToEnableFunction,
    CmdToDisableFunction,
    XValue(u8),
}
impl From<u8> for EngExhstGsOxygnSnsrClsdLpOprton2633935358 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DontCareTakeNoAction,
            2 => Self::Reserved,
            1 => Self::CmdToEnableFunction,
            0 => Self::CmdToDisableFunction,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck3GripXAxisDetentPosStatus2365447166 {
    NotAvailable,
    ErrorIndicator,
    InDetentPos,
    NotInDetentPos,
    XValue(u8),
}
impl From<u8> for Jystck3GripXAxisDetentPosStatus2365447166 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::InDetentPos,
            0 => Self::NotInDetentPos,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck3GripYAxisDetentPosStatus2365447166 {
    NotAvailable,
    ErrorIndicator,
    InDetentPos,
    NotInDetentPos,
    XValue(u8),
}
impl From<u8> for Jystck3GripYAxisDetentPosStatus2365447166 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::InDetentPos,
            0 => Self::NotInDetentPos,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck3ThetaAxisDetentPosStatus2365447166 {
    NotAvailable,
    ErrorIndicator,
    InDetentPos,
    NotInDetentPos,
    XValue(u8),
}
impl From<u8> for Jystck3ThetaAxisDetentPosStatus2365447166 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::InDetentPos,
            0 => Self::NotInDetentPos,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck3ThtAxsClckwsPstvPsStatus2365447166 {
    NotAvailable,
    ErrorIndicator,
    OnPositiveSideOfNeutral,
    NotOnPositiveSideOfNeutral,
    XValue(u8),
}
impl From<u8> for Jystck3ThtAxsClckwsPstvPsStatus2365447166 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::OnPositiveSideOfNeutral,
            0 => Self::NotOnPositiveSideOfNeutral,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck3ThtAxsCntrClckwsNgtvPsStt2365447166 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u8),
}
impl From<u8> for Jystck3ThtAxsCntrClckwsNgtvPsStt2365447166 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::OnNegativeSideOfNeutral,
            0 => Self::NotOnNegativeSideOfNeutral,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck3ThtaAxisNeutralPosStatus2365447166 {
    NotAvailable,
    ErrorIndicator,
    InNeutralPos,
    NotInNeutralPos,
    XValue(u8),
}
impl From<u8> for Jystck3ThtaAxisNeutralPosStatus2365447166 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::InNeutralPos,
            0 => Self::NotInNeutralPos,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck3GrpYAxsLvrFrwrdPstvPsStts2365447166 {
    NotAvailable,
    ErrorIndicator,
    OnPositiveSideOfNeutral,
    NotOnPositiveSideOfNeutral,
    XValue(u8),
}
impl From<u8> for Jystck3GrpYAxsLvrFrwrdPstvPsStts2365447166 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::OnPositiveSideOfNeutral,
            0 => Self::NotOnPositiveSideOfNeutral,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck3GrpYAxsLvrBckNgtvPsSttus2365447166 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u8),
}
impl From<u8> for Jystck3GrpYAxsLvrBckNgtvPsSttus2365447166 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::OnNegativeSideOfNeutral,
            0 => Self::NotOnNegativeSideOfNeutral,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck3GrpYAxisNeutralPosStatus2365447166 {
    NotAvailable,
    ErrorIndicator,
    InNeutralPos,
    NotInNeutralPos,
    XValue(u8),
}
impl From<u8> for Jystck3GrpYAxisNeutralPosStatus2365447166 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::InNeutralPos,
            0 => Self::NotInNeutralPos,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck3GrpXAxsLvrRghtPstvPsStts2365447166 {
    NotAvailable,
    ErrorIndicator,
    OnPositiveSideOfNeutral,
    NotOnPositiveSideOfNeutral,
    XValue(u8),
}
impl From<u8> for Jystck3GrpXAxsLvrRghtPstvPsStts2365447166 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::OnPositiveSideOfNeutral,
            0 => Self::NotOnPositiveSideOfNeutral,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck3GrpXAxsLvrLftNgtvPsSttus2365447166 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u8),
}
impl From<u8> for Jystck3GrpXAxsLvrLftNgtvPsSttus2365447166 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::OnNegativeSideOfNeutral,
            0 => Self::NotOnNegativeSideOfNeutral,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck3GrpXAxisNeutralPosStatus2365447166 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u8),
}
impl From<u8> for Jystck3GrpXAxisNeutralPosStatus2365447166 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::OnNegativeSideOfNeutral,
            0 => Self::NotOnNegativeSideOfNeutral,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck2GripXAxisDetentPosStatus2365446654 {
    NotAvailable,
    ErrorIndicator,
    InDetentPos,
    NotInDetentPos,
    XValue(u8),
}
impl From<u8> for Jystck2GripXAxisDetentPosStatus2365446654 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::InDetentPos,
            0 => Self::NotInDetentPos,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck2GripYAxisDetentPosStatus2365446654 {
    NotAvailable,
    ErrorIndicator,
    InDetentPos,
    NotInDetentPos,
    XValue(u8),
}
impl From<u8> for Jystck2GripYAxisDetentPosStatus2365446654 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::InDetentPos,
            0 => Self::NotInDetentPos,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck2ThetaAxisDetentPosStatus2365446654 {
    NotAvailable,
    ErrorIndicator,
    InDetentPos,
    NotInDetentPos,
    XValue(u8),
}
impl From<u8> for Jystck2ThetaAxisDetentPosStatus2365446654 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::InDetentPos,
            0 => Self::NotInDetentPos,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck2ThtAxsClckwsPstvPsStatus2365446654 {
    NotAvailable,
    ErrorIndicator,
    OnPositiveSideOfNeutral,
    NotOnPositiveSideOfNeutral,
    XValue(u8),
}
impl From<u8> for Jystck2ThtAxsClckwsPstvPsStatus2365446654 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::OnPositiveSideOfNeutral,
            0 => Self::NotOnPositiveSideOfNeutral,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck2ThtAxsCntrClckwsNgtvPsStt2365446654 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u8),
}
impl From<u8> for Jystck2ThtAxsCntrClckwsNgtvPsStt2365446654 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::OnNegativeSideOfNeutral,
            0 => Self::NotOnNegativeSideOfNeutral,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck2ThtaAxisNeutralPosStatus2365446654 {
    NotAvailable,
    ErrorIndicator,
    InNeutralPos,
    NotInNeutralPos,
    XValue(u8),
}
impl From<u8> for Jystck2ThtaAxisNeutralPosStatus2365446654 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::InNeutralPos,
            0 => Self::NotInNeutralPos,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck2GrpYAxsLvrFrwrdPstvPsStts2365446654 {
    NotAvailable,
    ErrorIndicator,
    OnPositiveSideOfNeutral,
    NotOnPositiveSideOfNeutral,
    XValue(u8),
}
impl From<u8> for Jystck2GrpYAxsLvrFrwrdPstvPsStts2365446654 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::OnPositiveSideOfNeutral,
            0 => Self::NotOnPositiveSideOfNeutral,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck2GrpYAxsLvrBckNgtvPsSttus2365446654 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u8),
}
impl From<u8> for Jystck2GrpYAxsLvrBckNgtvPsSttus2365446654 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::OnNegativeSideOfNeutral,
            0 => Self::NotOnNegativeSideOfNeutral,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck2GrpYAxisNeutralPosStatus2365446654 {
    NotAvailable,
    ErrorIndicator,
    InNeutralPos,
    NotInNeutralPos,
    XValue(u8),
}
impl From<u8> for Jystck2GrpYAxisNeutralPosStatus2365446654 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::InNeutralPos,
            0 => Self::NotInNeutralPos,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck2GrpXAxsLvrRghtPstvPsStts2365446654 {
    NotAvailable,
    ErrorIndicator,
    OnPositiveSideOfNeutral,
    NotOnPositiveSideOfNeutral,
    XValue(u8),
}
impl From<u8> for Jystck2GrpXAxsLvrRghtPstvPsStts2365446654 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::OnPositiveSideOfNeutral,
            0 => Self::NotOnPositiveSideOfNeutral,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck2GrpXAxsLvrLftNgtvPsSttus2365446654 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u8),
}
impl From<u8> for Jystck2GrpXAxsLvrLftNgtvPsSttus2365446654 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::OnNegativeSideOfNeutral,
            0 => Self::NotOnNegativeSideOfNeutral,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck2GrpXAxisNeutralPosStatus2365446654 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u8),
}
impl From<u8> for Jystck2GrpXAxisNeutralPosStatus2365446654 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::OnNegativeSideOfNeutral,
            0 => Self::NotOnNegativeSideOfNeutral,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck1GripXAxisDetentPosStatus2365446142 {
    NotAvailable,
    ErrorIndicator,
    InDetentPos,
    NotInDetentPos,
    XValue(u8),
}
impl From<u8> for Jystck1GripXAxisDetentPosStatus2365446142 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::InDetentPos,
            0 => Self::NotInDetentPos,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck1GripYAxisDetentPosStatus2365446142 {
    NotAvailable,
    ErrorIndicator,
    InDetentPos,
    NotInDetentPos,
    XValue(u8),
}
impl From<u8> for Jystck1GripYAxisDetentPosStatus2365446142 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::InDetentPos,
            0 => Self::NotInDetentPos,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck1ThetaAxisDetentPosStatus2365446142 {
    NotAvailable,
    ErrorIndicator,
    InDetentPos,
    NotInDetentPos,
    XValue(u8),
}
impl From<u8> for Jystck1ThetaAxisDetentPosStatus2365446142 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::InDetentPos,
            0 => Self::NotInDetentPos,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck1ThtAxsClckwsPstvPsStatus2365446142 {
    NotAvailable,
    ErrorIndicator,
    OnPositiveSideOfNeutral,
    NotOnPositiveSideOfNeutral,
    XValue(u8),
}
impl From<u8> for Jystck1ThtAxsClckwsPstvPsStatus2365446142 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::OnPositiveSideOfNeutral,
            0 => Self::NotOnPositiveSideOfNeutral,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck1ThtAxsCntrClckwsNgtvPsStt2365446142 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u8),
}
impl From<u8> for Jystck1ThtAxsCntrClckwsNgtvPsStt2365446142 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::OnNegativeSideOfNeutral,
            0 => Self::NotOnNegativeSideOfNeutral,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck1ThtaAxisNeutralPosStatus2365446142 {
    NotAvailable,
    ErrorIndicator,
    InNeutralPos,
    NotInNeutralPos,
    XValue(u8),
}
impl From<u8> for Jystck1ThtaAxisNeutralPosStatus2365446142 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::InNeutralPos,
            0 => Self::NotInNeutralPos,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck1GrpYAxsLvrFrwrdPstvPsStts2365446142 {
    NotAvailable,
    ErrorIndicator,
    OnPositiveSideOfNeutral,
    NotOnPositiveSideOfNeutral,
    XValue(u8),
}
impl From<u8> for Jystck1GrpYAxsLvrFrwrdPstvPsStts2365446142 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::OnPositiveSideOfNeutral,
            0 => Self::NotOnPositiveSideOfNeutral,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck1GrpYAxsLvrBckNgtvPsSttus2365446142 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u8),
}
impl From<u8> for Jystck1GrpYAxsLvrBckNgtvPsSttus2365446142 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::OnNegativeSideOfNeutral,
            0 => Self::NotOnNegativeSideOfNeutral,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck1GrpYAxisNeutralPosStatus2365446142 {
    NotAvailable,
    ErrorIndicator,
    InNeutralPos,
    NotInNeutralPos,
    XValue(u8),
}
impl From<u8> for Jystck1GrpYAxisNeutralPosStatus2365446142 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::InNeutralPos,
            0 => Self::NotInNeutralPos,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck1GrpXAxsLvrRghtPstvPsStts2365446142 {
    NotAvailable,
    ErrorIndicator,
    OnPositiveSideOfNeutral,
    NotOnPositiveSideOfNeutral,
    XValue(u8),
}
impl From<u8> for Jystck1GrpXAxsLvrRghtPstvPsStts2365446142 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::OnPositiveSideOfNeutral,
            0 => Self::NotOnPositiveSideOfNeutral,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck1GrpXAxsLvrLftNgtvPsSttus2365446142 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u8),
}
impl From<u8> for Jystck1GrpXAxsLvrLftNgtvPsSttus2365446142 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::OnNegativeSideOfNeutral,
            0 => Self::NotOnNegativeSideOfNeutral,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck1GrpXAxisNeutralPosStatus2365446142 {
    NotAvailable,
    ErrorIndicator,
    InNeutralPos,
    NotInNeutralPos,
    XValue(u8),
}
impl From<u8> for Jystck1GrpXAxisNeutralPosStatus2365446142 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::InNeutralPos,
            0 => Self::NotInNeutralPos,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngWasteOilReservoirLevel2566810366 {
    RepresentsCompletelyFull,
    XValue(f64),
}
impl From<f64> for EngWasteOilReservoirLevel2566810366 {
    #[allow(dead_code)]
    fn from(val: f64) -> Self {
        match val as u64 {
            4 => Self::RepresentsCompletelyFull,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngVentilationStatus2566810366 {
    NotAvailableNotInstalle,
    NtAblTDtrmnIfSufficientlyVented,
    ReservedForSaeAssignment,
    CurrentlyVenting,
    VentilationDelay,
    VentilationNeeded,
    SufficientlyVented,
    XValue(u8),
}
impl From<u8> for EngVentilationStatus2566810366 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailableNotInstalle,
            6 => Self::NtAblTDtrmnIfSufficientlyVented,
            5 => Self::ReservedForSaeAssignment,
            3 => Self::CurrentlyVenting,
            2 => Self::VentilationDelay,
            1 => Self::VentilationNeeded,
            0 => Self::SufficientlyVented,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngOilPrimingState2566810366 {
    NotAvailableNotInstalled,
    UnblTDtrmnIfSffcentlyLubricated,
    SufficientlyLubricated,
    NotSufficientlyLubricated,
    XValue(u8),
}
impl From<u8> for EngOilPrimingState2566810366 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailableNotInstalled,
            2 => Self::UnblTDtrmnIfSffcentlyLubricated,
            1 => Self::SufficientlyLubricated,
            0 => Self::NotSufficientlyLubricated,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngOilPrimingPumpSwitch2566810366 {
    NotAvailableNotInstalled,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for EngOilPrimingPumpSwitch2566810366 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailableNotInstalled,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngOilPreHeatedState2566810366 {
    NotAvailableNotInstalled,
    UnblTDtrmnIfEngOlIsPrhtdSffcntl,
    SufficientlyPreheated,
    NotSufficientlyPreheated,
    XValue(u8),
}
impl From<u8> for EngOilPreHeatedState2566810366 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailableNotInstalled,
            2 => Self::UnblTDtrmnIfEngOlIsPrhtdSffcntl,
            1 => Self::SufficientlyPreheated,
            0 => Self::NotSufficientlyPreheated,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngCoolantPreheatedState2566810366 {
    NotAvailableNotInstalled,
    UnblTDtrmnEngClntPrhtdSffcently,
    SufficientlyPreheated,
    NotSufficientlyPreheated,
    XValue(u8),
}
impl From<u8> for EngCoolantPreheatedState2566810366 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailableNotInstalled,
            2 => Self::UnblTDtrmnEngClntPrhtdSffcently,
            1 => Self::SufficientlyPreheated,
            0 => Self::NotSufficientlyPreheated,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TurningGearEngaged2633929726 {
    TurningGearIsEngaged,
    TurningGearIsNotEngaged,
    XValue(u8),
}
impl From<u8> for TurningGearEngaged2633929726 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::TurningGearIsEngaged,
            0 => Self::TurningGearIsNotEngaged,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SafetyWireStatus2633929726 {
    NotAvailable,
    Error,
    SafetyWireHasBeenActivated,
    SafetyWireHasNotBeenActivated,
    XValue(u8),
}
impl From<u8> for SafetyWireStatus2633929726 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::SafetyWireHasBeenActivated,
            0 => Self::SafetyWireHasNotBeenActivated,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngVrblGmtryTrbArCtrlShtffValve2566772222 {
    NotAvailable,
    Reserved,
    VgtAirCtrlShutoffValveIsOn,
    VgtAirCtrlShutoffValveIsOff,
    XValue(u8),
}
impl From<u8> for EngVrblGmtryTrbArCtrlShtffValve2566772222 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::VgtAirCtrlShutoffValveIsOn,
            0 => Self::VgtAirCtrlShutoffValveIsOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngRotationDirection2633940734 {
    NotAvailable,
    Reserved,
    ClockWise,
    CounterClockWise,
    XValue(u8),
}
impl From<u8> for EngRotationDirection2633940734 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::ClockWise,
            0 => Self::CounterClockWise,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum VhclAccelerationRateLimitStatus2364539902 {
    NotAvailable,
    Reserved,
    LimitActive,
    LimitNotActive,
    XValue(u8),
}
impl From<u8> for VhclAccelerationRateLimitStatus2364539902 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::LimitActive,
            0 => Self::LimitNotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AccelPedal2LowIdleSwitch2364539902 {
    NotAvailable,
    Error,
    AccelPedal2InLowIdleCondition,
    AcclPedal2NotInLowIdleCondition,
    XValue(u8),
}
impl From<u8> for AccelPedal2LowIdleSwitch2364539902 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::AccelPedal2InLowIdleCondition,
            0 => Self::AcclPedal2NotInLowIdleCondition,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RoadSpeedLimitStatus2364539902 {
    NotAvailable,
    Error,
    NotActive,
    Active,
    XValue(u8),
}
impl From<u8> for RoadSpeedLimitStatus2364539902 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::NotActive,
            0 => Self::Active,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AccelPedalKickdownSwitch2364539902 {
    NotAvailable,
    Error,
    KickdownActive,
    KickdownPassive,
    XValue(u8),
}
impl From<u8> for AccelPedalKickdownSwitch2364539902 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::KickdownActive,
            0 => Self::KickdownPassive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AccelPedal1LowIdleSwitch2364539902 {
    NotAvailable,
    Error,
    AccelPedal1InLowIdleCondition,
    AcclPedal1NotInLowIdleCondition,
    XValue(u8),
}
impl From<u8> for AccelPedal1LowIdleSwitch2364539902 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::AccelPedal1InLowIdleCondition,
            0 => Self::AcclPedal1NotInLowIdleCondition,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngStarterMode2364540158 {
    NotAvailable,
    Error,
    StarterInhibitedReasonUnknown,
    X1011reserved,
    StrtrInhbtdDueToStarterOvertemp,
    StrtrInhbtdDToActiveImmobilizer,
    StrtrInhbtdDtDrvlnEnggdOthrTrns,
    StrtrInhbtdDtEngNtReadyForStart,
    StrtrInhbtdDToEngAlreadyRunning,
    StrtFnshdStrtrNtActvAftrHvngBnA,
    StarterActiveGearEngaged,
    StarterActiveGearNotEngaged,
    StartNotRqed,
    XValue(u8),
}
impl From<u8> for EngStarterMode2364540158 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            14 => Self::Error,
            12 => Self::StarterInhibitedReasonUnknown,
            9 => Self::X1011reserved,
            8 => Self::StrtrInhbtdDueToStarterOvertemp,
            7 => Self::StrtrInhbtdDToActiveImmobilizer,
            6 => Self::StrtrInhbtdDtDrvlnEnggdOthrTrns,
            5 => Self::StrtrInhbtdDtEngNtReadyForStart,
            4 => Self::StrtrInhbtdDToEngAlreadyRunning,
            3 => Self::StrtFnshdStrtrNtActvAftrHvngBnA,
            2 => Self::StarterActiveGearEngaged,
            1 => Self::StarterActiveGearNotEngaged,
            0 => Self::StartNotRqed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngTorqueMode2364540158 {
    NotAvailable,
    RemoteAccelerator,
    BrakingSystem,
    HighSpeedGovernor,
    TorqueLimiting,
    AbsControl,
    TransmissionControl,
    AsrControl,
    RoadSpeedGovernor,
    PtoGovernor,
    CruiseControl,
    AcceleratorPedalOperatorSelec,
    LowIdleGovernorNoRequestDe,
    XValue(u8),
}
impl From<u8> for EngTorqueMode2364540158 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            11 => Self::RemoteAccelerator,
            10 => Self::BrakingSystem,
            9 => Self::HighSpeedGovernor,
            8 => Self::TorqueLimiting,
            7 => Self::AbsControl,
            6 => Self::TransmissionControl,
            5 => Self::AsrControl,
            4 => Self::RoadSpeedGovernor,
            3 => Self::PtoGovernor,
            2 => Self::CruiseControl,
            1 => Self::AcceleratorPedalOperatorSelec,
            0 => Self::LowIdleGovernorNoRequestDe,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SupportTsc1CtrlPurposeGroup4Of42566841342 {
    P25ReservedForAssignmentBySae,
    XValue(u8),
}
impl From<u8> for SupportTsc1CtrlPurposeGroup4Of42566841342 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::P25ReservedForAssignmentBySae,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SupportVariableRateTsc1Message2566841342 {
    MsTransRate,
    XValue(u8),
}
impl From<u8> for SupportVariableRateTsc1Message2566841342 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::MsTransRate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SupportTsc1CtrlPurposeGroup3Of42566841342 {
    P17ReservedForAssignmentBySae,
    XValue(u8),
}
impl From<u8> for SupportTsc1CtrlPurposeGroup3Of42566841342 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::P17ReservedForAssignmentBySae,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SupportTsc1CtrlPurposeGroup2Of42566841342 {
    P9ReservedForAssignmentBySae,
    XValue(u8),
}
impl From<u8> for SupportTsc1CtrlPurposeGroup2Of42566841342 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::P9ReservedForAssignmentBySae,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SupportTsc1CtrlPurposeGroup1Of42566841342 {
    P1AccelPedalOperatorSelection,
    XValue(u8),
}
impl From<u8> for SupportTsc1CtrlPurposeGroup1Of42566841342 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::P1AccelPedalOperatorSelection,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum BrakeTempWarning2566767870 {
    NotAvailable,
    Reserved,
    Active,
    NotActive,
    XValue(u8),
}
impl From<u8> for BrakeTempWarning2566767870 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::Active,
            0 => Self::NotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum XbrActiveCtrlMode2566767870 {
    NotAvailable,
    X1110reservedForSaeAssignment,
    MxMdOfXbrAcclrtnCtrlBngExecuted,
    AddtnMdOfXbrAcclrtnCtrlBngExctd,
    DrvrsBrkDmndBngExctdNExtlBrkDmn,
    NoBrakeDemandBeingExecuted,
    XValue(u8),
}
impl From<u8> for XbrActiveCtrlMode2566767870 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            4 => Self::X1110reservedForSaeAssignment,
            3 => Self::MxMdOfXbrAcclrtnCtrlBngExecuted,
            2 => Self::AddtnMdOfXbrAcclrtnCtrlBngExctd,
            1 => Self::DrvrsBrkDmndBngExctdNExtlBrkDmn,
            0 => Self::NoBrakeDemandBeingExecuted,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum XbrSystemState2566767870 {
    NotAvailable,
    NoExtlBrakeDemandWillBeAccepted,
    OnlyExtlBrkDmndOfHghstXbrPrrtyW,
    AnyExtlBrkeDemandWillBeAccepted,
    XValue(u8),
}
impl From<u8> for XbrSystemState2566767870 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::NoExtlBrakeDemandWillBeAccepted,
            1 => Self::OnlyExtlBrkDmndOfHghstXbrPrrtyW,
            0 => Self::AnyExtlBrkeDemandWillBeAccepted,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FoundationBrakeUse2566767870 {
    NotAvailable,
    Reserved,
    FoundationBrakesInUse,
    FoundationBrakesNotInUse,
    XValue(u8),
}
impl From<u8> for FoundationBrakeUse2566767870 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::FoundationBrakesInUse,
            0 => Self::FoundationBrakesNotInUse,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum HillHolderMode2566767870 {
    NotAvailable,
    Reserved,
    X101notDefined,
    ActvBtWllChngTInctvInAShortTime,
    Active,
    Inactive,
    XValue(u8),
}
impl From<u8> for HillHolderMode2566767870 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            6 => Self::Reserved,
            3 => Self::X101notDefined,
            2 => Self::ActvBtWllChngTInctvInAShortTime,
            1 => Self::Active,
            0 => Self::Inactive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum HaltBrakeMode2566767870 {
    NotAvailable,
    Reserved,
    X101notDefined,
    ActiveButNotFunctioningProperly,
    Active,
    Inactive,
    XValue(u8),
}
impl From<u8> for HaltBrakeMode2566767870 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            6 => Self::Reserved,
            3 => Self::X101notDefined,
            2 => Self::ActiveButNotFunctioningProperly,
            1 => Self::Active,
            0 => Self::Inactive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrctrMntdTrilerAbsWarningSignal2565865982 {
    TakeNoAction,
    Reserved,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for TrctrMntdTrilerAbsWarningSignal2565865982 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::TakeNoAction,
            2 => Self::Reserved,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerAbsStatus2565865982 {
    TrlrAbsSttsInfrmtnNtAvlblPrmtrN,
    Reserved,
    TrailerAbsActive,
    TrlrAbsSttsInfrmtnAvlblBtNtActv,
    XValue(u8),
}
impl From<u8> for TrailerAbsStatus2565865982 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::TrlrAbsSttsInfrmtnNtAvlblPrmtrN,
            2 => Self::Reserved,
            1 => Self::TrailerAbsActive,
            0 => Self::TrlrAbsSttsInfrmtnAvlblBtNtActv,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum HaltBrakeSwitch2565865982 {
    NotAvailable,
    Error,
    HaltBrakeSwitchActive,
    HaltBrakeSwitchPassive,
    XValue(u8),
}
impl From<u8> for HaltBrakeSwitch2565865982 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::HaltBrakeSwitchActive,
            0 => Self::HaltBrakeSwitchPassive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AtcAsrInformationSignal2565865982 {
    TakeNoAction,
    Reserved,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for AtcAsrInformationSignal2565865982 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::TakeNoAction,
            2 => Self::Reserved,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AbsEbsAmberWarningSignal2565865982 {
    TakeNoAction,
    Reserved,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for AbsEbsAmberWarningSignal2565865982 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::TakeNoAction,
            2 => Self::Reserved,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EbsRedWarningSignal2565865982 {
    TakeNoAction,
    Reserved,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for EbsRedWarningSignal2565865982 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::TakeNoAction,
            2 => Self::Reserved,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AbsFullyOperational2565865982 {
    NotAvailable,
    Reserved,
    FullyOperational,
    NotFullyOperational,
    XValue(u8),
}
impl From<u8> for AbsFullyOperational2565865982 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::FullyOperational,
            0 => Self::NotFullyOperational,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RemoteAccelEnableSwitch2565865982 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for RemoteAccelEnableSwitch2565865982 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngAuxEngShutdownSwitch2565865982 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for EngAuxEngShutdownSwitch2565865982 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngDerateSwitch2565865982 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for EngDerateSwitch2565865982 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AccelInterlockSwitch2565865982 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for AccelInterlockSwitch2565865982 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TractionCtrlOverrideSwitch2565865982 {
    NotAvailableNotInstalled,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for TractionCtrlOverrideSwitch2565865982 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailableNotInstalled,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AsrHillHolderSwitch2565865982 {
    NotAvailable,
    Error,
    AsrHillHolderSwitchActive,
    AsrHillHolderSwitchPassive,
    XValue(u8),
}
impl From<u8> for AsrHillHolderSwitch2565865982 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::AsrHillHolderSwitchActive,
            0 => Self::AsrHillHolderSwitchPassive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AsrOffroadSwitch2565865982 {
    Error,
    AsrOffroadSwitchActive,
    AsrOffroadSwitchPassive,
    NotAvailable,
    XValue(u8),
}
impl From<u8> for AsrOffroadSwitch2565865982 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            2 => Self::Error,
            1 => Self::AsrOffroadSwitchActive,
            0 => Self::AsrOffroadSwitchPassive,
            3 => Self::NotAvailable,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AbsOffroadSwitch2565865982 {
    NotAvailable,
    Error,
    AbsOffroadSwitchActive,
    AbsOffroadSwitchPassive,
    XValue(u8),
}
impl From<u8> for AbsOffroadSwitch2565865982 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::AbsOffroadSwitchActive,
            0 => Self::AbsOffroadSwitchPassive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EbsBrakeSwitch2565865982 {
    NotAvailable,
    Error,
    BrakePedalIsBeingPressed,
    BrakePedalIsNotBeingPressed,
    XValue(u8),
}
impl From<u8> for EbsBrakeSwitch2565865982 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::BrakePedalIsBeingPressed,
            0 => Self::BrakePedalIsNotBeingPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AntiLockBrakingActive2565865982 {
    NotAvailable,
    Reserved,
    AbsActive,
    AbsPassiveButInstalled,
    XValue(u8),
}
impl From<u8> for AntiLockBrakingActive2565865982 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::AbsActive,
            0 => Self::AbsPassiveButInstalled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AsrBrakeCtrlActive2565865982 {
    NotAvailable,
    Reserved,
    AsrBrakeCtrlActive,
    AsrBrakeCtrlPassiveButInstalled,
    XValue(u8),
}
impl From<u8> for AsrBrakeCtrlActive2565865982 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::AsrBrakeCtrlActive,
            0 => Self::AsrBrakeCtrlPassiveButInstalled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AsrEngCtrlActive2565865982 {
    NotAvailable,
    Reserved,
    AsrEngCtrlActive,
    AsrEngCtrlPassiveButInstalled,
    XValue(u8),
}
impl From<u8> for AsrEngCtrlActive2565865982 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::AsrEngCtrlActive,
            0 => Self::AsrEngCtrlPassiveButInstalled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RearAxleGroupEngagementStatus2565867262 {
    NotAvailable,
    Error,
    RearAxleGroupEngaged,
    RearAxleGroupDisengaged,
    XValue(u8),
}
impl From<u8> for RearAxleGroupEngagementStatus2565867262 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::RearAxleGroupEngaged,
            0 => Self::RearAxleGroupDisengaged,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FrontAxleGroupEngagementStatus2565867262 {
    NotAvailable,
    Error,
    FrontAxleGroupEngaged,
    FrontAxleGroupDisengaged,
    XValue(u8),
}
impl From<u8> for FrontAxleGroupEngagementStatus2565867262 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::FrontAxleGroupEngaged,
            0 => Self::FrontAxleGroupDisengaged,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum DiffLockStateCentralRear2565867262 {
    NotAvailable,
    Error,
    DiffLockEngaged,
    DiffLockDisengaged,
    XValue(u8),
}
impl From<u8> for DiffLockStateCentralRear2565867262 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DiffLockEngaged,
            0 => Self::DiffLockDisengaged,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum DiffLockStateCentralFront2565867262 {
    NotAvailable,
    Error,
    DiffLockEngaged,
    DiffLockDisengaged,
    XValue(u8),
}
impl From<u8> for DiffLockStateCentralFront2565867262 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DiffLockEngaged,
            0 => Self::DiffLockDisengaged,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum DiffLockStateCentral2565867262 {
    NotAvailable,
    Error,
    DiffLockEngaged,
    DiffLockDisengaged,
    XValue(u8),
}
impl From<u8> for DiffLockStateCentral2565867262 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DiffLockEngaged,
            0 => Self::DiffLockDisengaged,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum DiffLockStateRearAxle22565867262 {
    NotAvailable,
    Error,
    DiffLockEngaged,
    DiffLockDisengaged,
    XValue(u8),
}
impl From<u8> for DiffLockStateRearAxle22565867262 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DiffLockEngaged,
            0 => Self::DiffLockDisengaged,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum DiffLockStateRearAxle12565867262 {
    NotAvailable,
    Error,
    DiffLockEngaged,
    DiffLockDisengaged,
    XValue(u8),
}
impl From<u8> for DiffLockStateRearAxle12565867262 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DiffLockEngaged,
            0 => Self::DiffLockDisengaged,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum DiffLockStateFrontAxle22565867262 {
    NotAvailable,
    Error,
    DiffLockEngaged,
    DiffLockDisengaged,
    XValue(u8),
}
impl From<u8> for DiffLockStateFrontAxle22565867262 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DiffLockEngaged,
            0 => Self::DiffLockDisengaged,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum DiffLockStateFrontAxle12565867262 {
    NotAvailable,
    Error,
    DiffLockEngaged,
    DiffLockDisengaged,
    XValue(u8),
}
impl From<u8> for DiffLockStateFrontAxle12565867262 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DiffLockEngaged,
            0 => Self::DiffLockDisengaged,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngStartEnableDevice2Config2566768382 {
    NotAvailable,
    X1110reserved,
    ElectricInletAirHeaterInstalled,
    EtherInjectionInstalled,
    FuelledStartInstalled,
    GlowPlugsInstalled,
    NoStartEnableDevice2Installed,
    XValue(u8),
}
impl From<u8> for EngStartEnableDevice2Config2566768382 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            5 => Self::X1110reserved,
            4 => Self::ElectricInletAirHeaterInstalled,
            3 => Self::EtherInjectionInstalled,
            2 => Self::FuelledStartInstalled,
            1 => Self::GlowPlugsInstalled,
            0 => Self::NoStartEnableDevice2Installed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngStartEnableDevice1Config2566768382 {
    NotAvailable,
    X1110reserved,
    ElectricInletAirHeaterInstalled,
    EtherInjectionInstalled,
    FuelledStartInstalled,
    GlowPlugsInstalled,
    NoStartEnableDevice1Installed,
    XValue(u8),
}
impl From<u8> for EngStartEnableDevice1Config2566768382 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            5 => Self::X1110reserved,
            4 => Self::ElectricInletAirHeaterInstalled,
            3 => Self::EtherInjectionInstalled,
            2 => Self::FuelledStartInstalled,
            1 => Self::GlowPlugsInstalled,
            0 => Self::NoStartEnableDevice1Installed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngStartEnableDevice22566768382 {
    Reserved,
    StartEnableOn,
    StartEnableOff,
    XValue(u8),
}
impl From<u8> for EngStartEnableDevice22566768382 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            2 => Self::Reserved,
            1 => Self::StartEnableOn,
            0 => Self::StartEnableOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngStartEnableDevice12566768382 {
    NotAvailible,
    Reserved,
    StartEnableOn,
    StartEnableOff,
    XValue(u8),
}
impl From<u8> for EngStartEnableDevice12566768382 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailible,
            2 => Self::Reserved,
            1 => Self::StartEnableOn,
            0 => Self::StartEnableOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransOilLevelRq2566771966 {
    DontCareTakeNoAction,
    Reserved,
    TransOilLevelReadingDesired,
    NoTransOilLevelReadingDesired,
    XValue(u8),
}
impl From<u8> for TransOilLevelRq2566771966 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DontCareTakeNoAction,
            2 => Self::Reserved,
            1 => Self::TransOilLevelReadingDesired,
            0 => Self::NoTransOilLevelReadingDesired,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FifthWheelReleaseCtrl2566771966 {
    NotAvailable,
    Error,
    CplrUnlckdTrlrCnBUnhtchdHitched,
    CouplerLocked,
    XValue(u8),
}
impl From<u8> for FifthWheelReleaseCtrl2566771966 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CplrUnlckdTrlrCnBUnhtchdHitched,
            0 => Self::CouplerLocked,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FfthWhlRlaseCtrlSecurityLockout2566771966 {
    NotAvailable,
    Error,
    FifthWheelReleaseEnabled,
    FifthWheelReleaseDisabled,
    XValue(u8),
}
impl From<u8> for FfthWhlRlaseCtrlSecurityLockout2566771966 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::FifthWheelReleaseEnabled,
            0 => Self::FifthWheelReleaseDisabled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransferCaseSelectorSwitch2566771966 {
    ErrorIndicator,
    X101reservedForSaeAssignment,
    Neutral,
    Wheel,
    XValue(u8),
}
impl From<u8> for TransferCaseSelectorSwitch2566771966 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            6 => Self::ErrorIndicator,
            3 => Self::X101reservedForSaeAssignment,
            2 => Self::Neutral,
            1 => Self::Wheel,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RqCabZoneHeating2564882174 {
    DontCareTakeNoAction,
    Reserved,
    HeatCabZone,
    DoNotCabEngZone,
    XValue(u8),
}
impl From<u8> for RqCabZoneHeating2564882174 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DontCareTakeNoAction,
            2 => Self::Reserved,
            1 => Self::HeatCabZone,
            0 => Self::DoNotCabEngZone,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RqEngZoneHeating2564882174 {
    DontCareTakeNoAction,
    Reserved,
    HeatEngZone,
    DoNotHeatEngZone,
    XValue(u8),
}
impl From<u8> for RqEngZoneHeating2564882174 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DontCareTakeNoAction,
            2 => Self::Reserved,
            1 => Self::HeatEngZone,
            0 => Self::DoNotHeatEngZone,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxHeaterModeRq2564882174 {
    DontCareTakeNoAction,
    Reserved,
    X1101notDefined,
    NormalMode,
    EconomyMode,
    OffDtadrPrErpnRgltnsFrTrnsprtOf,
    DeactivateAuxHeater,
    XValue(u8),
}
impl From<u8> for AuxHeaterModeRq2564882174 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::DontCareTakeNoAction,
            14 => Self::Reserved,
            4 => Self::X1101notDefined,
            3 => Self::NormalMode,
            2 => Self::EconomyMode,
            1 => Self::OffDtadrPrErpnRgltnsFrTrnsprtOf,
            0 => Self::DeactivateAuxHeater,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SeatBeltSwitch2564882174 {
    NotAvailable,
    ErrrSwtchStteCannotBeDetermined,
    OkSeatBeltIsBuckled,
    NotBuckled,
    XValue(u8),
}
impl From<u8> for SeatBeltSwitch2564882174 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrrSwtchStteCannotBeDetermined,
            1 => Self::OkSeatBeltIsBuckled,
            0 => Self::NotBuckled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum OperatorSeatDirectionSwitch2564882174 {
    NotAvailable,
    Error,
    OperatorSeatIsFacingForward,
    OperatorSeatNotFacingForward,
    XValue(u8),
}
impl From<u8> for OperatorSeatDirectionSwitch2564882174 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::OperatorSeatIsFacingForward,
            0 => Self::OperatorSeatNotFacingForward,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum BatteryMainSwitchHoldRq2564882174 {
    DontCareTakeNoAction,
    Undefined,
    HoldBatteryMainSwitch,
    ReleaseBatteryMainSwitch,
    XValue(u8),
}
impl From<u8> for BatteryMainSwitchHoldRq2564882174 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DontCareTakeNoAction,
            2 => Self::Undefined,
            1 => Self::HoldBatteryMainSwitch,
            0 => Self::ReleaseBatteryMainSwitch,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxHeaterCoolantPumpRq2564882174 {
    DontCareTakeNoAction,
    Reserved,
    ActivateWaterPump,
    DeactivateWaterPump,
    XValue(u8),
}
impl From<u8> for AuxHeaterCoolantPumpRq2564882174 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DontCareTakeNoAction,
            2 => Self::Reserved,
            1 => Self::ActivateWaterPump,
            0 => Self::DeactivateWaterPump,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ParkBrakeReleaseInhibitRq2566844926 {
    Unavailable,
    SaeReserved,
    ParkBrakeReleaseInhibitRqed,
    ParkBrakeReleaseInhibitNotRqed,
    XValue(u8),
}
impl From<u8> for ParkBrakeReleaseInhibitRq2566844926 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::Unavailable,
            2 => Self::SaeReserved,
            1 => Self::ParkBrakeReleaseInhibitRqed,
            0 => Self::ParkBrakeReleaseInhibitNotRqed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngShutdownOverrideSwitch2566844926 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for EngShutdownOverrideSwitch2566844926 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngTestModeSwitch2566844926 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for EngTestModeSwitch2566844926 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngIdleDecrementSwitch2566844926 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for EngIdleDecrementSwitch2566844926 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngIdleIncrementSwitch2566844926 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for EngIdleIncrementSwitch2566844926 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum CruiseCtrlAccelerateSwitch2566844926 {
    NotAvailable,
    Error,
    CrsCtrlActivatorInPosAccelerate,
    CrsCtrlActvtrNotInPosAccelerate,
    XValue(u8),
}
impl From<u8> for CruiseCtrlAccelerateSwitch2566844926 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CrsCtrlActivatorInPosAccelerate,
            0 => Self::CrsCtrlActvtrNotInPosAccelerate,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum CruiseCtrlResumeSwitch2566844926 {
    NotAvailable,
    Error,
    CruiseCtrlActivatorInPosResume,
    CrseCtrlActivatorNotInPosResume,
    XValue(u8),
}
impl From<u8> for CruiseCtrlResumeSwitch2566844926 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CruiseCtrlActivatorInPosResume,
            0 => Self::CrseCtrlActivatorNotInPosResume,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum CruiseCtrlCoastSwitch2566844926 {
    NotAvailable,
    Error,
    CruiseCtrlActivatorInPosCoast,
    CriseCtrlActivatorNotInPosCoast,
    XValue(u8),
}
impl From<u8> for CruiseCtrlCoastSwitch2566844926 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CruiseCtrlActivatorInPosCoast,
            0 => Self::CriseCtrlActivatorNotInPosCoast,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum CruiseCtrlSetSwitch2566844926 {
    NotAvailable,
    Error,
    CruiseCtrlActivatorInPosSet,
    CruiseCtrlActivatorNotInPosSet,
    XValue(u8),
}
impl From<u8> for CruiseCtrlSetSwitch2566844926 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CruiseCtrlActivatorInPosSet,
            0 => Self::CruiseCtrlActivatorNotInPosSet,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ClutchSwitch2566844926 {
    NotAvailable,
    Error,
    ClutchPedalDepressed,
    ClutchPedalReleased,
    XValue(u8),
}
impl From<u8> for ClutchSwitch2566844926 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::ClutchPedalDepressed,
            0 => Self::ClutchPedalReleased,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum BrakeSwitch2566844926 {
    NotAvailable,
    Error,
    BrakePedalDepressed,
    BrakePedalReleased,
    XValue(u8),
}
impl From<u8> for BrakeSwitch2566844926 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::BrakePedalDepressed,
            0 => Self::BrakePedalReleased,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum CruiseCtrlEnableSwitch2566844926 {
    NotAvailable,
    Error,
    CruiseCtrlEnabled,
    CruiseCtrlDisabled,
    XValue(u8),
}
impl From<u8> for CruiseCtrlEnableSwitch2566844926 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CruiseCtrlEnabled,
            0 => Self::CruiseCtrlDisabled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum CruiseCtrlActive2566844926 {
    NotAvailable,
    Error,
    CruiseCtrlSwitchedOn,
    CruiseCtrlSwitchedOff,
    XValue(u8),
}
impl From<u8> for CruiseCtrlActive2566844926 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::CruiseCtrlSwitchedOn,
            0 => Self::CruiseCtrlSwitchedOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum CruiseCtrlPauseSwitch2566844926 {
    TakeNoAction,
    ErrorIndicator,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for CruiseCtrlPauseSwitch2566844926 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::TakeNoAction,
            2 => Self::ErrorIndicator,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ParkingBrakeSwitch2566844926 {
    NotAvailable,
    Error,
    ParkingBrakeSet,
    ParkingBrakeNotSet,
    XValue(u8),
}
impl From<u8> for ParkingBrakeSwitch2566844926 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::ParkingBrakeSet,
            0 => Self::ParkingBrakeNotSet,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TwoSpeedAxleSwitch2566844926 {
    NotAvailable,
    Error,
    HighSpeedRange,
    LowSpeedRange,
    XValue(u8),
}
impl From<u8> for TwoSpeedAxleSwitch2566844926 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::HighSpeedRange,
            0 => Self::LowSpeedRange,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum BatteryMainSwitchHoldState2566809342 {
    DontCareTakeNoAction,
    Reserved,
    BatteryMainSwitchHeld,
    BatteryMainSwitchNotHeld,
    XValue(u8),
}
impl From<u8> for BatteryMainSwitchHoldState2566809342 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DontCareTakeNoAction,
            2 => Self::Reserved,
            1 => Self::BatteryMainSwitchHeld,
            0 => Self::BatteryMainSwitchNotHeld,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick3XAxisDetentPosStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    InDetentPos,
    NotInDetentPos,
    XValue(u8),
}
impl From<u8> for Joystick3XAxisDetentPosStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::InDetentPos,
            0 => Self::NotInDetentPos,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick3Button9PressedStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick3Button9PressedStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick3Button10PressedStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick3Button10PressedStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick3Button11PressedStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick3Button11PressedStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick3Button12PressedStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick3Button12PressedStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick3YAxisDetentPosStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    InDetentPos,
    NotInDetentPos,
    XValue(u8),
}
impl From<u8> for Joystick3YAxisDetentPosStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::InDetentPos,
            0 => Self::NotInDetentPos,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck3YAxsLvrFrwrdPstvPsStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    OnPositiveSideOfNeutral,
    NotOnPositiveSideOfNeutral,
    XValue(u8),
}
impl From<u8> for Jystck3YAxsLvrFrwrdPstvPsStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::OnPositiveSideOfNeutral,
            0 => Self::NotOnPositiveSideOfNeutral,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck3YAxsLvrBckNgtvePosStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u8),
}
impl From<u8> for Jystck3YAxsLvrBckNgtvePosStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::OnNegativeSideOfNeutral,
            0 => Self::NotOnNegativeSideOfNeutral,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick3YAxisNeutralPosStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    InNeutralPos,
    NotInNeutralPos,
    XValue(u8),
}
impl From<u8> for Joystick3YAxisNeutralPosStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::InNeutralPos,
            0 => Self::NotInNeutralPos,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck3XAxsLvrRghtPstvPosStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    OnPositiveSideOfNeutral,
    NotOnPositiveSideOfNeutral,
    XValue(u8),
}
impl From<u8> for Jystck3XAxsLvrRghtPstvPosStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::OnPositiveSideOfNeutral,
            0 => Self::NotOnPositiveSideOfNeutral,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck3XAxsLvrLftNgtvePosStatus2365446910 {
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    NotAvailable,
    XValue(u8),
}
impl From<u8> for Jystck3XAxsLvrLftNgtvePosStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            2 => Self::ErrorIndicator,
            1 => Self::OnNegativeSideOfNeutral,
            0 => Self::NotOnNegativeSideOfNeutral,
            3 => Self::NotAvailable,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick3XAxisNeutralPosStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    InNeutralPos,
    NotInNeutralPos,
    XValue(u8),
}
impl From<u8> for Joystick3XAxisNeutralPosStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::InNeutralPos,
            0 => Self::NotInNeutralPos,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick3Button5PressedStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick3Button5PressedStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick3Button6PressedStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick3Button6PressedStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick3Button7PressedStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick3Button7PressedStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick3Button8PressedStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick3Button8PressedStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick3Button1PressedStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick3Button1PressedStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick3Button2PressedStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick3Button2PressedStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick3Button3PressedStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick3Button3PressedStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick3Button4PressedStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick3Button4PressedStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick2XAxisDetentPosStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    InDetentPos,
    NotInDetentPos,
    XValue(u8),
}
impl From<u8> for Joystick2XAxisDetentPosStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::InDetentPos,
            0 => Self::NotInDetentPos,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick2YAxisDetentPosStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    InDetentPos,
    NotInDetentPos,
    XValue(u8),
}
impl From<u8> for Joystick2YAxisDetentPosStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::InDetentPos,
            0 => Self::NotInDetentPos,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck2YAxsLvrFrwrdPstvPsStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    OnPositiveSideOfNeutral,
    NotOnPositiveSideOfNeutral,
    XValue(u8),
}
impl From<u8> for Jystck2YAxsLvrFrwrdPstvPsStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::OnPositiveSideOfNeutral,
            0 => Self::NotOnPositiveSideOfNeutral,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck2YAxsLvrBckNgtvePosStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u8),
}
impl From<u8> for Jystck2YAxsLvrBckNgtvePosStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::OnNegativeSideOfNeutral,
            0 => Self::NotOnNegativeSideOfNeutral,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick2YAxisNeutralPosStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    InNeutralPos,
    NotInNeutralPos,
    XValue(u8),
}
impl From<u8> for Joystick2YAxisNeutralPosStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::InNeutralPos,
            0 => Self::NotInNeutralPos,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck2XAxsLvrRghtPstvPosStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    OnPositiveSideOfNeutral,
    NotOnPositiveSideOfNeutral,
    XValue(u8),
}
impl From<u8> for Jystck2XAxsLvrRghtPstvPosStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::OnPositiveSideOfNeutral,
            0 => Self::NotOnPositiveSideOfNeutral,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck2XAxsLvrLftNgtvePosStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u8),
}
impl From<u8> for Jystck2XAxsLvrLftNgtvePosStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::OnNegativeSideOfNeutral,
            0 => Self::NotOnNegativeSideOfNeutral,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick2XAxisNeutralPosStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    InNeutralPos,
    NotInNeutralPos,
    XValue(u8),
}
impl From<u8> for Joystick2XAxisNeutralPosStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::InNeutralPos,
            0 => Self::NotInNeutralPos,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick2Button9PressedStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick2Button9PressedStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick2Button10PressedStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick2Button10PressedStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick2Button11PressedStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick2Button11PressedStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick2Button12PressedStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick2Button12PressedStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick2Button5PressedStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick2Button5PressedStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick2Button6PressedStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick2Button6PressedStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick2Button7PressedStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick2Button7PressedStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick2Button8PressedStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick2Button8PressedStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick2Button1PressedStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick2Button1PressedStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick2Button2PressedStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick2Button2PressedStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick2Button3PressedStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick2Button3PressedStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick2Button4PressedStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick2Button4PressedStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick1XAxisDetentPosStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    InDetentPos,
    NotInDetentPos,
    XValue(u8),
}
impl From<u8> for Joystick1XAxisDetentPosStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::InDetentPos,
            0 => Self::NotInDetentPos,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick1YAxisDetentPosStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    InDetentPos,
    NotInDetentPos,
    XValue(u8),
}
impl From<u8> for Joystick1YAxisDetentPosStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::InDetentPos,
            0 => Self::NotInDetentPos,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck1YAxsLvrFrwrdPstvPsStatus2365445886 {
    OnPositiveSideOfNeutral,
    NotOnPositiveSideOfNeutral,
    NotAvailable,
    ErrorIndicator,
    XValue(u8),
}
impl From<u8> for Jystck1YAxsLvrFrwrdPstvPsStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::OnPositiveSideOfNeutral,
            0 => Self::NotOnPositiveSideOfNeutral,
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck1YAxsLvrBckNgtvePosStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u8),
}
impl From<u8> for Jystck1YAxsLvrBckNgtvePosStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::OnNegativeSideOfNeutral,
            0 => Self::NotOnNegativeSideOfNeutral,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick1YAxisNeutralPosStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    InNeutralPos,
    NotInNeutralPos,
    XValue(u8),
}
impl From<u8> for Joystick1YAxisNeutralPosStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::InNeutralPos,
            0 => Self::NotInNeutralPos,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick1Button9PressedStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick1Button9PressedStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick1Button10PressedStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick1Button10PressedStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick1Button11PressedStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick1Button11PressedStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick1Button12PressedStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick1Button12PressedStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick1Button5PressedStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick1Button5PressedStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick1Button6PressedStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick1Button6PressedStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick1Button7PressedStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick1Button7PressedStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick1Button8PressedStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick1Button8PressedStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick1Button1PressedStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick1Button1PressedStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick1Button2PressedStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick1Button2PressedStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick1Button3PressedStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick1Button3PressedStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick1Button4PressedStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u8),
}
impl From<u8> for Joystick1Button4PressedStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::ButtonPressed,
            0 => Self::ButtonNotPressed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck1XAxsLvrRghtPstvPosStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    OnPositiveSideOfNeutral,
    NotOnPositiveSideOfNeutral,
    XValue(u8),
}
impl From<u8> for Jystck1XAxsLvrRghtPstvPosStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::OnPositiveSideOfNeutral,
            0 => Self::NotOnPositiveSideOfNeutral,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Jystck1XAxsLvrLftNgtvePosStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u8),
}
impl From<u8> for Jystck1XAxsLvrLftNgtvePosStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::OnNegativeSideOfNeutral,
            0 => Self::NotOnNegativeSideOfNeutral,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Joystick1XAxisNeutralPosStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    InNeutralPos,
    NotInNeutralPos,
    XValue(u8),
}
impl From<u8> for Joystick1XAxisNeutralPosStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::InNeutralPos,
            0 => Self::NotInNeutralPos,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ParkingBrakeRedWarningSignal2566847230 {
    TakeNoAction,
    Reserved,
    On,
    Off,
    XValue(u8),
}
impl From<u8> for ParkingBrakeRedWarningSignal2566847230 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::TakeNoAction,
            2 => Self::Reserved,
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ParkBrakeReleaseInhibitStatus2566847230 {
    Unavailable,
    Error,
    ParkBrakeReleaseIsInhibited,
    ParkBrakeReleaseIsNotInhibited,
    XValue(u8),
}
impl From<u8> for ParkBrakeReleaseInhibitStatus2566847230 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::Unavailable,
            2 => Self::Error,
            1 => Self::ParkBrakeReleaseIsInhibited,
            0 => Self::ParkBrakeReleaseIsNotInhibited,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ParkingBrakeActuator2566847230 {
    NotAvailable,
    Error,
    ParkingBrakeActuatorActive,
    ParkingBrakeActuatorInactive,
    XValue(u8),
}
impl From<u8> for ParkingBrakeActuator2566847230 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::ParkingBrakeActuatorActive,
            0 => Self::ParkingBrakeActuatorInactive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AntitheftComponentStatusStates2631728894 {
    NotDefined,
    BlckdThsSttIndctsThtALckUnlckCm,
    Locked,
    UnlckdThsSttIndctsThtCmpnntCnBs,
    XValue(u8),
}
impl From<u8> for AntitheftComponentStatusStates2631728894 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotDefined,
            2 => Self::BlckdThsSttIndctsThtALckUnlckCm,
            1 => Self::Locked,
            0 => Self::UnlckdThsSttIndctsThtCmpnntCnBs,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AntthftEncryptnSdPrsntIndicator2631728894 {
    NotAvailable,
    Error,
    RandomNumberIsPresent,
    RandomNumberIsNotPresent,
    XValue(u8),
}
impl From<u8> for AntthftEncryptnSdPrsntIndicator2631728894 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::RandomNumberIsPresent,
            0 => Self::RandomNumberIsNotPresent,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AntitheftModifyPwdStates2631728894 {
    Notvalid,
    EmptyOfPwdsThsSttIndctsThtCmpnn,
    FullofPwds,
    OkThsSttIndctsThtRqWsSccssfllyP,
    XValue(u8),
}
impl From<u8> for AntitheftModifyPwdStates2631728894 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::Notvalid,
            2 => Self::EmptyOfPwdsThsSttIndctsThtCmpnn,
            1 => Self::FullofPwds,
            0 => Self::OkThsSttIndctsThtRqWsSccssfllyP,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AntitheftPwdValidIndicator2631728894 {
    NotAvailable,
    Error,
    PwdIsAValidatedPassword,
    PwdIsNotAValidatedPassword,
    XValue(u8),
}
impl From<u8> for AntitheftPwdValidIndicator2631728894 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::PwdIsAValidatedPassword,
            0 => Self::PwdIsNotAValidatedPassword,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AntitheftCmdStates2631794430 {
    X111notDefined,
    Login,
    ChckSttsThsSttRprsntsARqTChckTs,
    LockorUnlock,
    ChngPwdThsSttRprsntsARqTCmpnntT,
    DeletePwd,
    AddPwdThsSttRprsntsARqTCmpnntTa,
    XValue(u8),
}
impl From<u8> for AntitheftCmdStates2631794430 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            6 => Self::X111notDefined,
            5 => Self::Login,
            4 => Self::ChckSttsThsSttRprsntsARqTChckTs,
            3 => Self::LockorUnlock,
            2 => Self::ChngPwdThsSttRprsntsARqTCmpnntT,
            1 => Self::DeletePwd,
            0 => Self::AddPwdThsSttRprsntsARqTCmpnntTa,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AntitheftDesiredExitModeStates2631794430 {
    NotAvailable,
    NotDefined,
    LockWhenKeyOff,
    LckUpnOprtrRqThsSttIsUsdTIndctT,
    XValue(u8),
}
impl From<u8> for AntitheftDesiredExitModeStates2631794430 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::NotDefined,
            1 => Self::LockWhenKeyOff,
            0 => Self::LckUpnOprtrRqThsSttIsUsdTIndctT,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AntthftEncryptonIndicatorStates2631794430 {
    NotAvailable,
    NotDefined,
    EncryptedCodePresent,
    EncryptnSdRqThsSttRprsntsARqstT,
    XValue(u8),
}
impl From<u8> for AntthftEncryptonIndicatorStates2631794430 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::NotDefined,
            1 => Self::EncryptedCodePresent,
            0 => Self::EncryptnSdRqThsSttRprsntsARqstT,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ElctrncShckAbsrbrCtrlMdLftTgAxl2365478910 {
    NotAvailable,
    Error,
    NormalOperationDampersActive,
    NormalOperationDampersPassive,
    XValue(u8),
}
impl From<u8> for ElctrncShckAbsrbrCtrlMdLftTgAxl2365478910 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::NormalOperationDampersActive,
            0 => Self::NormalOperationDampersPassive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ElctrncShckAbsrbrCtrlMdRearAxle2365478910 {
    NotAvailable,
    Error,
    NormalOperationDampersActive,
    NormalOperationDampersPassive,
    XValue(u8),
}
impl From<u8> for ElctrncShckAbsrbrCtrlMdRearAxle2365478910 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::NormalOperationDampersActive,
            0 => Self::NormalOperationDampersPassive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ElctrncShckAbsrbrCtrlMdFrntAxle2365478910 {
    NotAvailable,
    Error,
    NormalOperationDampersActive,
    NormalOperationDampersPassive,
    XValue(u8),
}
impl From<u8> for ElctrncShckAbsrbrCtrlMdFrntAxle2365478910 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::NormalOperationDampersActive,
            0 => Self::NormalOperationDampersPassive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ProhibitAirSuspensionCtrl2362638078 {
    NotAvailable,
    ErrorIndicator,
    RqProhibitAirSuspensionCtrl,
    NoRq,
    XValue(u8),
}
impl From<u8> for ProhibitAirSuspensionCtrl2362638078 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::RqProhibitAirSuspensionCtrl,
            0 => Self::NoRq,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum KneelingCmdRearAxle2362638078 {
    DontCareTakeNoAction,
    Reserved,
    ActivateKneeling,
    DeactivateKneeling,
    XValue(u8),
}
impl From<u8> for KneelingCmdRearAxle2362638078 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DontCareTakeNoAction,
            2 => Self::Reserved,
            1 => Self::ActivateKneeling,
            0 => Self::DeactivateKneeling,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum KneelingCmdFrontAxle2362638078 {
    DontCareTakeNoAction,
    Reserved,
    ActivateKneeling,
    DeactivateKneeling,
    XValue(u8),
}
impl From<u8> for KneelingCmdFrontAxle2362638078 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DontCareTakeNoAction,
            2 => Self::Reserved,
            1 => Self::ActivateKneeling,
            0 => Self::DeactivateKneeling,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LevelCtrlModeRq2362638078 {
    DontCareTakeNoAction,
    Reserved,
    X1101notDefined,
    ExhaustBellows,
    TractionHelpLoadReduce,
    OptmmTrctn2IPrssAtThDrvnAxlIsCt,
    OptmmTrctn1IPrssAtThDrvnAxlIsCt,
    PrssRt2IRtBtwnThPrssrsAtThDrvnA,
    PrssRt1IRtBtwnThPrssrsAtThDrvnA,
    LdFxngIDrvnAxlnIsLddTaVlDfndByT,
    TrctnHlpIDrvnAxlIsLddTaMxVlGvnB,
    NrmlOprtnISystmPrfrmsAPrCtrlOfT,
    XValue(u8),
}
impl From<u8> for LevelCtrlModeRq2362638078 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::DontCareTakeNoAction,
            14 => Self::Reserved,
            9 => Self::X1101notDefined,
            8 => Self::ExhaustBellows,
            7 => Self::TractionHelpLoadReduce,
            6 => Self::OptmmTrctn2IPrssAtThDrvnAxlIsCt,
            5 => Self::OptmmTrctn1IPrssAtThDrvnAxlIsCt,
            4 => Self::PrssRt2IRtBtwnThPrssrsAtThDrvnA,
            3 => Self::PrssRt1IRtBtwnThPrssrsAtThDrvnA,
            2 => Self::LdFxngIDrvnAxlnIsLddTaVlDfndByT,
            1 => Self::TrctnHlpIDrvnAxlIsLddTaMxVlGvnB,
            0 => Self::NrmlOprtnISystmPrfrmsAPrCtrlOfT,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum NominalLevelRqRearAxle2362638078 {
    DontCareTakeNoAction,
    Reserved,
    X1101notDefined,
    StopLevelChange,
    LowerLevel,
    UpperLevel,
    CustomerLevel,
    PresetLevel,
    NormalLevel3,
    NormalLevel2,
    NormalLevel1,
    NoLevelRq,
    XValue(u8),
}
impl From<u8> for NominalLevelRqRearAxle2362638078 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::DontCareTakeNoAction,
            14 => Self::Reserved,
            9 => Self::X1101notDefined,
            8 => Self::StopLevelChange,
            7 => Self::LowerLevel,
            6 => Self::UpperLevel,
            5 => Self::CustomerLevel,
            4 => Self::PresetLevel,
            3 => Self::NormalLevel3,
            2 => Self::NormalLevel2,
            1 => Self::NormalLevel1,
            0 => Self::NoLevelRq,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum NominalLevelRqFrontAxle2362638078 {
    DontCareTakeNoAction,
    Reserved,
    X1101notDefined,
    StopLevelChange,
    LowerLevel,
    UpperLevel,
    CustomerLevel,
    PresetLevel,
    NormalLevel3,
    NormalLevel2,
    NormalLevel1,
    NoLevelRq,
    XValue(u8),
}
impl From<u8> for NominalLevelRqFrontAxle2362638078 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::DontCareTakeNoAction,
            14 => Self::Reserved,
            9 => Self::X1101notDefined,
            8 => Self::StopLevelChange,
            7 => Self::LowerLevel,
            6 => Self::UpperLevel,
            5 => Self::CustomerLevel,
            4 => Self::PresetLevel,
            3 => Self::NormalLevel3,
            2 => Self::NormalLevel2,
            1 => Self::NormalLevel1,
            0 => Self::NoLevelRq,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum KneelingCtrlModeRq2362638078 {
    DontCareTakeNoAction,
    Reserved,
    ManuallyActuated,
    AutomaticallyActuated,
    XValue(u8),
}
impl From<u8> for KneelingCtrlModeRq2362638078 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DontCareTakeNoAction,
            2 => Self::Reserved,
            1 => Self::ManuallyActuated,
            0 => Self::AutomaticallyActuated,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum KneelingRqRightSide2362638078 {
    DontCareTakeNoAction,
    Reserved,
    KneelingRq,
    NoKneelingRq,
    XValue(u8),
}
impl From<u8> for KneelingRqRightSide2362638078 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DontCareTakeNoAction,
            2 => Self::Reserved,
            1 => Self::KneelingRq,
            0 => Self::NoKneelingRq,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum KneelingRqLeftSide2362638078 {
    DontCareTakeNoAction,
    Reserved,
    KneelingRq,
    NoKneelingRq,
    XValue(u8),
}
impl From<u8> for KneelingRqLeftSide2362638078 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DontCareTakeNoAction,
            2 => Self::Reserved,
            1 => Self::KneelingRq,
            0 => Self::NoKneelingRq,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AutomaticTractionHelp2362638078 {
    DontCare,
    Reserved,
    EnableAutomaticTractionHelp,
    DisableAutomaticTractionHelp,
    XValue(u8),
}
impl From<u8> for AutomaticTractionHelp2362638078 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DontCare,
            2 => Self::Reserved,
            1 => Self::EnableAutomaticTractionHelp,
            0 => Self::DisableAutomaticTractionHelp,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LiftAxle2PosCmd2362638078 {
    DontCareTakeNoAction,
    Reserved,
    LiftAxlePosUpTagAxleUnladen,
    LiftAxlePosDownTagAxleLaden,
    XValue(u8),
}
impl From<u8> for LiftAxle2PosCmd2362638078 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DontCareTakeNoAction,
            2 => Self::Reserved,
            1 => Self::LiftAxlePosUpTagAxleUnladen,
            0 => Self::LiftAxlePosDownTagAxleLaden,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LiftAxle1PosCmd2362638078 {
    DontCareTakeNoAction,
    Reserved,
    LiftAxlePosUpTagAxleUnladen,
    LiftAxlePosDownTagAxleLaden,
    XValue(u8),
}
impl From<u8> for LiftAxle1PosCmd2362638078 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DontCareTakeNoAction,
            2 => Self::Reserved,
            1 => Self::LiftAxlePosUpTagAxleUnladen,
            0 => Self::LiftAxlePosDownTagAxleLaden,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SspensionCtrlRefusalInformation2365479678 {
    X1101notDefined,
    NotAvailable,
    Error,
    GnrlRjctInSpcifiedReasonApplies,
    BelowSpeedLimit,
    AboveSpeedLimit,
    BogieDiffNotLocked,
    WouldExceedAxleLoadLimit,
    AxleLoadLimitReached,
    ActualRqNotRefused,
    XValue(u8),
}
impl From<u8> for SspensionCtrlRefusalInformation2365479678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::X1101notDefined,
            15 => Self::NotAvailable,
            14 => Self::Error,
            6 => Self::GnrlRjctInSpcifiedReasonApplies,
            5 => Self::BelowSpeedLimit,
            4 => Self::AboveSpeedLimit,
            3 => Self::BogieDiffNotLocked,
            2 => Self::WouldExceedAxleLoadLimit,
            1 => Self::AxleLoadLimitReached,
            0 => Self::ActualRqNotRefused,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SuspensionRemoteCtrl22365479678 {
    NotAvailable,
    Error,
    Active,
    NotActive,
    XValue(u8),
}
impl From<u8> for SuspensionRemoteCtrl22365479678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Active,
            0 => Self::NotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SuspensionRemoteCtrl12365479678 {
    NotAvailable,
    Error,
    Active,
    NotActive,
    XValue(u8),
}
impl From<u8> for SuspensionRemoteCtrl12365479678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Active,
            0 => Self::NotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RearAxleInBumperRange2365479678 {
    NotAvailable,
    Error,
    ActualLevelWithinBumperRange,
    ActualLevelOutOfBumperRange,
    XValue(u8),
}
impl From<u8> for RearAxleInBumperRange2365479678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::ActualLevelWithinBumperRange,
            0 => Self::ActualLevelOutOfBumperRange,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FrontAxleInBumperRange2365479678 {
    NotAvailable,
    Error,
    ActualLevelWithinBumperRange,
    ActualLevelOutOfBumperRange,
    XValue(u8),
}
impl From<u8> for FrontAxleInBumperRange2365479678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::ActualLevelWithinBumperRange,
            0 => Self::ActualLevelOutOfBumperRange,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum DoorRelease2365479678 {
    NotAvailable,
    Error,
    DoorsMayBeOpened,
    DoorsMayNotBeOpened,
    XValue(u8),
}
impl From<u8> for DoorRelease2365479678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::DoorsMayBeOpened,
            0 => Self::DoorsMayNotBeOpened,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum VehicleMotionInhibit2365479678 {
    NotAvailable,
    Error,
    VehicleMotionIsInhibited,
    VehicleMayBeMoved,
    XValue(u8),
}
impl From<u8> for VehicleMotionInhibit2365479678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::VehicleMotionIsInhibited,
            0 => Self::VehicleMayBeMoved,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SecurityDevice2365479678 {
    NotAvailable,
    Error,
    Active,
    NotActive,
    XValue(u8),
}
impl From<u8> for SecurityDevice2365479678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Active,
            0 => Self::NotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LevelCtrlMode2365479678 {
    X1101notDefined,
    NotAvailable,
    Error,
    AirSuspensionCtrlProhibited,
    ExhstngBllwFnctnIBllwsArExhstdT,
    TractionHelpLoadReduce,
    OptmmTrctn2IPrssAtThDrvnAxlIsCt,
    OptmmTrctn1IPrssAtThDrvnAxlIsCt,
    PrssRt2IRtBtwnThPrssrsAtThDrvnA,
    PrssRt1IRtBtwnThPrssrsAtThDrvnA,
    LdFxngIDrvnAxlnIsLddTaVlDfndByT,
    TrctnHlpIDrvnAxlIsLddTaMxVlGvnB,
    NrmlOprtnISystmPrfrmsAPrCtrlOfT,
    XValue(u8),
}
impl From<u8> for LevelCtrlMode2365479678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            10 => Self::X1101notDefined,
            15 => Self::NotAvailable,
            14 => Self::Error,
            9 => Self::AirSuspensionCtrlProhibited,
            8 => Self::ExhstngBllwFnctnIBllwsArExhstdT,
            7 => Self::TractionHelpLoadReduce,
            6 => Self::OptmmTrctn2IPrssAtThDrvnAxlIsCt,
            5 => Self::OptmmTrctn1IPrssAtThDrvnAxlIsCt,
            4 => Self::PrssRt2IRtBtwnThPrssrsAtThDrvnA,
            3 => Self::PrssRt1IRtBtwnThPrssrsAtThDrvnA,
            2 => Self::LdFxngIDrvnAxlnIsLddTaVlDfndByT,
            1 => Self::TrctnHlpIDrvnAxlIsLddTaMxVlGvnB,
            0 => Self::NrmlOprtnISystmPrfrmsAPrCtrlOfT,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum KneelingInformation2365479678 {
    NotAvailable,
    Error,
    X1101notDefined,
    KneelingAborted,
    LiftingActive,
    KneelingLevelReached,
    NotActive,
    XValue(u8),
}
impl From<u8> for KneelingInformation2365479678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            14 => Self::Error,
            5 => Self::X1101notDefined,
            4 => Self::KneelingAborted,
            3 => Self::LiftingActive,
            2 => Self::KneelingLevelReached,
            0 => Self::NotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LiftingCtrlModeRearAxle2365479678 {
    NotAvailable,
    Error,
    LiftingActive,
    LiftingNotActive,
    XValue(u8),
}
impl From<u8> for LiftingCtrlModeRearAxle2365479678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::LiftingActive,
            0 => Self::LiftingNotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LiftingCtrlModeFrontAxle2365479678 {
    NotAvailable,
    Error,
    LiftingActive,
    LiftingNotActive,
    XValue(u8),
}
impl From<u8> for LiftingCtrlModeFrontAxle2365479678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::LiftingActive,
            0 => Self::LiftingNotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LoweringCtrlModeRearAxle2365479678 {
    NotAvailable,
    Error,
    LoweringActive,
    LoweringNotActive,
    XValue(u8),
}
impl From<u8> for LoweringCtrlModeRearAxle2365479678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::LoweringActive,
            0 => Self::LoweringNotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LoweringCtrlModeFrontAxle2365479678 {
    NotAvailable,
    Error,
    LoweringActive,
    LoweringNotActive,
    XValue(u8),
}
impl From<u8> for LoweringCtrlModeFrontAxle2365479678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::LoweringActive,
            0 => Self::LoweringNotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AboveNominalLevelRearAxle2365479678 {
    NotAvailable,
    Error,
    Above,
    NotAbove,
    XValue(u8),
}
impl From<u8> for AboveNominalLevelRearAxle2365479678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Above,
            0 => Self::NotAbove,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AboveNominalLevelFrontAxle2365479678 {
    NotAvailable,
    Error,
    Above,
    NotAbove,
    XValue(u8),
}
impl From<u8> for AboveNominalLevelFrontAxle2365479678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Above,
            0 => Self::NotAbove,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum BelowNominalLevelRearAxle2365479678 {
    NotAvailable,
    Error,
    Below,
    NotBelow,
    XValue(u8),
}
impl From<u8> for BelowNominalLevelRearAxle2365479678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Below,
            0 => Self::NotBelow,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum BelowNominalLevelFrontAxle2365479678 {
    NotAvailable,
    Error,
    Below,
    NotBelow,
    XValue(u8),
}
impl From<u8> for BelowNominalLevelFrontAxle2365479678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Below,
            0 => Self::NotBelow,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum NominalLevelRearAxle2365479678 {
    NotAvailable,
    Error,
    X1101notDefined,
    LowerLevel,
    UpperLevel,
    CustomerLevel,
    PresetLevel,
    NormalLevel3,
    NormalLevel2,
    NormalLevel1,
    LevelNotSpecified,
    XValue(u8),
}
impl From<u8> for NominalLevelRearAxle2365479678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            14 => Self::Error,
            8 => Self::X1101notDefined,
            7 => Self::LowerLevel,
            6 => Self::UpperLevel,
            5 => Self::CustomerLevel,
            4 => Self::PresetLevel,
            3 => Self::NormalLevel3,
            2 => Self::NormalLevel2,
            1 => Self::NormalLevel1,
            0 => Self::LevelNotSpecified,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum NominalLevelFrontAxle2365479678 {
    NotAvailable,
    Error,
    X1101notDefined,
    LowerLevel,
    UpperLevel,
    CustomerLevel,
    PresetLevel,
    NormalLevel3,
    NormalLevel2,
    NormalLevel1,
    LevelNotSpecified,
    XValue(u8),
}
impl From<u8> for NominalLevelFrontAxle2365479678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            14 => Self::Error,
            8 => Self::X1101notDefined,
            7 => Self::LowerLevel,
            6 => Self::UpperLevel,
            5 => Self::CustomerLevel,
            4 => Self::PresetLevel,
            3 => Self::NormalLevel3,
            2 => Self::NormalLevel2,
            1 => Self::NormalLevel1,
            0 => Self::LevelNotSpecified,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LiftAxle2Pos2365479678 {
    NotAvailable,
    Error,
    LiftAxlePosUpTagAxleUnladen,
    LiftAxlePosDownTagAxleLaden,
    XValue(u8),
}
impl From<u8> for LiftAxle2Pos2365479678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::LiftAxlePosUpTagAxleUnladen,
            0 => Self::LiftAxlePosDownTagAxleLaden,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LiftAxle1Pos2365479678 {
    NotAvailable,
    Error,
    LiftAxlePosUpTagAxleUnladen,
    LiftAxlePosDownTagAxleLaden,
    XValue(u8),
}
impl From<u8> for LiftAxle1Pos2365479678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::LiftAxlePosUpTagAxleUnladen,
            0 => Self::LiftAxlePosDownTagAxleLaden,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Alt4Status2566837758 {
    NotAvailable,
    Error,
    Alt4Charging,
    Alt4NotCharging,
    XValue(u8),
}
impl From<u8> for Alt4Status2566837758 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Alt4Charging,
            0 => Self::Alt4NotCharging,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Alt3Status2566837758 {
    NotAvailable,
    Error,
    Alt3Charging,
    Alt3NotCharging,
    XValue(u8),
}
impl From<u8> for Alt3Status2566837758 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Alt3Charging,
            0 => Self::Alt3NotCharging,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Alt2Status2566837758 {
    NotAvailable,
    Error,
    Alt2Charging,
    Alt2NotCharging,
    XValue(u8),
}
impl From<u8> for Alt2Status2566837758 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Alt2Charging,
            0 => Self::Alt2NotCharging,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Alt1Status2566837758 {
    NotAvailable,
    Error,
    Alt1Charging,
    Alt1NotCharging,
    XValue(u8),
}
impl From<u8> for Alt1Status2566837758 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Alt1Charging,
            0 => Self::Alt1NotCharging,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum IndustryGroup2633895166 {
    ReserveForSae,
    IndustrialProcessCtrlStationary,
    Marine,
    Construction,
    AgriculturalAndForestry,
    OnHighway,
    Global,
    XValue(u8),
}
impl From<u8> for IndustryGroup2633895166 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::ReserveForSae,
            5 => Self::IndustrialProcessCtrlStationary,
            4 => Self::Marine,
            3 => Self::Construction,
            2 => Self::AgriculturalAndForestry,
            1 => Self::OnHighway,
            0 => Self::Global,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier52566836222 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier52566836222 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier42566836222 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier42566836222 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FlashRedStopLamp2566836222 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u8),
}
impl From<u8> for FlashRedStopLamp2566836222 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::UnavailableDoNotFlash,
            2 => Self::Reserved,
            1 => Self::FastFlash,
            0 => Self::SlowFlash,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FlashProtectLamp2566836222 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u8),
}
impl From<u8> for FlashProtectLamp2566836222 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::UnavailableDoNotFlash,
            2 => Self::Reserved,
            1 => Self::FastFlash,
            0 => Self::SlowFlash,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FlashMalfuncIndicatorLamp2566836222 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u8),
}
impl From<u8> for FlashMalfuncIndicatorLamp2566836222 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::UnavailableDoNotFlash,
            2 => Self::Reserved,
            1 => Self::FastFlash,
            0 => Self::SlowFlash,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FlashAmberWarningLamp2566836222 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u8),
}
impl From<u8> for FlashAmberWarningLamp2566836222 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::UnavailableDoNotFlash,
            2 => Self::Reserved,
            1 => Self::FastFlash,
            0 => Self::SlowFlash,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier32566836222 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier32566836222 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier22566836222 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier22566836222 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier12566836222 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier12566836222 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum MalfunctionIndicatorLampStatus2566836222 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u8),
}
impl From<u8> for MalfunctionIndicatorLampStatus2566836222 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::LampOn,
            0 => Self::LampOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RedStopLampState2566836222 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u8),
}
impl From<u8> for RedStopLampState2566836222 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::LampOn,
            0 => Self::LampOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AmberWarningLampStatus2566836222 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u8),
}
impl From<u8> for AmberWarningLampStatus2566836222 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::LampOn,
            0 => Self::LampOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ProtectLampStatus2566836222 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u8),
}
impl From<u8> for ProtectLampStatus2566836222 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::LampOn,
            0 => Self::LampOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum MisfireMonitoringSupport2566835966 {
    NotAvailable,
    Reserved,
    TestSupported,
    TestNotSupported,
    XValue(bool),
}
impl From<bool> for MisfireMonitoringSupport2566835966 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::TestSupported,
            0 => Self::TestNotSupported,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ObdCompliance2566835966 {
    NotIntendedToMeetObdIiRequ,
    ObdI,
    ObdAndObdIi,
    ObdFederalEpa,
    ObdIiCaliforniaArb,
    ReserverForAssignmentBySae,
    XValue(u8),
}
impl From<u8> for ObdCompliance2566835966 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            5 => Self::NotIntendedToMeetObdIiRequ,
            4 => Self::ObdI,
            3 => Self::ObdAndObdIi,
            2 => Self::ObdFederalEpa,
            1 => Self::ObdIiCaliforniaArb,
            0 => Self::ReserverForAssignmentBySae,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SecondAirSystemMonStatus2566835966 {
    TestNotComplete,
    TestComplete,
    XValue(bool),
}
impl From<bool> for SecondAirSystemMonStatus2566835966 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::TestNotComplete,
            0 => Self::TestComplete,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EvaporativeSystemMonStatus2566835966 {
    TestNotComplete,
    TestComplete,
    XValue(bool),
}
impl From<bool> for EvaporativeSystemMonStatus2566835966 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::TestNotComplete,
            0 => Self::TestComplete,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AcSystemRefrigerantMonStatus2566835966 {
    TestNotComplete,
    TestComplete,
    XValue(bool),
}
impl From<bool> for AcSystemRefrigerantMonStatus2566835966 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::TestNotComplete,
            0 => Self::TestComplete,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum OxygenSensorHeaterMonStatus2566835966 {
    TestNotComplete,
    TestComplete,
    XValue(bool),
}
impl From<bool> for OxygenSensorHeaterMonStatus2566835966 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::TestNotComplete,
            0 => Self::TestComplete,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum OxygenSensorMonStatus2566835966 {
    TestNotComplete,
    TestComplete,
    XValue(bool),
}
impl From<bool> for OxygenSensorMonStatus2566835966 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::TestNotComplete,
            0 => Self::TestComplete,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EgrSystemMonitoringStatus2566835966 {
    TestNotComplete,
    TestComplete,
    XValue(bool),
}
impl From<bool> for EgrSystemMonitoringStatus2566835966 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::TestNotComplete,
            0 => Self::TestComplete,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum CatalystMonStatus2566835966 {
    TestComplete,
    TestNotComplete,
    XValue(bool),
}
impl From<bool> for CatalystMonStatus2566835966 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            0 => Self::TestComplete,
            1 => Self::TestNotComplete,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ColdStartAidSystemMonStatus2566835966 {
    TestNotComplete,
    TestComplete,
    XValue(bool),
}
impl From<bool> for ColdStartAidSystemMonStatus2566835966 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::TestNotComplete,
            0 => Self::TestComplete,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum HeatedCatalystMonStatus2566835966 {
    TestNotComplete,
    TestComplete,
    XValue(bool),
}
impl From<bool> for HeatedCatalystMonStatus2566835966 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::TestNotComplete,
            0 => Self::TestComplete,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum CatalystMonSupp2566835966 {
    TestSupported,
    TestNotSupported,
    XValue(bool),
}
impl From<bool> for CatalystMonSupp2566835966 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::TestSupported,
            0 => Self::TestNotSupported,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ColdStartAidSystemMonSupp2566835966 {
    TestSupported,
    TestNotSupported,
    XValue(bool),
}
impl From<bool> for ColdStartAidSystemMonSupp2566835966 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::TestSupported,
            0 => Self::TestNotSupported,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum HeatedCatalystMonSupp2566835966 {
    TestSupported,
    TestNotSupported,
    XValue(bool),
}
impl From<bool> for HeatedCatalystMonSupp2566835966 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::TestSupported,
            0 => Self::TestNotSupported,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EvaporativeSystemMonSupp2566835966 {
    TestSupported,
    TestNotSupported,
    XValue(bool),
}
impl From<bool> for EvaporativeSystemMonSupp2566835966 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::TestSupported,
            0 => Self::TestNotSupported,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SecondAirSystemMonSupp2566835966 {
    TestSupported,
    TestNotSupported,
    XValue(bool),
}
impl From<bool> for SecondAirSystemMonSupp2566835966 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::TestSupported,
            0 => Self::TestNotSupported,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AcSystemRefrigerantMonSupp2566835966 {
    TestSupported,
    TestNotSupported,
    XValue(bool),
}
impl From<bool> for AcSystemRefrigerantMonSupp2566835966 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::TestSupported,
            0 => Self::TestNotSupported,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum OxygenSensorMonSupp2566835966 {
    TestSupported,
    TestNotSupported,
    XValue(bool),
}
impl From<bool> for OxygenSensorMonSupp2566835966 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::TestSupported,
            0 => Self::TestNotSupported,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum OxygenSensorHeaterMonSupp2566835966 {
    TestSupported,
    TestNotSupported,
    XValue(bool),
}
impl From<bool> for OxygenSensorHeaterMonSupp2566835966 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::TestSupported,
            0 => Self::TestNotSupported,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EgrSystemMonitoringSupp2566835966 {
    TestSupported,
    TestNotSupported,
    XValue(bool),
}
impl From<bool> for EgrSystemMonitoringSupp2566835966 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::TestSupported,
            0 => Self::TestNotSupported,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum MisfireMonitoringStatus2566835966 {
    TestNotComplete,
    TestComplete,
    XValue(bool),
}
impl From<bool> for MisfireMonitoringStatus2566835966 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::TestNotComplete,
            0 => Self::TestComplete,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ComprehensiveCompMonStatus2566835966 {
    TestNotComplete,
    TestComplete,
    XValue(bool),
}
impl From<bool> for ComprehensiveCompMonStatus2566835966 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::TestNotComplete,
            0 => Self::TestComplete,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FuelSystemMonitoringStatus2566835966 {
    TestNotComplete,
    TestComplete,
    XValue(bool),
}
impl From<bool> for FuelSystemMonitoringStatus2566835966 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::TestNotComplete,
            0 => Self::TestComplete,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ComprehensiveComponentMonSupp2566835966 {
    NotAvailable,
    Reserved,
    TestSupported,
    TestNotSupported,
    XValue(bool),
}
impl From<bool> for ComprehensiveComponentMonSupp2566835966 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::TestSupported,
            0 => Self::TestNotSupported,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FuelSystemMonitoringSupport2566835966 {
    TestSupported,
    TestNotSupported,
    XValue(bool),
}
impl From<bool> for FuelSystemMonitoringSupport2566835966 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::TestSupported,
            0 => Self::TestNotSupported,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier12566835710 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier12566835710 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EngTorqueMode2566835710 {
    NotAvailable,
    RemoteAccelerator,
    BrakingSystem,
    HighSpeedGovernor,
    TorqueLimiting,
    AbsControl,
    TransmissionControl,
    AsrControl,
    RoadSpeedGovernor,
    PtoGovernor,
    CruiseControl,
    AcceleratorPedalOperatorSelec,
    LowIdleGovernorNoRequestDe,
    XValue(u8),
}
impl From<u8> for EngTorqueMode2566835710 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            11 => Self::RemoteAccelerator,
            10 => Self::BrakingSystem,
            9 => Self::HighSpeedGovernor,
            8 => Self::TorqueLimiting,
            7 => Self::AbsControl,
            6 => Self::TransmissionControl,
            5 => Self::AsrControl,
            4 => Self::RoadSpeedGovernor,
            3 => Self::PtoGovernor,
            2 => Self::CruiseControl,
            1 => Self::AcceleratorPedalOperatorSelec,
            0 => Self::LowIdleGovernorNoRequestDe,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier12566764542 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier12566764542 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SpnSupportTypeStr32566764286 {
    SupportedInScaledTestResults,
    NotSupportedInScaledTestResults,
    XValue(bool),
}
impl From<bool> for SpnSupportTypeStr32566764286 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::SupportedInScaledTestResults,
            0 => Self::NotSupportedInScaledTestResults,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SpnSupportTypeStr22566764286 {
    SupportedInScaledTestResults,
    NotSupportedInScaledTestResults,
    XValue(bool),
}
impl From<bool> for SpnSupportTypeStr22566764286 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::SupportedInScaledTestResults,
            0 => Self::NotSupportedInScaledTestResults,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SpnSupportTypeEff32566764286 {
    SupportedInExFreezeFrame,
    NotSupportedInExFreezeFrame,
    XValue(bool),
}
impl From<bool> for SpnSupportTypeEff32566764286 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::SupportedInExFreezeFrame,
            0 => Self::NotSupportedInExFreezeFrame,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SpnSupportTypeEff22566764286 {
    SupportedInExFreezeFrame,
    NotSupportedInExFreezeFrame,
    XValue(bool),
}
impl From<bool> for SpnSupportTypeEff22566764286 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::SupportedInExFreezeFrame,
            0 => Self::NotSupportedInExFreezeFrame,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SpnSupportTypeDs32566764286 {
    SupportedInDataStream,
    NotSupportedInDataStream,
    XValue(bool),
}
impl From<bool> for SpnSupportTypeDs32566764286 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::SupportedInDataStream,
            0 => Self::NotSupportedInDataStream,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SpnSupportTypeDs22566764286 {
    SupportedInDataStream,
    NotSupportedInDataStream,
    XValue(bool),
}
impl From<bool> for SpnSupportTypeDs22566764286 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::SupportedInDataStream,
            0 => Self::NotSupportedInDataStream,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SpnSupportTypeStr12566764286 {
    SupportedInScaledTestResults,
    NotSupportedInScaledTestResults,
    XValue(bool),
}
impl From<bool> for SpnSupportTypeStr12566764286 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::SupportedInScaledTestResults,
            0 => Self::NotSupportedInScaledTestResults,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SpnSupportTypeDs12566764286 {
    SupportedInDataStream,
    NotSupportedInDataStream,
    XValue(bool),
}
impl From<bool> for SpnSupportTypeDs12566764286 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::SupportedInDataStream,
            0 => Self::NotSupportedInDataStream,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SpnSupportTypeEff12566764286 {
    SupportedInExFreezeFrame,
    NotSupportedInExFreezeFrame,
    XValue(bool),
}
impl From<bool> for SpnSupportTypeEff12566764286 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::SupportedInExFreezeFrame,
            0 => Self::NotSupportedInExFreezeFrame,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FlashRedStopLamp2555576062 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u8),
}
impl From<u8> for FlashRedStopLamp2555576062 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::UnavailableDoNotFlash,
            2 => Self::Reserved,
            1 => Self::FastFlash,
            0 => Self::SlowFlash,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FlashProtectLamp2555576062 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u8),
}
impl From<u8> for FlashProtectLamp2555576062 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::UnavailableDoNotFlash,
            2 => Self::Reserved,
            1 => Self::FastFlash,
            0 => Self::SlowFlash,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FlashMalfuncIndicatorLamp2555576062 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u8),
}
impl From<u8> for FlashMalfuncIndicatorLamp2555576062 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::UnavailableDoNotFlash,
            2 => Self::Reserved,
            1 => Self::FastFlash,
            0 => Self::SlowFlash,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FlashAmberWarningLamp2555576062 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u8),
}
impl From<u8> for FlashAmberWarningLamp2555576062 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::UnavailableDoNotFlash,
            2 => Self::Reserved,
            1 => Self::FastFlash,
            0 => Self::SlowFlash,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier52555576062 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier52555576062 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier42555576062 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier42555576062 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier12555576062 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier12555576062 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum MalfunctionIndicatorLampStatus2555576062 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u8),
}
impl From<u8> for MalfunctionIndicatorLampStatus2555576062 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::LampOn,
            0 => Self::LampOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RedStopLampState2555576062 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u8),
}
impl From<u8> for RedStopLampState2555576062 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::LampOn,
            0 => Self::LampOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AmberWarningLampStatus2555576062 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u8),
}
impl From<u8> for AmberWarningLampStatus2555576062 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::LampOn,
            0 => Self::LampOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ProtectLampStatus2555576062 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u8),
}
impl From<u8> for ProtectLampStatus2555576062 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::LampOn,
            0 => Self::LampOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier32555576062 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier32555576062 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier22555576062 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier22555576062 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier12562981630 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier12562981630 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier52566835198 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier52566835198 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier42566835198 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier42566835198 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier12566835198 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier12566835198 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum MalfunctionIndicatorLampStatus2566835198 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u8),
}
impl From<u8> for MalfunctionIndicatorLampStatus2566835198 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::LampOn,
            0 => Self::LampOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RedStopLampState2566835198 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u8),
}
impl From<u8> for RedStopLampState2566835198 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::LampOn,
            0 => Self::LampOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AmberWarningLampStatus2566835198 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u8),
}
impl From<u8> for AmberWarningLampStatus2566835198 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::LampOn,
            0 => Self::LampOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ProtectLampStatus2566835198 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u8),
}
impl From<u8> for ProtectLampStatus2566835198 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::LampOn,
            0 => Self::LampOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier32566835198 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier32566835198 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FlashRedStopLamp2566835198 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u8),
}
impl From<u8> for FlashRedStopLamp2566835198 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::UnavailableDoNotFlash,
            2 => Self::Reserved,
            1 => Self::FastFlash,
            0 => Self::SlowFlash,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FlashProtectLamp2566835198 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u8),
}
impl From<u8> for FlashProtectLamp2566835198 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::UnavailableDoNotFlash,
            2 => Self::Reserved,
            1 => Self::FastFlash,
            0 => Self::SlowFlash,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FlashMalfuncIndicatorLamp2566835198 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u8),
}
impl From<u8> for FlashMalfuncIndicatorLamp2566835198 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::UnavailableDoNotFlash,
            2 => Self::Reserved,
            1 => Self::FastFlash,
            0 => Self::SlowFlash,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FlashAmberWarningLamp2566835198 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u8),
}
impl From<u8> for FlashAmberWarningLamp2566835198 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::UnavailableDoNotFlash,
            2 => Self::Reserved,
            1 => Self::FastFlash,
            0 => Self::SlowFlash,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier22566835198 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier22566835198 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Seed2564357886 {
    NoFurtherKeyRequiredOfTool,
    UseLongSeedOrKeyFromDataSecMsg,
    SeedCompletedBeginSendingKey,
    XValue(u16),
}
impl From<u16> for Seed2564357886 {
    #[allow(dead_code)]
    fn from(val: u16) -> Self {
        match val as u64 {
            255 => Self::NoFurtherKeyRequiredOfTool,
            1 => Self::UseLongSeedOrKeyFromDataSecMsg,
            0 => Self::SeedCompletedBeginSendingKey,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum EdcpExtension2564357886 {
    DataInErrIndAndDataInSeedIsTime,
    DataInErrorIndicator,
    ConcatenateDataAsLowerEdcParam,
    ConcatenateDataAsHigherEdcParam,
    Completed,
    NoErrIndicatorEdcParamAvailable,
    XValue(u8),
}
impl From<u8> for EdcpExtension2564357886 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            9 => Self::DataInErrIndAndDataInSeedIsTime,
            6 => Self::DataInErrorIndicator,
            3 => Self::ConcatenateDataAsLowerEdcParam,
            2 => Self::ConcatenateDataAsHigherEdcParam,
            0 => Self::Completed,
            255 => Self::NoErrIndicatorEdcParamAvailable,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ErrorIndicator2564357886 {
    NoErrorIndicatorAvailable,
    TransprtNotComplWithinTimeAllowd,
    TransportNotInitWithinTimeAllowd,
    NoResponseInTheTimeAllowed,
    ModuleExceedingNumberOfRetries,
    AbortFromExtToNormalSoftwareProc,
    VehicleNotInParkOrNotStationary,
    EngineRunning,
    NotInEngineeringOrDevelopmentMode,
    NotInDiagnosticMode,
    InvalidKey,
    InvalidUserLevel,
    InvalidPassword,
    SecurityErrorGeneral,
    NameDoesNotConformToExpectdValue,
    DataDoesNotConformToValueRanges,
    AddrForBootLoadExeInvalidBoundary,
    AddrForBootLoadExeOutsideExeMem,
    OpReqExeTransfAndEraseOfProgMem,
    OpRequiresPriorEraseOfProgramMem,
    OpRequiresPriorEraseOfDataMem,
    ReqMemoryExceededAvailableMemory,
    LengthNotValidForMemStructAndOp,
    AddressNotOnValidBoundary,
    AddressingOrDataGeneralError,
    InternalFailurePreventingReq,
    PromDidNotVerifyOnWrite,
    FlashDidNotVerifyOnWrite,
    RamDidNotVerifyOnWrite,
    EdcParaNotCorrectForDataStream,
    ProcessUnspecReqFromThisAddress,
    ProcessingEdcpGenerationReq,
    ProcessingBootLoadReq,
    ProcessingStatusReq,
    ProcessingWriteReq,
    ProcessingReadReq,
    ProcessingEraseReq,
    ProcessingForSomeoneElse,
    ErrorNotIdentified,
    NoError,
    XValue(u32),
}
impl From<u32> for ErrorIndicator2564357886 {
    #[allow(dead_code)]
    fn from(val: u32) -> Self {
        match val as u64 {
            16777215 => Self::NoErrorIndicatorAvailable,
            65540 => Self::TransprtNotComplWithinTimeAllowd,
            65539 => Self::TransportNotInitWithinTimeAllowd,
            65538 => Self::NoResponseInTheTimeAllowed,
            65537 => Self::ModuleExceedingNumberOfRetries,
            65536 => Self::AbortFromExtToNormalSoftwareProc,
            4103 => Self::VehicleNotInParkOrNotStationary,
            4102 => Self::EngineRunning,
            4101 => Self::NotInEngineeringOrDevelopmentMode,
            4100 => Self::NotInDiagnosticMode,
            4099 => Self::InvalidKey,
            4098 => Self::InvalidUserLevel,
            4097 => Self::InvalidPassword,
            4096 => Self::SecurityErrorGeneral,
            266 => Self::NameDoesNotConformToExpectdValue,
            265 => Self::DataDoesNotConformToValueRanges,
            264 => Self::AddrForBootLoadExeInvalidBoundary,
            263 => Self::AddrForBootLoadExeOutsideExeMem,
            262 => Self::OpReqExeTransfAndEraseOfProgMem,
            261 => Self::OpRequiresPriorEraseOfProgramMem,
            260 => Self::OpRequiresPriorEraseOfDataMem,
            259 => Self::ReqMemoryExceededAvailableMemory,
            258 => Self::LengthNotValidForMemStructAndOp,
            257 => Self::AddressNotOnValidBoundary,
            256 => Self::AddressingOrDataGeneralError,
            36 => Self::InternalFailurePreventingReq,
            35 => Self::PromDidNotVerifyOnWrite,
            34 => Self::FlashDidNotVerifyOnWrite,
            33 => Self::RamDidNotVerifyOnWrite,
            32 => Self::EdcParaNotCorrectForDataStream,
            31 => Self::ProcessUnspecReqFromThisAddress,
            23 => Self::ProcessingEdcpGenerationReq,
            22 => Self::ProcessingBootLoadReq,
            19 => Self::ProcessingStatusReq,
            18 => Self::ProcessingWriteReq,
            17 => Self::ProcessingReadReq,
            16 => Self::ProcessingEraseReq,
            2 => Self::ProcessingForSomeoneElse,
            1 => Self::ErrorNotIdentified,
            0 => Self::NoError,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Status2564357886 {
    Reserved4,
    Reserved3,
    OperationFailed,
    OperationCompleted,
    Reserved2,
    Reserved1,
    Busy,
    Proceed,
    XValue(u8),
}
impl From<u8> for Status2564357886 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::Reserved4,
            6 => Self::Reserved3,
            5 => Self::OperationFailed,
            4 => Self::OperationCompleted,
            3 => Self::Reserved2,
            2 => Self::Reserved1,
            1 => Self::Busy,
            0 => Self::Proceed,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum KeyOrUserLevel2564423422 {
    NoKeyAvailable,
    UseLongSeedOrKey,
    XValue(u16),
}
impl From<u16> for KeyOrUserLevel2564423422 {
    #[allow(dead_code)]
    fn from(val: u16) -> Self {
        match val as u64 {
            65535 => Self::NoKeyAvailable,
            0 => Self::UseLongSeedOrKey,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum PointerExtension2564423422 {
    SpnSpace,
    XValue(u8),
}
impl From<u8> for PointerExtension2564423422 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            0 => Self::SpnSpace,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Command2564423422 {
    EdcpGeneration,
    BootLoad,
    OperationFailed,
    OperationCompleted,
    StatusRequest,
    Write,
    Read,
    Erase,
    XValue(u8),
}
impl From<u8> for Command2564423422 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::EdcpGeneration,
            6 => Self::BootLoad,
            5 => Self::OperationFailed,
            4 => Self::OperationCompleted,
            3 => Self::StatusRequest,
            2 => Self::Write,
            1 => Self::Read,
            0 => Self::Erase,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum PointerType2564423422 {
    DirectedSpatialAddressing,
    DirectMemoryAddressing,
    XValue(bool),
}
impl From<bool> for PointerType2564423422 {
    #[allow(dead_code)]
    fn from(val: bool) -> Self {
        match val as u64 {
            1 => Self::DirectedSpatialAddressing,
            0 => Self::DirectMemoryAddressing,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum HoldSignal2564816638 {
    NotAvailable,
    DevicesWhoseBroadcastStateHa,
    AllDevices,
    XValue(u8),
}
impl From<u8> for HoldSignal2564816638 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            1 => Self::DevicesWhoseBroadcastStateHa,
            0 => Self::AllDevices,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum J1939Network32564816638 {
    DonXtCare,
    Reserved,
    StartBroadcast,
    StopBroadcast,
    XValue(u8),
}
impl From<u8> for J1939Network32564816638 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonXtCare,
            2 => Self::Reserved,
            1 => Self::StartBroadcast,
            0 => Self::StopBroadcast,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum J1939Network22564816638 {
    DonXtCare,
    Reserved,
    StartBroadcast,
    StopBroadcast,
    XValue(u8),
}
impl From<u8> for J1939Network22564816638 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonXtCare,
            2 => Self::Reserved,
            1 => Self::StartBroadcast,
            0 => Self::StopBroadcast,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Iso91412564816638 {
    DonXtCare,
    Reserved,
    StartBroadcast,
    StopBroadcast,
    XValue(u8),
}
impl From<u8> for Iso91412564816638 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonXtCare,
            2 => Self::Reserved,
            1 => Self::StartBroadcast,
            0 => Self::StopBroadcast,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SaeJ18502564816638 {
    DonXtCare,
    Reserved,
    StartBroadcast,
    StopBroadcast,
    XValue(u8),
}
impl From<u8> for SaeJ18502564816638 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonXtCare,
            2 => Self::Reserved,
            1 => Self::StartBroadcast,
            0 => Self::StopBroadcast,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ManufacturerSpecificPort2564816638 {
    DonXtCare,
    Reserved,
    StartBroadcast,
    StopBroadcast,
    XValue(u8),
}
impl From<u8> for ManufacturerSpecificPort2564816638 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonXtCare,
            2 => Self::Reserved,
            1 => Self::StartBroadcast,
            0 => Self::StopBroadcast,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum CurrentDataLink2564816638 {
    DonXtCare,
    Reserved,
    StartBroadcast,
    StopBroadcast,
    XValue(u8),
}
impl From<u8> for CurrentDataLink2564816638 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonXtCare,
            2 => Self::Reserved,
            1 => Self::StartBroadcast,
            0 => Self::StopBroadcast,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SaeJ15872564816638 {
    DonXtCare,
    Reserved,
    StartBroadcast,
    StopBroadcast,
    XValue(u8),
}
impl From<u8> for SaeJ15872564816638 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonXtCare,
            2 => Self::Reserved,
            1 => Self::StartBroadcast,
            0 => Self::StopBroadcast,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SaeJ19222564816638 {
    DonXtCare,
    Reserved,
    StartBroadcast,
    StopBroadcast,
    XValue(u8),
}
impl From<u8> for SaeJ19222564816638 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonXtCare,
            2 => Self::Reserved,
            1 => Self::StartBroadcast,
            0 => Self::StopBroadcast,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum J1939Network12564816638 {
    DonXtCare,
    Reserved,
    StartBroadcast,
    StopBroadcast,
    XValue(u8),
}
impl From<u8> for J1939Network12564816638 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::DonXtCare,
            2 => Self::Reserved,
            1 => Self::StartBroadcast,
            0 => Self::StopBroadcast,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum SuspendSignal2564816638 {
    NotAvailable,
    ResumingNormalBroadcastPattern,
    TemporarySuspensionOfSomeMessages,
    TemporarySuspensionOfAllBroadcasts,
    IndefiniteSuspensionOfSomeMessages,
    IndefiniteSuspensionOfAllBroadcasts,
    XValue(u8),
}
impl From<u8> for SuspendSignal2564816638 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            14 => Self::ResumingNormalBroadcastPattern,
            3 => Self::TemporarySuspensionOfSomeMessages,
            2 => Self::TemporarySuspensionOfAllBroadcasts,
            1 => Self::IndefiniteSuspensionOfSomeMessages,
            0 => Self::IndefiniteSuspensionOfAllBroadcasts,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FlashRedStopLamp2566837502 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u8),
}
impl From<u8> for FlashRedStopLamp2566837502 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::UnavailableDoNotFlash,
            2 => Self::Reserved,
            1 => Self::FastFlash,
            0 => Self::SlowFlash,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FlashProtectLamp2566837502 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u8),
}
impl From<u8> for FlashProtectLamp2566837502 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::UnavailableDoNotFlash,
            2 => Self::Reserved,
            1 => Self::FastFlash,
            0 => Self::SlowFlash,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier52566837502 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier52566837502 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier42566837502 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier42566837502 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier32566837502 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier32566837502 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier12566837502 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier12566837502 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum MalfunctionIndicatorLampStatus2566837502 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u8),
}
impl From<u8> for MalfunctionIndicatorLampStatus2566837502 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::LampOn,
            0 => Self::LampOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RedStopLampState2566837502 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u8),
}
impl From<u8> for RedStopLampState2566837502 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::LampOn,
            0 => Self::LampOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AmberWarningLampStatus2566837502 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u8),
}
impl From<u8> for AmberWarningLampStatus2566837502 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::LampOn,
            0 => Self::LampOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ProtectLampStatus2566837502 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u8),
}
impl From<u8> for ProtectLampStatus2566837502 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::LampOn,
            0 => Self::LampOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FlashMalfuncIndicatorLamp2566837502 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u8),
}
impl From<u8> for FlashMalfuncIndicatorLamp2566837502 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::UnavailableDoNotFlash,
            2 => Self::Reserved,
            1 => Self::FastFlash,
            0 => Self::SlowFlash,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FlashAmberWarningLamp2566837502 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u8),
}
impl From<u8> for FlashAmberWarningLamp2566837502 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::UnavailableDoNotFlash,
            2 => Self::Reserved,
            1 => Self::FastFlash,
            0 => Self::SlowFlash,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier22566837502 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier22566837502 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier52566834942 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier52566834942 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier42566834942 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier42566834942 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier32566834942 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier32566834942 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FlashRedStopLamp2566834942 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u8),
}
impl From<u8> for FlashRedStopLamp2566834942 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::UnavailableDoNotFlash,
            2 => Self::Reserved,
            1 => Self::FastFlash,
            0 => Self::SlowFlash,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FlashProtectLamp2566834942 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u8),
}
impl From<u8> for FlashProtectLamp2566834942 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::UnavailableDoNotFlash,
            2 => Self::Reserved,
            1 => Self::FastFlash,
            0 => Self::SlowFlash,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FlashMalfuncIndicatorLamp2566834942 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u8),
}
impl From<u8> for FlashMalfuncIndicatorLamp2566834942 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::UnavailableDoNotFlash,
            2 => Self::Reserved,
            1 => Self::FastFlash,
            0 => Self::SlowFlash,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FlashAmberWarningLamp2566834942 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u8),
}
impl From<u8> for FlashAmberWarningLamp2566834942 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::UnavailableDoNotFlash,
            2 => Self::Reserved,
            1 => Self::FastFlash,
            0 => Self::SlowFlash,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum MalfunctionIndicatorLampStatus2566834942 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u8),
}
impl From<u8> for MalfunctionIndicatorLampStatus2566834942 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::LampOn,
            0 => Self::LampOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AmberWarningLampStatus2566834942 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u8),
}
impl From<u8> for AmberWarningLampStatus2566834942 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::LampOn,
            0 => Self::LampOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier12566834942 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier12566834942 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RedStopLampState2566834942 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u8),
}
impl From<u8> for RedStopLampState2566834942 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::LampOn,
            0 => Self::LampOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ProtectLampStatus2566834942 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u8),
}
impl From<u8> for ProtectLampStatus2566834942 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::LampOn,
            0 => Self::LampOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier22566834942 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier22566834942 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum IndustryGroup2566838526 {
    ReserveForSae,
    IndustrialProcessCtrlStationary,
    Marine,
    Construction,
    AgriculturalAndForestry,
    OnHighway,
    Global,
    XValue(u8),
}
impl From<u8> for IndustryGroup2566838526 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::ReserveForSae,
            5 => Self::IndustrialProcessCtrlStationary,
            4 => Self::Marine,
            3 => Self::Construction,
            2 => Self::AgriculturalAndForestry,
            1 => Self::OnHighway,
            0 => Self::Global,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum IndustryGroup2565799678 {
    ReserveForSae,
    IndustrialProcessCtrlStationary,
    Marine,
    Construction,
    AgriculturalAndForestry,
    OnHighway,
    Global,
    XValue(u8),
}
impl From<u8> for IndustryGroup2565799678 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::ReserveForSae,
            5 => Self::IndustrialProcessCtrlStationary,
            4 => Self::Marine,
            3 => Self::Construction,
            2 => Self::AgriculturalAndForestry,
            1 => Self::OnHighway,
            0 => Self::Global,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum PgNumber2565668606 {
    NotAvailable,
    XValue(u32),
}
impl From<u32> for PgNumber2565668606 {
    #[allow(dead_code)]
    fn from(val: u32) -> Self {
        match val as u64 {
            255 => Self::NotAvailable,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ControlByte2565668606 {
    EAbort,
    EEoMack,
    Edpo,
    Ects,
    Erts,
    Abort,
    Bam,
    EoMa,
    Cts,
    Rts,
    XValue(u8),
}
impl From<u8> for ControlByte2565668606 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            24 => Self::EAbort,
            23 => Self::EEoMack,
            22 => Self::Edpo,
            21 => Self::Ects,
            20 => Self::Erts,
            255 => Self::Abort,
            32 => Self::Bam,
            19 => Self::EoMa,
            17 => Self::Cts,
            16 => Self::Rts,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum UseTransferMode2563374846 {
    Na,
    Undefined,
    Yes,
    No,
    XValue(u8),
}
impl From<u8> for UseTransferMode2563374846 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::Na,
            2 => Self::Undefined,
            1 => Self::Yes,
            0 => Self::No,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier52566750462 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier52566750462 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier42566750462 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier42566750462 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier32566750462 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier32566750462 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FlashRedStopLamp2566750462 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u8),
}
impl From<u8> for FlashRedStopLamp2566750462 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::UnavailableDoNotFlash,
            2 => Self::Reserved,
            1 => Self::FastFlash,
            0 => Self::SlowFlash,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FlashProtectLamp2566750462 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u8),
}
impl From<u8> for FlashProtectLamp2566750462 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::UnavailableDoNotFlash,
            2 => Self::Reserved,
            1 => Self::FastFlash,
            0 => Self::SlowFlash,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FlashMalfuncIndicatorLamp2566750462 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u8),
}
impl From<u8> for FlashMalfuncIndicatorLamp2566750462 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::UnavailableDoNotFlash,
            2 => Self::Reserved,
            1 => Self::FastFlash,
            0 => Self::SlowFlash,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FlashAmberWarningLamp2566750462 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u8),
}
impl From<u8> for FlashAmberWarningLamp2566750462 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::UnavailableDoNotFlash,
            2 => Self::Reserved,
            1 => Self::FastFlash,
            0 => Self::SlowFlash,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum MalfunctionIndicatorLampStatus2566750462 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u8),
}
impl From<u8> for MalfunctionIndicatorLampStatus2566750462 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::LampOn,
            0 => Self::LampOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AmberWarningLampStatus2566750462 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u8),
}
impl From<u8> for AmberWarningLampStatus2566750462 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::LampOn,
            0 => Self::LampOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier12566750462 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier12566750462 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RedStopLampState2566750462 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u8),
}
impl From<u8> for RedStopLampState2566750462 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::LampOn,
            0 => Self::LampOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ProtectLampStatus2566750462 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u8),
}
impl From<u8> for ProtectLampStatus2566750462 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::LampOn,
            0 => Self::LampOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier22566750462 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier22566750462 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier52566750974 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier52566750974 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier42566750974 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier42566750974 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier32566750974 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier32566750974 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FlashRedStopLamp2566750974 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u8),
}
impl From<u8> for FlashRedStopLamp2566750974 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::UnavailableDoNotFlash,
            2 => Self::Reserved,
            1 => Self::FastFlash,
            0 => Self::SlowFlash,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FlashProtectLamp2566750974 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u8),
}
impl From<u8> for FlashProtectLamp2566750974 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::UnavailableDoNotFlash,
            2 => Self::Reserved,
            1 => Self::FastFlash,
            0 => Self::SlowFlash,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FlashMalfuncIndicatorLamp2566750974 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u8),
}
impl From<u8> for FlashMalfuncIndicatorLamp2566750974 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::UnavailableDoNotFlash,
            2 => Self::Reserved,
            1 => Self::FastFlash,
            0 => Self::SlowFlash,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FlashAmberWarningLamp2566750974 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u8),
}
impl From<u8> for FlashAmberWarningLamp2566750974 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::UnavailableDoNotFlash,
            2 => Self::Reserved,
            1 => Self::FastFlash,
            0 => Self::SlowFlash,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum MalfunctionIndicatorLampStatus2566750974 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u8),
}
impl From<u8> for MalfunctionIndicatorLampStatus2566750974 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::LampOn,
            0 => Self::LampOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AmberWarningLampStatus2566750974 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u8),
}
impl From<u8> for AmberWarningLampStatus2566750974 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::LampOn,
            0 => Self::LampOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier12566750974 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier12566750974 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RedStopLampState2566750974 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u8),
}
impl From<u8> for RedStopLampState2566750974 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::LampOn,
            0 => Self::LampOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ProtectLampStatus2566750974 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u8),
}
impl From<u8> for ProtectLampStatus2566750974 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Reserved,
            1 => Self::LampOn,
            0 => Self::LampOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FailureModeIdentifier22566750974 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u8),
}
impl From<u8> for FailureModeIdentifier22566750974 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            31 => Self::NotAvailable,
            19 => Self::ReceivedNetworkDataInError,
            18 => Self::BelowNormalModeratelsSevere,
            17 => Self::BelowNormalLeastSevere,
            16 => Self::AboveNormalModeratelySevere,
            15 => Self::AboveNormalLeastSevere,
            14 => Self::SpecialIntstructions,
            13 => Self::OutOfCalibration,
            12 => Self::BadIntelligentDevice,
            11 => Self::RootCauseNotKnown,
            10 => Self::AbnormalRateOfChange,
            9 => Self::AbnormalUpdateRate,
            8 => Self::AbnormalFrequency,
            7 => Self::MechanicalSystemNotResponding,
            6 => Self::CurrentAboveNormal,
            5 => Self::CurrentBelowNormal,
            4 => Self::VoltageBelowNormal,
            3 => Self::VoltageAboveNormal,
            2 => Self::DataErratic,
            1 => Self::BelowNormalMostSevere,
            0 => Self::AboveNormalMostSevere,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AetcDataCollectionStandard2566754558 {
    NotAvailable,
    X1101notDefined,
    Saej1995,
    XValue(u8),
}
impl From<u8> for AetcDataCollectionStandard2566754558 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            1 => Self::X1101notDefined,
            0 => Self::Saej1995,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RightHeadlampLightDistribution2566749950 {
    NotAvailable,
    X1110reserved,
    DffrntLghtDstrbtnsNtAvlblNafsDs,
    LghtDstrbtnFlrMdlIsDmgdCrrntPsM,
    LghtDstrbtnFlSfPsMdlIsDmgdCrrnt,
    LghtDstrbtnAdvrsWthrAdvrsWthrLg,
    LghtDstrbtnHghBmHghBmDstrbtnOfT,
    LghtDstrbtnMtrwyTskOfMtrwyLghtI,
    LghtDstrbtnCntryCntryLghtIsMstl,
    LghtDstrbtnTwnBscLghtDstrbtnFrT,
    XValue(u8),
}
impl From<u8> for RightHeadlampLightDistribution2566749950 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            8 => Self::X1110reserved,
            7 => Self::DffrntLghtDstrbtnsNtAvlblNafsDs,
            6 => Self::LghtDstrbtnFlrMdlIsDmgdCrrntPsM,
            5 => Self::LghtDstrbtnFlSfPsMdlIsDmgdCrrnt,
            4 => Self::LghtDstrbtnAdvrsWthrAdvrsWthrLg,
            3 => Self::LghtDstrbtnHghBmHghBmDstrbtnOfT,
            2 => Self::LghtDstrbtnMtrwyTskOfMtrwyLghtI,
            1 => Self::LghtDstrbtnCntryCntryLghtIsMstl,
            0 => Self::LghtDstrbtnTwnBscLghtDstrbtnFrT,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LeftHeadlampLightDistribution2566749950 {
    NotAvailable,
    X1110reserved,
    DffrntLghtDstrbtnsNtAvlblNafsDs,
    LghtDstrbtnFlrMdlIsDmgdCrrntPsM,
    LghtDstrbtnFlSfPsMdlIsDmgdCrrnt,
    LghtDstrbtnAdvrsWthrAdvrsWthrLg,
    LghtDstrbtnHghBmHghBmDstrbtnOfT,
    LghtDstrbtnMtrwyTskOfMtrwyLghtI,
    LghtDstrbtnCntryCntryLghtIsMstl,
    LghtDstrbtnTwnBscLghtDstrbtnFrT,
    XValue(u8),
}
impl From<u8> for LeftHeadlampLightDistribution2566749950 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            8 => Self::X1110reserved,
            7 => Self::DffrntLghtDstrbtnsNtAvlblNafsDs,
            6 => Self::LghtDstrbtnFlrMdlIsDmgdCrrntPsM,
            5 => Self::LghtDstrbtnFlSfPsMdlIsDmgdCrrnt,
            4 => Self::LghtDstrbtnAdvrsWthrAdvrsWthrLg,
            3 => Self::LghtDstrbtnHghBmHghBmDstrbtnOfT,
            2 => Self::LghtDstrbtnMtrwyTskOfMtrwyLghtI,
            1 => Self::LghtDstrbtnCntryCntryLghtIsMstl,
            0 => Self::LghtDstrbtnTwnBscLghtDstrbtnFrT,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RghtHeadlampDynamicBendingLight2566749950 {
    NotAvailable,
    X110reserved,
    DynmcBndngLghtFlrBndngLghtDsNtW,
    DynmcBndngLghtFlSfPsBndngLghtIs,
    DynmcBndngLghtIsWrkngPrprlyNrml,
    DynmcBndngLghtDctvtdThrIsNPrblm,
    XValue(u8),
}
impl From<u8> for RghtHeadlampDynamicBendingLight2566749950 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            4 => Self::X110reserved,
            3 => Self::DynmcBndngLghtFlrBndngLghtDsNtW,
            2 => Self::DynmcBndngLghtFlSfPsBndngLghtIs,
            1 => Self::DynmcBndngLghtIsWrkngPrprlyNrml,
            0 => Self::DynmcBndngLghtDctvtdThrIsNPrblm,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum LeftHeadlampDynamicBendingLight2566749950 {
    NotAvailable,
    X110reserved,
    DynmcBndngLghtFlrBndngLghtDsNtW,
    DynmcBndngLghtFlSfPsBndngLghtIs,
    DynmcBndngLghtIsWrkngPrprlyNrml,
    DynmcBndngLghtDctvtdThrIsNPrblm,
    XValue(u8),
}
impl From<u8> for LeftHeadlampDynamicBendingLight2566749950 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            4 => Self::X110reserved,
            3 => Self::DynmcBndngLghtFlrBndngLghtDsNtW,
            2 => Self::DynmcBndngLghtFlSfPsBndngLghtIs,
            1 => Self::DynmcBndngLghtIsWrkngPrprlyNrml,
            0 => Self::DynmcBndngLghtDctvtdThrIsNPrblm,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftrtrtmnt1IntkGsSnsrHeaterCtrl2565869310 {
    HeaterOff,
    Preheat1,
    Preheat2,
    Automatic,
    XValue(u8),
}
impl From<u8> for Aftrtrtmnt1IntkGsSnsrHeaterCtrl2565869310 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::HeaterOff,
            2 => Self::Preheat1,
            1 => Self::Preheat2,
            0 => Self::Automatic,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftrtrtmnt1IntkWdRngO2RdngStble2565869310 {
    NotAvailable,
    Error,
    Stable,
    NotStable,
    XValue(u8),
}
impl From<u8> for Aftrtrtmnt1IntkWdRngO2RdngStble2565869310 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Stable,
            0 => Self::NotStable,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftrtrtmnt1IntkNOxReadingStable2565869310 {
    NotAvailable,
    Error,
    Stable,
    NotStable,
    XValue(u8),
}
impl From<u8> for Aftrtrtmnt1IntkNOxReadingStable2565869310 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Stable,
            0 => Self::NotStable,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftrtrtmnt1IntkGsSnsrPwrInRange2565869310 {
    NotAvailable,
    Error,
    InRange,
    NotInRange,
    XValue(u8),
}
impl From<u8> for Aftrtrtmnt1IntkGsSnsrPwrInRange2565869310 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::InRange,
            0 => Self::NotInRange,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftrtrtmnt1OtltGsSnsrHeaterCtrl2565869566 {
    HeaterOff,
    Preheat1,
    Preheat2,
    Automatic,
    XValue(u8),
}
impl From<u8> for Aftrtrtmnt1OtltGsSnsrHeaterCtrl2565869566 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::HeaterOff,
            2 => Self::Preheat1,
            1 => Self::Preheat2,
            0 => Self::Automatic,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftrtrtmnt1OtltWdRngO2RdngStble2565869566 {
    NotAvailable,
    Error,
    Stable,
    NotStable,
    XValue(u8),
}
impl From<u8> for Aftrtrtmnt1OtltWdRngO2RdngStble2565869566 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Stable,
            0 => Self::NotStable,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftrtrtmnt1OtltNOxReadingStable2565869566 {
    NotAvailable,
    Error,
    Stable,
    NotStable,
    XValue(u8),
}
impl From<u8> for Aftrtrtmnt1OtltNOxReadingStable2565869566 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Stable,
            0 => Self::NotStable,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftrtrtmnt1OtletGasSensorAtTemp2565869566 {
    NotAvailable,
    Error,
    InRange,
    NotInRange,
    XValue(u8),
}
impl From<u8> for Aftrtrtmnt1OtletGasSensorAtTemp2565869566 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::InRange,
            0 => Self::NotInRange,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftrtrtmnt1OtltGsSnsrPwrInRange2565869566 {
    NotAvailable,
    Error,
    InRange,
    NotInRange,
    XValue(u8),
}
impl From<u8> for Aftrtrtmnt1OtltGsSnsrPwrInRange2565869566 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::InRange,
            0 => Self::NotInRange,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftrtrtmnt2IntkGsSnsrHeaterCtrl2565869822 {
    HeaterOff,
    Preheat1,
    Preheat2,
    Automatic,
    XValue(u8),
}
impl From<u8> for Aftrtrtmnt2IntkGsSnsrHeaterCtrl2565869822 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::HeaterOff,
            2 => Self::Preheat1,
            1 => Self::Preheat2,
            0 => Self::Automatic,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftrtrtmnt2IntkWdRngO2RdngStble2565869822 {
    NotAvailable,
    Error,
    Stable,
    NotStable,
    XValue(u8),
}
impl From<u8> for Aftrtrtmnt2IntkWdRngO2RdngStble2565869822 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Stable,
            0 => Self::NotStable,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftrtrtmnt2IntkNOxReadingStable2565869822 {
    NotAvailable,
    Error,
    Stable,
    NotStable,
    XValue(u8),
}
impl From<u8> for Aftrtrtmnt2IntkNOxReadingStable2565869822 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Stable,
            0 => Self::NotStable,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftrtrtmnt2IntkeGasSensorAtTemp2565869822 {
    NotAvailable,
    Error,
    InRange,
    NotInRange,
    XValue(u8),
}
impl From<u8> for Aftrtrtmnt2IntkeGasSensorAtTemp2565869822 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::InRange,
            0 => Self::NotInRange,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftrtrtmnt2IntkGsSnsrPwrInRange2565869822 {
    NotAvailable,
    Error,
    InRange,
    NotInRange,
    XValue(u8),
}
impl From<u8> for Aftrtrtmnt2IntkGsSnsrPwrInRange2565869822 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::InRange,
            0 => Self::NotInRange,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftrtrtmnt2OtltGsSnsrHeaterCtrl2565870078 {
    HeaterOff,
    Preheat1,
    Preheat2,
    Automatic,
    XValue(u8),
}
impl From<u8> for Aftrtrtmnt2OtltGsSnsrHeaterCtrl2565870078 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::HeaterOff,
            2 => Self::Preheat1,
            1 => Self::Preheat2,
            0 => Self::Automatic,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftrtrtmnt2OtltWdRngO2RdngStble2565870078 {
    NotAvailable,
    Error,
    Stable,
    NotStable,
    XValue(u8),
}
impl From<u8> for Aftrtrtmnt2OtltWdRngO2RdngStble2565870078 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Stable,
            0 => Self::NotStable,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftrtrtmnt2OtltNOxReadingStable2565870078 {
    NotAvailable,
    Error,
    Stable,
    NotStable,
    XValue(u8),
}
impl From<u8> for Aftrtrtmnt2OtltNOxReadingStable2565870078 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Stable,
            0 => Self::NotStable,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftrtrtmnt2OtletGasSensorAtTemp2565870078 {
    NotAvailable,
    Error,
    InRange,
    NotInRange,
    XValue(u8),
}
impl From<u8> for Aftrtrtmnt2OtletGasSensorAtTemp2565870078 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::InRange,
            0 => Self::NotInRange,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Aftrtrtmnt2OtltGsSnsrPwrInRange2565870078 {
    NotAvailable,
    Error,
    InRange,
    NotInRange,
    XValue(u8),
}
impl From<u8> for Aftrtrtmnt2OtltGsSnsrPwrInRange2565870078 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::InRange,
            0 => Self::NotInRange,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ParticulateTrap1AshLoadPercent2566749182 {
    LevelIsTargetAshServiceInterval,
    XValue(u8),
}
impl From<u8> for ParticulateTrap1AshLoadPercent2566749182 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            4 => Self::LevelIsTargetAshServiceInterval,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ParticulateTrap1SootLoadPercent2566749182 {
    LvlIsActvRgnerationTriggerLevel,
    XValue(u8),
}
impl From<u8> for ParticulateTrap1SootLoadPercent2566749182 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            4 => Self::LvlIsActvRgnerationTriggerLevel,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ParticulateTrap2AshLoadPercent2566748926 {
    LevelIsTargetAshServiceInterval,
    XValue(u8),
}
impl From<u8> for ParticulateTrap2AshLoadPercent2566748926 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            4 => Self::LevelIsTargetAshServiceInterval,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ParticulateTrap2SootLoadPercent2566748926 {
    LvlIsActvRgnerationTriggerLevel,
    XValue(u8),
}
impl From<u8> for ParticulateTrap2SootLoadPercent2566748926 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            4 => Self::LvlIsActvRgnerationTriggerLevel,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO452561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO452561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO462561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO462561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO472561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO472561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO482561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO482561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO412561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO412561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO422561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO422561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO432561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO432561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO442561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO442561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO372561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO372561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO382561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO382561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO392561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO392561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO402561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO402561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO332561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO332561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO342561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO342561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO352561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO352561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO362561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO362561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO292561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO292561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO302561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO302561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO312561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO312561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO322561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO322561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO252561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO252561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO262561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO262561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO272561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO272561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO282561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO282561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO212561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO212561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO222561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO222561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO232561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO232561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO242561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO242561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO172561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO172561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO182561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO182561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO192561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO192561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO202561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO202561146622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO772561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO772561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO782561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO782561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO792561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO792561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO802561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO802561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO732561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO732561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO742561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO742561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO752561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO752561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO762561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO762561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO692561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO692561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO702561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO702561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO712561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO712561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO722561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO722561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO652561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO652561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO662561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO662561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO672561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO672561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO682561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO682561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO612561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO612561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO622561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO622561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO632561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO632561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO642561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO642561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO572561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO572561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO582561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO582561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO592561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO592561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO602561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO602561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO532561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO532561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO542561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO542561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO552561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO552561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO562561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO562561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO492561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO492561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO502561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO502561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO512561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO512561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO522561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO522561081086 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO922561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO922561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO852561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO852561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO862561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO862561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO872561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO872561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO882561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO882561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO812561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO812561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO822561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO822561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO832561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO832561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO842561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO842561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO1092561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO1092561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO1102561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO1102561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO1112561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO1112561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO1122561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO1122561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO1052561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO1052561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO1062561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO1062561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO1072561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO1072561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO1082561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO1082561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO1012561015550 {
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    NtAvlblTkNoActionDependingOnApp,
    XValue(u8),
}
impl From<u8> for AuxIO1012561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO1022561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO1022561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO1032561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO1032561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO1042561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO1042561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO972561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO972561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO982561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO982561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO992561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO992561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO1002561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO1002561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO932561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO932561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO942561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO942561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO952561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO952561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO962561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO962561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO892561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO892561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO902561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO902561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AuxIO912561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u8),
}
impl From<u8> for AuxIO912561015550 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NtAvlblTkNoActionDependingOnApp,
            2 => Self::ErrrIndctrNotUsedDependingOnApp,
            1 => Self::AuxChannelOn,
            0 => Self::AuxChannelOff,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerBrakeStrokeAxle5Right2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u8),
}
impl From<u8> for TrailerBrakeStrokeAxle5Right2566746622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            6 => Self::SensorError,
            5 => Self::Reserved,
            3 => Self::DraggingBrake,
            2 => Self::Overstroke,
            1 => Self::Nonfunctioning,
            0 => Self::Ok,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerBrakeStrokeAxle5Left2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u8),
}
impl From<u8> for TrailerBrakeStrokeAxle5Left2566746622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            6 => Self::SensorError,
            5 => Self::Reserved,
            3 => Self::DraggingBrake,
            2 => Self::Overstroke,
            1 => Self::Nonfunctioning,
            0 => Self::Ok,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerBrakeStrokeAxle4Right2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u8),
}
impl From<u8> for TrailerBrakeStrokeAxle4Right2566746622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            6 => Self::SensorError,
            5 => Self::Reserved,
            3 => Self::DraggingBrake,
            2 => Self::Overstroke,
            1 => Self::Nonfunctioning,
            0 => Self::Ok,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerBrakeStrokeAxle4Left2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u8),
}
impl From<u8> for TrailerBrakeStrokeAxle4Left2566746622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            6 => Self::SensorError,
            5 => Self::Reserved,
            3 => Self::DraggingBrake,
            2 => Self::Overstroke,
            1 => Self::Nonfunctioning,
            0 => Self::Ok,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerBrakeStrokeAxle3Right2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u8),
}
impl From<u8> for TrailerBrakeStrokeAxle3Right2566746622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            6 => Self::SensorError,
            5 => Self::Reserved,
            3 => Self::DraggingBrake,
            2 => Self::Overstroke,
            1 => Self::Nonfunctioning,
            0 => Self::Ok,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerBrakeStrokeAxle3Left2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u8),
}
impl From<u8> for TrailerBrakeStrokeAxle3Left2566746622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            6 => Self::SensorError,
            5 => Self::Reserved,
            3 => Self::DraggingBrake,
            2 => Self::Overstroke,
            1 => Self::Nonfunctioning,
            0 => Self::Ok,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerBrakeStrokeAxle2Right2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u8),
}
impl From<u8> for TrailerBrakeStrokeAxle2Right2566746622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            6 => Self::SensorError,
            5 => Self::Reserved,
            3 => Self::DraggingBrake,
            2 => Self::Overstroke,
            1 => Self::Nonfunctioning,
            0 => Self::Ok,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerBrakeStrokeAxle2Left2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u8),
}
impl From<u8> for TrailerBrakeStrokeAxle2Left2566746622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            6 => Self::SensorError,
            5 => Self::Reserved,
            3 => Self::DraggingBrake,
            2 => Self::Overstroke,
            1 => Self::Nonfunctioning,
            0 => Self::Ok,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerBrakeStrokeAxle1Right2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u8),
}
impl From<u8> for TrailerBrakeStrokeAxle1Right2566746622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            6 => Self::SensorError,
            5 => Self::Reserved,
            3 => Self::DraggingBrake,
            2 => Self::Overstroke,
            1 => Self::Nonfunctioning,
            0 => Self::Ok,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TrailerBrakeStrokeAxle1Left2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u8),
}
impl From<u8> for TrailerBrakeStrokeAxle1Left2566746622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            6 => Self::SensorError,
            5 => Self::Reserved,
            3 => Self::DraggingBrake,
            2 => Self::Overstroke,
            1 => Self::Nonfunctioning,
            0 => Self::Ok,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TractorBrakeStrokeAxle5Right2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u8),
}
impl From<u8> for TractorBrakeStrokeAxle5Right2566746622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            6 => Self::SensorError,
            5 => Self::Reserved,
            3 => Self::DraggingBrake,
            2 => Self::Overstroke,
            1 => Self::Nonfunctioning,
            0 => Self::Ok,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TractorBrakeStrokeAxle5Left2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u8),
}
impl From<u8> for TractorBrakeStrokeAxle5Left2566746622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            6 => Self::SensorError,
            5 => Self::Reserved,
            3 => Self::DraggingBrake,
            2 => Self::Overstroke,
            1 => Self::Nonfunctioning,
            0 => Self::Ok,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TractorBrakeStrokeAxle4Right2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u8),
}
impl From<u8> for TractorBrakeStrokeAxle4Right2566746622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            6 => Self::SensorError,
            5 => Self::Reserved,
            3 => Self::DraggingBrake,
            2 => Self::Overstroke,
            1 => Self::Nonfunctioning,
            0 => Self::Ok,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TractorBrakeStrokeAxle4Left2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u8),
}
impl From<u8> for TractorBrakeStrokeAxle4Left2566746622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            6 => Self::SensorError,
            5 => Self::Reserved,
            3 => Self::DraggingBrake,
            2 => Self::Overstroke,
            1 => Self::Nonfunctioning,
            0 => Self::Ok,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TractorBrakeStrokeAxle3Right2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u8),
}
impl From<u8> for TractorBrakeStrokeAxle3Right2566746622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            6 => Self::SensorError,
            5 => Self::Reserved,
            3 => Self::DraggingBrake,
            2 => Self::Overstroke,
            1 => Self::Nonfunctioning,
            0 => Self::Ok,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TractorBrakeStrokeAxle3Left2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u8),
}
impl From<u8> for TractorBrakeStrokeAxle3Left2566746622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            6 => Self::SensorError,
            5 => Self::Reserved,
            3 => Self::DraggingBrake,
            2 => Self::Overstroke,
            1 => Self::Nonfunctioning,
            0 => Self::Ok,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TractorBrakeStrokeAxle2Right2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u8),
}
impl From<u8> for TractorBrakeStrokeAxle2Right2566746622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            6 => Self::SensorError,
            5 => Self::Reserved,
            3 => Self::DraggingBrake,
            2 => Self::Overstroke,
            1 => Self::Nonfunctioning,
            0 => Self::Ok,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TractorBrakeStrokeAxle2Left2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u8),
}
impl From<u8> for TractorBrakeStrokeAxle2Left2566746622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            6 => Self::SensorError,
            5 => Self::Reserved,
            3 => Self::DraggingBrake,
            2 => Self::Overstroke,
            1 => Self::Nonfunctioning,
            0 => Self::Ok,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TractorBrakeStrokeAxle1Right2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u8),
}
impl From<u8> for TractorBrakeStrokeAxle1Right2566746622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            6 => Self::SensorError,
            5 => Self::Reserved,
            3 => Self::DraggingBrake,
            2 => Self::Overstroke,
            1 => Self::Nonfunctioning,
            0 => Self::Ok,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TractorBrakeStrokeAxle1Left2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u8),
}
impl From<u8> for TractorBrakeStrokeAxle1Left2566746622 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            6 => Self::SensorError,
            5 => Self::Reserved,
            3 => Self::DraggingBrake,
            2 => Self::Overstroke,
            1 => Self::Nonfunctioning,
            0 => Self::Ok,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AirCompressorStatus2566827774 {
    NotAvailable,
    ErrorIndicator,
    CompressorActive,
    CompressorNotActive,
    XValue(u8),
}
impl From<u8> for AirCompressorStatus2566827774 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::ErrorIndicator,
            1 => Self::CompressorActive,
            0 => Self::CompressorNotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RqedAccDistanceMode2566803966 {
    NotAvailable,
    ErrorCondition,
    NotDefined,
    RqedAccDistanceMode5,
    RqedAccDistanceMode4,
    RqedAccDistanceMode3,
    RqedAccDistanceMode2,
    RqedAccDistanceMode1,
    XValue(u8),
}
impl From<u8> for RqedAccDistanceMode2566803966 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            6 => Self::ErrorCondition,
            5 => Self::NotDefined,
            4 => Self::RqedAccDistanceMode5,
            3 => Self::RqedAccDistanceMode4,
            2 => Self::RqedAccDistanceMode3,
            1 => Self::RqedAccDistanceMode2,
            0 => Self::RqedAccDistanceMode1,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AccDistanceAlertSignal2432593918 {
    TakeNoAction,
    Reserved,
    AccdasActive,
    AccdasNotActive,
    XValue(u8),
}
impl From<u8> for AccDistanceAlertSignal2432593918 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::TakeNoAction,
            2 => Self::Reserved,
            1 => Self::AccdasActive,
            0 => Self::AccdasNotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AccSystemShutoffWarning2432593918 {
    TakeNoAction,
    Reserved,
    AccssowActive,
    AccssowNotActive,
    XValue(u8),
}
impl From<u8> for AccSystemShutoffWarning2432593918 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::TakeNoAction,
            2 => Self::Reserved,
            1 => Self::AccssowActive,
            0 => Self::AccssowNotActive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AccTargetDetected2432593918 {
    TakeNoAction,
    Reserved,
    TargetDetected,
    NoTargetsDetected,
    XValue(u8),
}
impl From<u8> for AccTargetDetected2432593918 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::TakeNoAction,
            2 => Self::Reserved,
            1 => Self::TargetDetected,
            0 => Self::NoTargetsDetected,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AdptveCruiseCtrlSetDistanceMode2432593918 {
    NotAvailableNotValid,
    ErrorCondition,
    ConventionalCruiseCtrlMode,
    AccDistanceMode5,
    AccDistanceMode4,
    AccDistanceMode3,
    AccDistanceMode2,
    AccDistanceMode1,
    XValue(u8),
}
impl From<u8> for AdptveCruiseCtrlSetDistanceMode2432593918 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailableNotValid,
            6 => Self::ErrorCondition,
            5 => Self::ConventionalCruiseCtrlMode,
            4 => Self::AccDistanceMode5,
            3 => Self::AccDistanceMode4,
            2 => Self::AccDistanceMode3,
            1 => Self::AccDistanceMode2,
            0 => Self::AccDistanceMode1,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum AdaptiveCruiseCtrlMode2432593918 {
    NotAvailableNotValid,
    DsbldErrrCndtnUsdTIndctThtAccIs,
    FinishMode,
    HldMdUsdTIndctThtAccHsLstThPrvs,
    OvertakeMode,
    DstncCtrlActvUsdTIndctThtAccIsO,
    SpeedCtrlActive,
    OffUsdTIndctAccIsEnbldInClbCnfg,
    XValue(u8),
}
impl From<u8> for AdaptiveCruiseCtrlMode2432593918 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailableNotValid,
            6 => Self::DsbldErrrCndtnUsdTIndctThtAccIs,
            5 => Self::FinishMode,
            4 => Self::HldMdUsdTIndctThtAccHsLstThPrvs,
            3 => Self::OvertakeMode,
            2 => Self::DstncCtrlActvUsdTIndctThtAccIsO,
            1 => Self::SpeedCtrlActive,
            0 => Self::OffUsdTIndctAccIsEnbldInClbCnfg,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum ControlByte2565406462 {
    CannotRespond,
    AccessDenied,
    Nack,
    Ack,
    XValue(u8),
}
impl From<u8> for ControlByte2565406462 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::CannotRespond,
            2 => Self::AccessDenied,
            1 => Self::Nack,
            0 => Self::Ack,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum Status2OfDoors2566803198 {
    NotAvailable,
    Error,
    AtLeast1BusDoorEnabled,
    AllBusDoorsAreDisabled,
    XValue(u8),
}
impl From<u8> for Status2OfDoors2566803198 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::AtLeast1BusDoorEnabled,
            0 => Self::AllBusDoorsAreDisabled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RampWheelChairLiftPos2566803198 {
    NotAvailable,
    Error,
    OutsideBus,
    InsideBus,
    XValue(u8),
}
impl From<u8> for RampWheelChairLiftPos2566803198 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::OutsideBus,
            0 => Self::InsideBus,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum PosOfDoors2566803198 {
    NotAvailable,
    Error,
    X1101notDefined,
    AllDoorsClosed,
    ClosingLastDoor,
    AtLeast1DoorIsOpen,
    XValue(u8),
}
impl From<u8> for PosOfDoors2566803198 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            14 => Self::Error,
            3 => Self::X1101notDefined,
            2 => Self::AllDoorsClosed,
            1 => Self::ClosingLastDoor,
            0 => Self::AtLeast1DoorIsOpen,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FifthWheelRollWarningIndicator2565870334 {
    NotAvailable,
    Error,
    LimitExceeded,
    LimitNotExceeded,
    XValue(u8),
}
impl From<u8> for FifthWheelRollWarningIndicator2565870334 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::LimitExceeded,
            0 => Self::LimitNotExceeded,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FifthWheelSliderLockIndicator2566762238 {
    NotAvailable,
    Error,
    Locked,
    NotLocked,
    XValue(u8),
}
impl From<u8> for FifthWheelSliderLockIndicator2566762238 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::Locked,
            0 => Self::NotLocked,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FfthWhlLckCoupleStatusIndicator2566762238 {
    NotAvailable,
    Error,
    SuccessfulCoupleDetected,
    IncmpltBdCplTrckShuldNotBeMoved,
    XValue(u8),
}
impl From<u8> for FfthWhlLckCoupleStatusIndicator2566762238 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::SuccessfulCoupleDetected,
            0 => Self::IncmpltBdCplTrckShuldNotBeMoved,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FfthWhlLckRadyToCoupleIndicator2566762238 {
    NotAvailable,
    Error,
    LockOpenReadyToCouple,
    LockNotOpenNotReadyToCouple,
    XValue(u8),
}
impl From<u8> for FfthWhlLckRadyToCoupleIndicator2566762238 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::LockOpenReadyToCouple,
            0 => Self::LockNotOpenNotReadyToCouple,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum FifthWheelErrorStatus2566762238 {
    NotAvailable,
    KingpinLockOpen,
    KingpinMissingMoreThan5Seconds,
    CouplingTimingError,
    CouplingSequenceErrorKingpin,
    CouplingSequenceError,
    NotUsed,
    KingpinLocksOpenAtStartup,
    LocksClosedNoKingpinAtStartup,
    ImproperCouple,
    XValue(u8),
}
impl From<u8> for FifthWheelErrorStatus2566762238 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            9 => Self::KingpinLockOpen,
            8 => Self::KingpinMissingMoreThan5Seconds,
            7 => Self::CouplingTimingError,
            6 => Self::CouplingSequenceErrorKingpin,
            5 => Self::CouplingSequenceError,
            14 => Self::NotUsed,
            2 => Self::KingpinLocksOpenAtStartup,
            1 => Self::LocksClosedNoKingpinAtStartup,
            0 => Self::ImproperCouple,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum PitchAndRollCompensated2364543998 {
    NotAvailable,
    CompensationOn,
    XValue(u8),
}
impl From<u8> for PitchAndRollCompensated2364543998 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::NotAvailable,
            0 => Self::CompensationOn,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum PitchRateFigureOfMerit2364543998 {
    NotAvailable,
    PtchRtDgrddDtIsSspctDtEnvrnmntl,
    XValue(u8),
}
impl From<u8> for PitchRateFigureOfMerit2364543998 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::NotAvailable,
            0 => Self::PtchRtDgrddDtIsSspctDtEnvrnmntl,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum RollAngleFigureOfMerit2364543998 {
    NotAvailable,
    RllAnglDgrddDtIsSspctDtEnvrnmnt,
    XValue(u8),
}
impl From<u8> for RollAngleFigureOfMerit2364543998 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::NotAvailable,
            0 => Self::RllAnglDgrddDtIsSspctDtEnvrnmnt,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum PitchAngleFigureOfMerit2364543998 {
    NotAvailable,
    PtchAnglDgrddDtIsSspctDtEnvrnmn,
    XValue(u8),
}
impl From<u8> for PitchAngleFigureOfMerit2364543998 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::NotAvailable,
            0 => Self::PtchAnglDgrddDtIsSspctDtEnvrnmn,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransOilLevelMeasurementStatus2566846718 {
    NotAvailable,
    Error,
    ConditionsNotValidOther,
    NotDefined,
    CndtionsNotValidEngSpeedTooHigh,
    CnditionsNotValidEngSpeedTooLow,
    CndtionsNotValidVehicleNotLevel,
    CndtnsNtVldVhclMvngOtptShftSpdT,
    CndtnsNtVldTrnsFluidTempTooHigh,
    CndtnsNtVldTransFluidTempTooLow,
    ConditionsNotValidTransInGear,
    CndtnsNtVldSttlngTmrStllCntngDw,
    CndtnsVldFrTrnsOlLvlMeasurement,
    XValue(u8),
}
impl From<u8> for TransOilLevelMeasurementStatus2566846718 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            14 => Self::Error,
            13 => Self::ConditionsNotValidOther,
            12 => Self::NotDefined,
            8 => Self::CndtionsNotValidEngSpeedTooHigh,
            7 => Self::CnditionsNotValidEngSpeedTooLow,
            6 => Self::CndtionsNotValidVehicleNotLevel,
            5 => Self::CndtnsNtVldVhclMvngOtptShftSpdT,
            4 => Self::CndtnsNtVldTrnsFluidTempTooHigh,
            3 => Self::CndtnsNtVldTransFluidTempTooLow,
            2 => Self::ConditionsNotValidTransInGear,
            1 => Self::CndtnsNtVldSttlngTmrStllCntngDw,
            0 => Self::CndtnsVldFrTrnsOlLvlMeasurement,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum TransOilLevelCountdownTimer2566846718 {
    NotAvailable,
    Error,
    ThirteenMinutes,
    TwelveMinutes,
    ElevenMinutes,
    TenMinutes,
    NineMinutes,
    EightMinutes,
    SevenMinutes,
    SixMinutes,
    FiveMinutes,
    FourMinutes,
    ThreeMinutes,
    TwoMinutes,
    OneMinute,
    LessThan1Minute,
    XValue(u8),
}
impl From<u8> for TransOilLevelCountdownTimer2566846718 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            15 => Self::NotAvailable,
            14 => Self::Error,
            13 => Self::ThirteenMinutes,
            12 => Self::TwelveMinutes,
            11 => Self::ElevenMinutes,
            10 => Self::TenMinutes,
            9 => Self::NineMinutes,
            8 => Self::EightMinutes,
            7 => Self::SevenMinutes,
            6 => Self::SixMinutes,
            5 => Self::FiveMinutes,
            4 => Self::FourMinutes,
            3 => Self::ThreeMinutes,
            2 => Self::TwoMinutes,
            1 => Self::OneMinute,
            0 => Self::LessThan1Minute,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum WrlessCommunicationNetworkType22566760702 {
    SatelliteNetwork,
    WirelessLan2,
    WirelessLan1,
    CellularNetwork2,
    CellularNetwork1,
    XValue(u8),
}
impl From<u8> for WrlessCommunicationNetworkType22566760702 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            4 => Self::SatelliteNetwork,
            3 => Self::WirelessLan2,
            2 => Self::WirelessLan1,
            1 => Self::CellularNetwork2,
            0 => Self::CellularNetwork1,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum NetworkAntennaStatus22566760702 {
    On,
    Off,
    XValue(u8),
}
impl From<u8> for NetworkAntennaStatus22566760702 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum NetworkServiceStatus22566760702 {
    RoamingService,
    LocalService,
    XValue(u8),
}
impl From<u8> for NetworkServiceStatus22566760702 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::RoamingService,
            0 => Self::LocalService,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum NetworkTransceiverStatus22566760702 {
    On,
    Off,
    XValue(u8),
}
impl From<u8> for NetworkTransceiverStatus22566760702 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum WrlessCommunicationNetworkType12566760958 {
    SatelliteNetwork,
    CellularNetwork2,
    CellularNetwork1,
    WirelessLan2,
    WirelessLan1,
    XValue(u8),
}
impl From<u8> for WrlessCommunicationNetworkType12566760958 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            4 => Self::SatelliteNetwork,
            1 => Self::CellularNetwork2,
            0 => Self::CellularNetwork1,
            3 => Self::WirelessLan2,
            2 => Self::WirelessLan1,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum NetworkAntennaStatus12566760958 {
    On,
    Off,
    XValue(u8),
}
impl From<u8> for NetworkAntennaStatus12566760958 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum NetworkServiceStatus12566760958 {
    RoamingService,
    LocalService,
    XValue(u8),
}
impl From<u8> for NetworkServiceStatus12566760958 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::RoamingService,
            0 => Self::LocalService,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum NetworkTransceiverStatus12566760958 {
    On,
    Off,
    XValue(u8),
}
impl From<u8> for NetworkTransceiverStatus12566760958 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            1 => Self::On,
            0 => Self::Off,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum VoltageRegulatorEnabled2633869310 {
    NotAvailable,
    Error,
    RegulatingVoltage,
    NtRegulatingVoltageUnitDisabled,
    XValue(u8),
}
impl From<u8> for VoltageRegulatorEnabled2633869310 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::RegulatingVoltage,
            0 => Self::NtRegulatingVoltageUnitDisabled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum VoltageRegulatorSoftStartState2633869310 {
    NotAvailable,
    Error,
    SoftStartIsActive,
    SoftStartIsInactive,
    XValue(u8),
}
impl From<u8> for VoltageRegulatorSoftStartState2633869310 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::SoftStartIsActive,
            0 => Self::SoftStartIsInactive,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum VltgRgltrUndrfrqncyCmpnstnEnbld2633869310 {
    NotAvailable,
    Error,
    UndrfrquencyCompensationEnabled,
    UndrfrqencyCompensationDisabled,
    XValue(u8),
}
impl From<u8> for VltgRgltrUndrfrqncyCmpnstnEnbld2633869310 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            3 => Self::NotAvailable,
            2 => Self::Error,
            1 => Self::UndrfrquencyCompensationEnabled,
            0 => Self::UndrfrqencyCompensationDisabled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum VltgRgltrVArPwrFctrOprtingMode2633869310 {
    NotAvailable,
    Error,
    Reserved,
    VArRegulationEnabled,
    PowerFactorRegulationEnabled,
    VArPwrFactorRegulationDisabled,
    XValue(u8),
}
impl From<u8> for VltgRgltrVArPwrFctrOprtingMode2633869310 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            6 => Self::Error,
            5 => Self::Reserved,
            2 => Self::VArRegulationEnabled,
            1 => Self::PowerFactorRegulationEnabled,
            0 => Self::VArPwrFactorRegulationDisabled,
            _ => Self::XValue(val),
        }
    }
}
#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq)]
#[repr(u64)]
pub enum VltgRglatorLoadCompensationMode2633869310 {
    NotAvailable,
    Error,
    Reserved,
    IrLineDropCompensationEnabled,
    VoltageDroopCompensationEnabled,
    LoadCompensationDisabled,
    XValue(u8),
}
impl From<u8> for VltgRglatorLoadCompensationMode2633869310 {
    #[allow(dead_code)]
    fn from(val: u8) -> Self {
        match val as u64 {
            7 => Self::NotAvailable,
            6 => Self::Error,
            5 => Self::Reserved,
            2 => Self::IrLineDropCompensationEnabled,
            1 => Self::VoltageDroopCompensationEnabled,
            0 => Self::LoadCompensationDisabled,
            _ => Self::XValue(val),
        }
    }
}
#[derive(Debug, Clone)]
pub enum DecodedFrame {
    #[doc = r" Frame that is not listed in dbc"]
    UnknownFrame(tokio_socketcan::CANFrame),
    Disp1 {
        text_display_index_raw_value: u8,
        text_display_instructions_raw_value: u8,
        text_display_instructions: TextDisplayInstructions2561212158,
    },
    Drc {
        movement_status_of_ramp3_raw_value: u8,
        enable_status_of_ramp3_raw_value: u8,
        retract_status_of_ramp3_raw_value: u8,
        movement_status_of_ramp2_raw_value: u8,
        enable_status_of_ramp2_raw_value: u8,
        retract_status_of_ramp2_raw_value: u8,
        movement_status_of_ramp1_raw_value: u8,
        enable_status_of_ramp1_raw_value: u8,
        retract_status_of_ramp1_raw_value: u8,
        movement_status_of_ramp3: MovementStatusOfRamp32566746366,
        enable_status_of_ramp3: EnableStatusOfRamp32566746366,
        retract_status_of_ramp3: RetractStatusOfRamp32566746366,
        movement_status_of_ramp2: MovementStatusOfRamp22566746366,
        enable_status_of_ramp2: EnableStatusOfRamp22566746366,
        retract_status_of_ramp2: RetractStatusOfRamp22566746366,
        movement_status_of_ramp1: MovementStatusOfRamp12566746366,
        enable_status_of_ramp1: EnableStatusOfRamp12566746366,
        retract_status_of_ramp1: RetractStatusOfRamp12566746366,
    },
    Ec2 {
        max_crank_attempts_per_start_attempt_raw_value: u8,
    },
    Eec7 {
        eng_exhst_gs_rcirculation_valve2_pos_raw_value: f64,
        eng_exhst_gs_recirculation_valve_pos_raw_value: f64,
    },
    Eec8 {
        eng_exhst_gs_rcrculation_valve2_ctrl_raw_value: f64,
    },
    EflP5 {
        eng_intk_vlv_actton_oil_press_for_cyl4_raw_value: f64,
        eng_intk_vlv_actton_oil_press_for_cyl3_raw_value: f64,
        eng_intk_vlv_actton_oil_press_for_cyl2_raw_value: f64,
        eng_intk_vlv_actton_oil_press_for_cyl1_raw_value: f64,
    },
    EflP6 {
        eng_intk_vlv_actton_oil_press_for_cyl8_raw_value: f64,
        eng_intk_vlv_actton_oil_press_for_cyl7_raw_value: f64,
        eng_intk_vlv_actton_oil_press_for_cyl6_raw_value: f64,
        eng_intk_vlv_actton_oil_press_for_cyl5_raw_value: f64,
    },
    EflP7 {
        eng_intk_vlv_acttn_oil_press_for_cyl12_raw_value: f64,
        eng_intk_vlv_acttn_oil_press_for_cyl11_raw_value: f64,
        eng_intk_vlv_acttn_oil_press_for_cyl10_raw_value: f64,
        eng_intk_vlv_actton_oil_press_for_cyl9_raw_value: f64,
    },
    EflP8 {
        eng_intk_vlv_acttn_oil_press_for_cyl16_raw_value: f64,
        eng_intk_vlv_acttn_oil_press_for_cyl15_raw_value: f64,
        eng_intk_vlv_acttn_oil_press_for_cyl14_raw_value: f64,
        eng_intk_vlv_acttn_oil_press_for_cyl13_raw_value: f64,
    },
    EflP9 {
        eng_intk_vlv_acttn_oil_press_for_cyl20_raw_value: f64,
        eng_intk_vlv_acttn_oil_press_for_cyl19_raw_value: f64,
        eng_intk_vlv_acttn_oil_press_for_cyl18_raw_value: f64,
        eng_intk_vlv_acttn_oil_press_for_cyl17_raw_value: f64,
    },
    Egrbv {
        egr_cooler_bypass_actuator_postion_raw_value: f64,
    },
    Esv1 {
        eng_spark_plug4_raw_value: u16,
        eng_spark_plug3_raw_value: u16,
        eng_spark_plug2_raw_value: u16,
        eng_spark_plug1_raw_value: u16,
    },
    Esv2 {
        eng_spark_plug8_raw_value: u16,
        eng_spark_plug7_raw_value: u16,
        eng_spark_plug6_raw_value: u16,
        eng_spark_plug5_raw_value: u16,
    },
    Esv3 {
        eng_spark_plug12_raw_value: u16,
        eng_spark_plug11_raw_value: u16,
        eng_spark_plug10_raw_value: u16,
        eng_spark_plug9_raw_value: u16,
    },
    Esv4 {
        eng_spark_plug16_raw_value: u16,
        eng_spark_plug15_raw_value: u16,
        eng_spark_plug14_raw_value: u16,
        eng_spark_plug13_raw_value: u16,
    },
    Esv5 {
        eng_spark_plug20_raw_value: u16,
        eng_spark_plug19_raw_value: u16,
        eng_spark_plug18_raw_value: u16,
        eng_spark_plug17_raw_value: u16,
    },
    Esv6 {
        eng_spark_plug24_raw_value: u16,
        eng_spark_plug23_raw_value: u16,
        eng_spark_plug22_raw_value: u16,
        eng_spark_plug21_raw_value: u16,
    },
    Flic {
        lane_departure_warning_enable_cmd_raw_value: u8,
        lane_departure_warning_enable_cmd: LaneDepartureWarningEnableCmd2561277694,
    },
    J2012 {
        j2012dtc_occurrence_count_raw_value: u8,
        j2012dtc_status_raw_value: bool,
        number_of_j2012dt_cs_raw_value: u8,
        j2012dtc_status: J2012dtcStatus2633861886,
    },
    Ptc1 {
        prtclt_trp_actv_rgnrtn_inhbtd_dt_vhcl_s_raw_value: u8,
        prtclt_trp_actv_rgnrtn_inhbtd_dt_ot_of_n_raw_value: u8,
        prtclt_trp_actv_rgnrtn_inhbtd_dt_accl_p_raw_value: u8,
        prtclt_trp_actv_rgnrtn_inhbtd_dtpto_ac_raw_value: u8,
        prtclt_trp_actv_rgnrtn_inhbtd_dt_srvc_b_raw_value: u8,
        prtclt_trp_actv_rgnrtn_inhbtd_dt_cltch_raw_value: u8,
        prtclt_trp_actv_rgnrtn_inhbtd_dt_inhbt_raw_value: u8,
        prtclt_trp_actv_rgnrtn_inhbtd_status_raw_value: u8,
        particulate_trap_status_raw_value: u8,
        prtclt_trp_actv_regeneration_status_raw_value: u8,
        prtclt_trp_pssv_regeneration_status_raw_value: u8,
        particulate_trap_lamp_cmd_raw_value: u8,
        prtclt_trp_actv_rgnrtn_inhbtd_dt_vhcl_s: PrtcltTrpActvRgnrtnInhbtdDtVhclS2566749438,
        prtclt_trp_actv_rgnrtn_inhbtd_dt_ot_of_n: PrtcltTrpActvRgnrtnInhbtdDtOtOfN2566749438,
        prtclt_trp_actv_rgnrtn_inhbtd_dt_accl_p: PrtcltTrpActvRgnrtnInhbtdDtAcclP2566749438,
        prtclt_trp_actv_rgnrtn_inhbtd_dtpto_ac: PrtcltTrpActvRgnrtnInhbtdDtptoAc2566749438,
        prtclt_trp_actv_rgnrtn_inhbtd_dt_srvc_b: PrtcltTrpActvRgnrtnInhbtdDtSrvcB2566749438,
        prtclt_trp_actv_rgnrtn_inhbtd_dt_cltch: PrtcltTrpActvRgnrtnInhbtdDtCltch2566749438,
        prtclt_trp_actv_rgnrtn_inhbtd_dt_inhbt: PrtcltTrpActvRgnrtnInhbtdDtInhbt2566749438,
        prtclt_trp_actv_rgnrtn_inhbtd_status: PrtcltTrpActvRgnrtnInhbtdStatus2566749438,
        particulate_trap_status: ParticulateTrapStatus2566749438,
        prtclt_trp_actv_regeneration_status: PrtcltTrpActvRegenerationStatus2566749438,
        prtclt_trp_pssv_regeneration_status: PrtcltTrpPssvRegenerationStatus2566749438,
        particulate_trap_lamp_cmd: ParticulateTrapLampCmd2566749438,
    },
    Sas {
        message_checksum_raw_value: u8,
        message_counter_raw_value: u8,
        steer_angle_sensor_calibrated_raw_value: u8,
        steer_angle_sensor_active_mode_raw_value: u8,
        steer_wheel_angle_range_raw_value: f64,
        steer_wheel_angle_range_counter_type_raw_value: u8,
        steer_wheel_angle_range_counter_raw_value: f64,
        steer_wheel_angle_raw_value: f64,
        steer_angle_sensor_calibrated: SteerAngleSensorCalibrated2565873150,
        steer_angle_sensor_active_mode: SteerAngleSensorActiveMode2565873150,
        steer_wheel_angle_range_counter_type: SteerWheelAngleRangeCounterType2565873150,
    },
    Scr1 {
        cmded_catalyst_reagent_consumption_raw_value: f64,
        avrge_catalyst_reagent_consumption_raw_value: f64,
    },
    Tci {
        transfer_case_status_raw_value: u8,
        transfer_case_status: TransferCaseStatus2566751230,
    },
    Trf2 {
        trans_oil_level_switch_raw_value: u8,
        trans_oil_filter_restriction_switch_raw_value: u8,
        trans_oil_level_switch: TransOilLevelSwitch2566755838,
        trans_oil_filter_restriction_switch: TransOilFilterRestrictionSwitch2566755838,
    },
    Vds2 {
        vehicle_roll_raw_value: f64,
    },
    Lf {
        total_eng_cruise_time_raw_value: f64,
        total_drive_average_load_factor_raw_value: f64,
        trip_drive_average_load_factor_raw_value: f64,
        trip_average_eng_speed_raw_value: f64,
        trip_max_eng_speed_raw_value: f64,
    },
    Ld {
        implement_rear_work_light_raw_value: u8,
        implement_left_forward_work_light_raw_value: u8,
        implement_right_forward_work_light_raw_value: u8,
        implement_left_facing_work_light_raw_value: u8,
        implement_right_facing_work_light_raw_value: u8,
        implement_oem_option1_light_raw_value: u8,
        implement_oem_option2_light_raw_value: u8,
        trctr_front_high_mounted_work_lights_raw_value: u8,
        trctor_front_low_mounted_work_lights_raw_value: u8,
        trctor_side_high_mounted_work_lights_raw_value: u8,
        tractor_side_low_mounted_work_lights_raw_value: u8,
        trctor_rear_high_mounted_work_lights_raw_value: u8,
        tractor_rear_low_mounted_work_lights_raw_value: u8,
        trctr_underside_mounted_work_lights_raw_value: u8,
        rear_fog_lights_raw_value: u8,
        tractor_marker_light_raw_value: u8,
        implement_marker_light_raw_value: u8,
        tractor_clearance_light_raw_value: u8,
        implement_clearance_light_raw_value: u8,
        left_stop_light_raw_value: u8,
        right_stop_light_raw_value: u8,
        center_stop_light_raw_value: u8,
        back_up_light_and_alarm_horn_raw_value: u8,
        left_turn_signal_lights_raw_value: u8,
        right_turn_signal_lights_raw_value: u8,
        rotating_beacon_light_raw_value: u8,
        tractor_front_fog_lights_raw_value: u8,
        high_beam_head_light_data_raw_value: u8,
        low_beam_head_light_data_raw_value: u8,
        alt_beam_head_light_data_raw_value: u8,
        running_light_raw_value: u8,
        implement_rear_work_light: ImplementRearWorkLight2566799614,
        implement_left_forward_work_light: ImplementLeftForwardWorkLight2566799614,
        implement_right_forward_work_light: ImplementRightForwardWorkLight2566799614,
        implement_left_facing_work_light: ImplementLeftFacingWorkLight2566799614,
        implement_right_facing_work_light: ImplementRightFacingWorkLight2566799614,
        implement_oem_option1_light: ImplementOemOption1Light2566799614,
        implement_oem_option2_light: ImplementOemOption2Light2566799614,
        trctr_front_high_mounted_work_lights: TrctrFrontHighMountedWorkLights2566799614,
        trctor_front_low_mounted_work_lights: TrctorFrontLowMountedWorkLights2566799614,
        trctor_side_high_mounted_work_lights: TrctorSideHighMountedWorkLights2566799614,
        tractor_side_low_mounted_work_lights: TractorSideLowMountedWorkLights2566799614,
        trctor_rear_high_mounted_work_lights: TrctorRearHighMountedWorkLights2566799614,
        tractor_rear_low_mounted_work_lights: TractorRearLowMountedWorkLights2566799614,
        trctr_underside_mounted_work_lights: TrctrUndersideMountedWorkLights2566799614,
        rear_fog_lights: RearFogLights2566799614,
        tractor_marker_light: TractorMarkerLight2566799614,
        implement_marker_light: ImplementMarkerLight2566799614,
        tractor_clearance_light: TractorClearanceLight2566799614,
        implement_clearance_light: ImplementClearanceLight2566799614,
        left_stop_light: LeftStopLight2566799614,
        right_stop_light: RightStopLight2566799614,
        center_stop_light: CenterStopLight2566799614,
        back_up_light_and_alarm_horn: BackUpLightAndAlarmHorn2566799614,
        left_turn_signal_lights: LeftTurnSignalLights2566799614,
        right_turn_signal_lights: RightTurnSignalLights2566799614,
        rotating_beacon_light: RotatingBeaconLight2566799614,
        tractor_front_fog_lights: TractorFrontFogLights2566799614,
        high_beam_head_light_data: HighBeamHeadLightData2566799614,
        low_beam_head_light_data: LowBeamHeadLightData2566799614,
        alt_beam_head_light_data: AltBeamHeadLightData2566799614,
        running_light: RunningLight2566799614,
    },
    Lc {
        implement_rear_work_light_cmd_raw_value: u8,
        implment_left_forward_work_light_cmd_raw_value: u8,
        implmnt_right_forward_work_light_cmd_raw_value: u8,
        lighting_data_rq_cmd_raw_value: u8,
        implement_left_facing_work_light_cmd_raw_value: u8,
        implment_right_facing_work_light_cmd_raw_value: u8,
        implement_oem_option1_light_cmd_raw_value: u8,
        implement_oem_option2_light_cmd_raw_value: u8,
        trctr_frnt_hgh_munted_work_lights_cmd_raw_value: u8,
        trctr_frnt_lw_mounted_work_lights_cmd_raw_value: u8,
        trctr_sd_high_mounted_work_lights_cmd_raw_value: u8,
        trctr_sde_low_mounted_work_lights_cmd_raw_value: u8,
        trctr_rr_high_mounted_work_lights_cmd_raw_value: u8,
        trctr_rar_low_mounted_work_lights_cmd_raw_value: u8,
        trctr_undrsd_mounted_work_lights_cmd_raw_value: u8,
        rear_fog_light_cmd_raw_value: u8,
        tractor_marker_light_cmd_raw_value: u8,
        implement_marker_light_cmd_raw_value: u8,
        tractor_clearance_light_cmd_raw_value: u8,
        implement_clearance_light_cmd_raw_value: u8,
        left_stop_light_cmd_raw_value: u8,
        right_stop_light_cmd_raw_value: u8,
        center_stop_light_cmd_raw_value: u8,
        back_up_light_and_alarm_horn_cmd_raw_value: u8,
        left_turn_signal_lights_cmd_raw_value: u8,
        right_turn_signal_lights_cmd_raw_value: u8,
        rotating_beacon_light_cmd_raw_value: u8,
        tractor_front_fog_lights_cmd_raw_value: u8,
        high_beam_head_light_cmd_raw_value: u8,
        low_beam_head_light_cmd_raw_value: u8,
        alt_beam_head_light_cmd_raw_value: u8,
        running_light_cmd_raw_value: u8,
        implement_rear_work_light_cmd: ImplementRearWorkLightCmd2365473278,
        implment_left_forward_work_light_cmd: ImplmentLeftForwardWorkLightCmd2365473278,
        implmnt_right_forward_work_light_cmd: ImplmntRightForwardWorkLightCmd2365473278,
        lighting_data_rq_cmd: LightingDataRqCmd2365473278,
        implement_left_facing_work_light_cmd: ImplementLeftFacingWorkLightCmd2365473278,
        implment_right_facing_work_light_cmd: ImplmentRightFacingWorkLightCmd2365473278,
        implement_oem_option1_light_cmd: ImplementOemOption1LightCmd2365473278,
        implement_oem_option2_light_cmd: ImplementOemOption2LightCmd2365473278,
        trctr_frnt_hgh_munted_work_lights_cmd: TrctrFrntHghMuntedWorkLightsCmd2365473278,
        trctr_frnt_lw_mounted_work_lights_cmd: TrctrFrntLwMountedWorkLightsCmd2365473278,
        trctr_sd_high_mounted_work_lights_cmd: TrctrSdHighMountedWorkLightsCmd2365473278,
        trctr_sde_low_mounted_work_lights_cmd: TrctrSdeLowMountedWorkLightsCmd2365473278,
        trctr_rr_high_mounted_work_lights_cmd: TrctrRrHighMountedWorkLightsCmd2365473278,
        trctr_rar_low_mounted_work_lights_cmd: TrctrRarLowMountedWorkLightsCmd2365473278,
        trctr_undrsd_mounted_work_lights_cmd: TrctrUndrsdMountedWorkLightsCmd2365473278,
        rear_fog_light_cmd: RearFogLightCmd2365473278,
        tractor_marker_light_cmd: TractorMarkerLightCmd2365473278,
        implement_marker_light_cmd: ImplementMarkerLightCmd2365473278,
        tractor_clearance_light_cmd: TractorClearanceLightCmd2365473278,
        implement_clearance_light_cmd: ImplementClearanceLightCmd2365473278,
        left_stop_light_cmd: LeftStopLightCmd2365473278,
        right_stop_light_cmd: RightStopLightCmd2365473278,
        center_stop_light_cmd: CenterStopLightCmd2365473278,
        back_up_light_and_alarm_horn_cmd: BackUpLightAndAlarmHornCmd2365473278,
        left_turn_signal_lights_cmd: LeftTurnSignalLightsCmd2365473278,
        right_turn_signal_lights_cmd: RightTurnSignalLightsCmd2365473278,
        rotating_beacon_light_cmd: RotatingBeaconLightCmd2365473278,
        tractor_front_fog_lights_cmd: TractorFrontFogLightsCmd2365473278,
        high_beam_head_light_cmd: HighBeamHeadLightCmd2365473278,
        low_beam_head_light_cmd: LowBeamHeadLightCmd2365473278,
        alt_beam_head_light_cmd: AltBeamHeadLightCmd2365473278,
        running_light_cmd: RunningLightCmd2365473278,
    },
    Lbc {
        blade_ctrl_mode_raw_value: u8,
        blade_duration_and_direction_raw_value: f64,
        blade_ctrl_mode: BladeCtrlMode2365485822,
    },
    It6 {
        eng_actual_ignt_timing_raw_value: f64,
        eng_desired_ignt_timing3_raw_value: f64,
        eng_desired_ignt_timing2_raw_value: f64,
        eng_desired_ignt_timing1_raw_value: f64,
    },
    It5 {
        eng_cyl20_ignt_timing_raw_value: f64,
        eng_cyl19_ignt_timing_raw_value: f64,
        eng_cyl18_ignt_timing_raw_value: f64,
        eng_cyl17_ignt_timing_raw_value: f64,
    },
    It4 {
        eng_cyl16_ignt_timing_raw_value: f64,
        eng_cyl15_ignt_timing_raw_value: f64,
        eng_cyl14_ignt_timing_raw_value: f64,
        eng_cyl13_ignt_timing_raw_value: f64,
    },
    It3 {
        eng_cyl12_ignt_timing_raw_value: f64,
        eng_cyl11_ignt_timing_raw_value: f64,
        eng_cyl10_ignt_timing_raw_value: f64,
        eng_cyl9_ignt_timing_raw_value: f64,
    },
    It2 {
        eng_cyl8_ignt_timing_raw_value: f64,
        eng_cyl7_ignt_timing_raw_value: f64,
        eng_cyl6_ignt_timing_raw_value: f64,
        eng_cyl5_ignt_timing_raw_value: f64,
    },
    It1 {
        eng_cyl4_ignt_timing_raw_value: f64,
        eng_cyl3_ignt_timing_raw_value: f64,
        eng_cyl2_ignt_timing_raw_value: f64,
        eng_cyl1_ignt_timing_raw_value: f64,
    },
    Iso3 {
        eng_cyl20_ignt_trans_second_output_raw_value: f64,
        eng_cyl19_ignt_trans_second_output_raw_value: f64,
        eng_cyl18_ignt_trans_second_output_raw_value: f64,
        eng_cyl17_ignt_trans_second_output_raw_value: f64,
    },
    Iso2 {
        eng_cyl16_ignt_trans_second_output_raw_value: f64,
        eng_cyl15_ignt_trans_second_output_raw_value: f64,
        eng_cyl14_ignt_trans_second_output_raw_value: f64,
        eng_cyl13_ignt_trans_second_output_raw_value: f64,
        eng_cyl12_ignt_trans_second_output_raw_value: f64,
        eng_cyl11_ignt_trans_second_output_raw_value: f64,
        eng_cyl10_ignt_trans_second_output_raw_value: f64,
        eng_cyl9_ignt_trans_second_output_raw_value: f64,
    },
    Iso1 {
        eng_cyl8_ignt_trans_second_output_raw_value: f64,
        eng_cyl7_ignt_trans_second_output_raw_value: f64,
        eng_cyl6_ignt_trans_second_output_raw_value: f64,
        eng_cyl5_ignt_trans_second_output_raw_value: f64,
        eng_cyl4_ignt_trans_second_output_raw_value: f64,
        eng_cyl3_ignt_trans_second_output_raw_value: f64,
        eng_cyl2_ignt_trans_second_output_raw_value: f64,
        eng_cyl1_ignt_trans_second_output_raw_value: f64,
    },
    Iscs {
        eng_oprtr_prmry_intrmdt_spd_slct_stte_raw_value: u8,
        eng_oprtr_prmry_intrmdt_spd_slct_stte: EngOprtrPrmryIntrmdtSpdSlctStte2566768894,
    },
    Isc {
        eng_oprtr_prmry_intrmdt_speed_select_raw_value: u8,
        eng_oprtr_prmry_intrmdt_speed_select: EngOprtrPrmryIntrmdtSpeedSelect2566769406,
    },
    Io {
        eng_total_idle_hours_raw_value: f64,
        eng_total_idle_fuel_used_raw_value: f64,
    },
    Imt2 {
        eng_intake_manifold6_temp_raw_value: f64,
        eng_intake_manifold5_temp_raw_value: f64,
        eng_intake_manifold4_temp_raw_value: f64,
        eng_intake_manifold3_temp_raw_value: f64,
        eng_intake_manifold2_temp_raw_value: f64,
    },
    Imt1 {
        eng_turbo4_boost_press_raw_value: f64,
        eng_turbo3_boost_press_raw_value: f64,
        eng_turbo2_boost_press_raw_value: f64,
        eng_turbo1_boost_press_raw_value: f64,
    },
    Ic2 {
        eng_air_filter4_diff_press_raw_value: f64,
        eng_air_filter3_diff_press_raw_value: f64,
        eng_air_filter2_diff_press_raw_value: f64,
        eng_intake_manifold2_press_raw_value: f64,
        eng_intake_manifold1_abs_press_raw_value: f64,
    },
    Ic1 {
        eng_coolant_filter_diff_press_raw_value: f64,
        eng_exhaust_gas_temp_raw_value: f64,
        eng_air_filter1_diff_press_raw_value: f64,
        eng_air_inlet_press_raw_value: f64,
        eng_intake_manifold1_temp_raw_value: f64,
        eng_turbo_boost_press_raw_value: f64,
        eng_particulate_trap_inlet_press_raw_value: f64,
    },
    Htr {
        cab_heating_zone_raw_value: u8,
        eng_heating_zone_raw_value: u8,
        cab_ventilation_raw_value: u8,
        auxilary_heater_water_pump_status_raw_value: u8,
        aux_heater_mode_raw_value: u8,
        aux_heater_output_power_percent_raw_value: f64,
        aux_heater_input_air_temp_raw_value: f64,
        aux_heater_output_coolant_temp_raw_value: f64,
        cab_heating_zone: CabHeatingZone2566811134,
        eng_heating_zone: EngHeatingZone2566811134,
        cab_ventilation: CabVentilation2566811134,
        auxilary_heater_water_pump_status: AuxilaryHeaterWaterPumpStatus2566811134,
        aux_heater_mode: AuxHeaterMode2566811134,
    },
    Hrw {
        rear_axle_right_wheel_speed_raw_value: f64,
        rear_axle_left_wheel_speed_raw_value: f64,
        front_axle_right_wheel_speed_raw_value: f64,
        front_axle_left_wheel_speed_raw_value: f64,
    },
    Hpg {
        fire_apparatus_pump_engagement_raw_value: u8,
        eng_hyd_press_governor_switch_raw_value: u8,
        eng_hyd_prss_governor_mode_indicator_raw_value: u8,
        hyd_press_raw_value: f64,
        fire_apparatus_pump_engagement: FireApparatusPumpEngagement2565867774,
        eng_hyd_press_governor_switch: EngHydPressGovernorSwitch2565867774,
        eng_hyd_prss_governor_mode_indicator: EngHydPrssGovernorModeIndicator2565867774,
    },
    Hours {
        eng_total_revolutions_raw_value: f64,
        eng_total_hours_of_operation_raw_value: f64,
    },
    Hbs {
        hyd_brake_fluid_level_switch_raw_value: u8,
        hyd_brake_system_audible_warning_cmd_raw_value: u8,
        hyd_brke_press_supply_state_circuit2_raw_value: u8,
        hyd_brke_press_supply_state_circuit1_raw_value: u8,
        hyd_brk_press_warning_state_circuit2_raw_value: u8,
        hyd_brk_press_warning_state_circuit1_raw_value: u8,
        hyd_brake_press_circuit2_raw_value: f64,
        hyd_brake_press_circuit1_raw_value: f64,
        hyd_brake_fluid_level_switch: HydBrakeFluidLevelSwitch2365449982,
        hyd_brake_system_audible_warning_cmd: HydBrakeSystemAudibleWarningCmd2365449982,
        hyd_brke_press_supply_state_circuit2: HydBrkePressSupplyStateCircuit22365449982,
        hyd_brke_press_supply_state_circuit1: HydBrkePressSupplyStateCircuit12365449982,
        hyd_brk_press_warning_state_circuit2: HydBrkPressWarningStateCircuit22365449982,
        hyd_brk_press_warning_state_circuit1: HydBrkPressWarningStateCircuit12365449982,
    },
    Gtfi {
        trip_pto_moving_fuel_used_raw_value: f64,
        trip_drive_fuel_used_raw_value: f64,
    },
    Gfp {
        eng_fuel_valve1_outlet_abs_press_raw_value: f64,
        eng_air_to_fuel_diff_press_raw_value: f64,
        eng_fuel_valve_diff_press_raw_value: f64,
        eng_fuel_valve_inlet_abs_press_raw_value: f64,
    },
    Gfi2 {
        eng_fuel_flow_rate2_raw_value: f64,
        eng_fuel_flow_rate1_raw_value: f64,
        eng_rqed_fuel_valve2_pos_raw_value: f64,
        eng_rqed_fuel_valve1_pos_raw_value: f64,
        eng_fuel_valve2_pos_raw_value: f64,
        eng_fuel_valve1_pos_raw_value: f64,
    },
    Gfi1 {
        eng_fuel_specific_gravity_raw_value: f64,
        trip_average_fuel_rate_raw_value: f64,
        total_eng_pto_fuel_used_raw_value: f64,
    },
    Gfd {
        specific_heat_ratio_raw_value: f64,
    },
    Gfc {
        total_fuel_used_raw_value: f64,
        trip_fuel_raw_value: f64,
    },
    Sep2 {
        sensor_supply_voltage6_raw_value: f64,
        sensor_supply_voltage5_raw_value: f64,
    },
    Sep1 {
        sensor_supply_voltage4_raw_value: f64,
        sensor_supply_voltage3_raw_value: f64,
        sensor_supply_voltage2_raw_value: f64,
        sensor_supply_voltage1_raw_value: f64,
    },
    Ptode {
        enggmnt_sttus_trans_input_shaft_pto1_raw_value: u8,
        enggmnt_sttus_trans_input_shaft_pto2_raw_value: u8,
        enggmnt_sttus_trans_output_shaft_pto_raw_value: u8,
        enggmnt_stts_trnsfr_cs_otpt_shaft_pto_raw_value: u8,
        enggmnt_cnsnt_trans_input_shaft_pto1_raw_value: u8,
        enggmnt_cnsnt_trans_input_shaft_pto2_raw_value: u8,
        enggmnt_cnsnt_trans_output_shaft_pto_raw_value: u8,
        enggmnt_cnsnt_trnsfr_cs_otpt_shft_pto_raw_value: u8,
        enable_switch_trans_input_shaft_pto1_raw_value: u8,
        enable_switch_trans_input_shaft_pto2_raw_value: u8,
        enable_switch_trans_output_shaft_pto_raw_value: u8,
        enbl_swtch_trnsfr_cs_output_shaft_pto_raw_value: u8,
        enggmnt_sttus_trans_input_shaft_pto1: EnggmntSttusTransInputShaftPto12566759678,
        enggmnt_sttus_trans_input_shaft_pto2: EnggmntSttusTransInputShaftPto22566759678,
        enggmnt_sttus_trans_output_shaft_pto: EnggmntSttusTransOutputShaftPto2566759678,
        enggmnt_stts_trnsfr_cs_otpt_shaft_pto: EnggmntSttsTrnsfrCsOtptShaftPto2566759678,
        enggmnt_cnsnt_trans_input_shaft_pto1: EnggmntCnsntTransInputShaftPto12566759678,
        enggmnt_cnsnt_trans_input_shaft_pto2: EnggmntCnsntTransInputShaftPto22566759678,
        enggmnt_cnsnt_trans_output_shaft_pto: EnggmntCnsntTransOutputShaftPto2566759678,
        enggmnt_cnsnt_trnsfr_cs_otpt_shft_pto: EnggmntCnsntTrnsfrCsOtptShftPto2566759678,
        enable_switch_trans_input_shaft_pto1: EnableSwitchTransInputShaftPto12566759678,
        enable_switch_trans_input_shaft_pto2: EnableSwitchTransInputShaftPto22566759678,
        enable_switch_trans_output_shaft_pto: EnableSwitchTransOutputShaftPto2566759678,
        enbl_swtch_trnsfr_cs_output_shaft_pto: EnblSwtchTrnsfrCsOutputShaftPto2566759678,
    },
    Gfi3 {
        eng_fuel_valve2_outlet_abs_press_raw_value: f64,
        eng_fuel_temp2_raw_value: f64,
        eng_gas_mass_flow_rate2_raw_value: f64,
        eng_fuel_valve2_inlet_abs_press_raw_value: f64,
    },
    EflP4 {
        eng_centrifugal_oil_filter_speed_raw_value: f64,
        eng_coolant_pump_diff_press_raw_value: f64,
        eng_charge_air_cooler2_inlet_press_raw_value: f64,
        eng_charge_air_cooler1_inlet_press_raw_value: f64,
        eng_intercooler_coolant_level_raw_value: f64,
        eng_charge_air_cooler_outlet_press_raw_value: f64,
        eng_aftercooler_coolant_level_raw_value: f64,
    },
    Eec6 {
        eng_vrable_geometry_turbo_actuator1_raw_value: f64,
        eng_trb_cmprssor_bypass_actuator_pos_raw_value: f64,
        eng_turbo_compressor_ctrl_raw_value: f64,
        eng_turbo_compressor_ctrl: EngTurboCompressorCtrl2432541694,
    },
    Dc2 {
        enable_status_of_door10_raw_value: u8,
        open_status_of_door10_raw_value: u8,
        lock_status_of_door10_raw_value: u8,
        enable_status_of_door9_raw_value: u8,
        open_status_of_door9_raw_value: u8,
        lock_status_of_door9_raw_value: u8,
        enable_status_of_door8_raw_value: u8,
        open_status_of_door8_raw_value: u8,
        lock_status_of_door8_raw_value: u8,
        enable_status_of_door7_raw_value: u8,
        open_status_of_door7_raw_value: u8,
        lock_status_of_door7_raw_value: u8,
        enable_status_of_door6_raw_value: u8,
        open_status_of_door6_raw_value: u8,
        lock_status_of_door6_raw_value: u8,
        enable_status_of_door5_raw_value: u8,
        open_status_of_door5_raw_value: u8,
        lock_status_of_door5_raw_value: u8,
        enable_status_of_door4_raw_value: u8,
        open_status_of_door4_raw_value: u8,
        lock_status_of_door4_raw_value: u8,
        enable_status_of_door3_raw_value: u8,
        open_status_of_door3_raw_value: u8,
        lock_status_of_door3_raw_value: u8,
        enable_status_of_door2_raw_value: u8,
        open_status_of_door2_raw_value: u8,
        lock_status_of_door2_raw_value: u8,
        enable_status_of_door1_raw_value: u8,
        open_status_of_door1_raw_value: u8,
        lock_status_of_door1_raw_value: u8,
        enable_status_of_door10: EnableStatusOfDoor102566759934,
        open_status_of_door10: OpenStatusOfDoor102566759934,
        lock_status_of_door10: LockStatusOfDoor102566759934,
        enable_status_of_door9: EnableStatusOfDoor92566759934,
        open_status_of_door9: OpenStatusOfDoor92566759934,
        lock_status_of_door9: LockStatusOfDoor92566759934,
        enable_status_of_door8: EnableStatusOfDoor82566759934,
        open_status_of_door8: OpenStatusOfDoor82566759934,
        lock_status_of_door8: LockStatusOfDoor82566759934,
        enable_status_of_door7: EnableStatusOfDoor72566759934,
        open_status_of_door7: OpenStatusOfDoor72566759934,
        lock_status_of_door7: LockStatusOfDoor72566759934,
        enable_status_of_door6: EnableStatusOfDoor62566759934,
        open_status_of_door6: OpenStatusOfDoor62566759934,
        lock_status_of_door6: LockStatusOfDoor62566759934,
        enable_status_of_door5: EnableStatusOfDoor52566759934,
        open_status_of_door5: OpenStatusOfDoor52566759934,
        lock_status_of_door5: LockStatusOfDoor52566759934,
        enable_status_of_door4: EnableStatusOfDoor42566759934,
        open_status_of_door4: OpenStatusOfDoor42566759934,
        lock_status_of_door4: LockStatusOfDoor42566759934,
        enable_status_of_door3: EnableStatusOfDoor32566759934,
        open_status_of_door3: OpenStatusOfDoor32566759934,
        lock_status_of_door3: LockStatusOfDoor32566759934,
        enable_status_of_door2: EnableStatusOfDoor22566759934,
        open_status_of_door2: OpenStatusOfDoor22566759934,
        lock_status_of_door2: LockStatusOfDoor22566759934,
        enable_status_of_door1: EnableStatusOfDoor12566759934,
        open_status_of_door1: OpenStatusOfDoor12566759934,
        lock_status_of_door1: LockStatusOfDoor12566759934,
    },
    Cri1 {
        catalyst_reagent_type_raw_value: u8,
        ctlyst_rgnt_prprtes_preliminary_fmi_raw_value: u8,
        ctlyst_ragent_temp2_preliminary_fmi_raw_value: u8,
        catalyst_reagent_conductivity_raw_value: f64,
        catalyst_reagent_concentration_raw_value: f64,
        catalyst_reagent_temp2_raw_value: f64,
        catalyst_reagent_type: CatalystReagentType2566757374,
    },
    Ahi2 {
        aftr_trtmnt2_ttal_regeneration_time_raw_value: u32,
        after_treatment2_total_fuel_used_raw_value: f64,
    },
    Afc2 {
        aftrtratment2_fuel_enable_actuator_raw_value: u8,
        aftrtratment2_regeneration_status_raw_value: u8,
        aftertreatment2_ignt_raw_value: u8,
        aftertreatment2_fuel_press_ctrl_raw_value: f64,
        aftertreatment2_fuel_rate_raw_value: f64,
        aftertreatment2_fuel_press_raw_value: f64,
        aftrtratment2_fuel_enable_actuator: Aftrtratment2FuelEnableActuator2566758654,
        aftrtratment2_regeneration_status: Aftrtratment2RegenerationStatus2566758654,
        aftertreatment2_ignt: Aftertreatment2Ignt2566758654,
    },
    Afc1 {
        aftrtratment1_fuel_enable_actuator_raw_value: u8,
        aftrtratment1_regeneration_status_raw_value: u8,
        aftertreatment1_ignt_raw_value: u8,
        aftertreatment1_fuel_press_ctrl_raw_value: f64,
        aftertreatment1_fuel_rate_raw_value: f64,
        aftertreatment1_fuel_press_raw_value: f64,
        aftrtratment1_fuel_enable_actuator: Aftrtratment1FuelEnableActuator2566758910,
        aftrtratment1_regeneration_status: Aftrtratment1RegenerationStatus2566758910,
        aftertreatment1_ignt: Aftertreatment1Ignt2566758910,
    },
    Aac2 {
        aftrtreatment2_air_enable_actuator_raw_value: u8,
        aftertreatment2_purge_air_actuator_raw_value: u8,
        aftrtrtmnt2_atmzation_air_actuator_raw_value: u8,
        aftertreatment2_air_system_relay_raw_value: u8,
        aftrtrtment2_air_press_actuator_pos_raw_value: f64,
        aftertreatment2_air_press_ctrl_raw_value: f64,
        aftertreatment2_purge_air_press_raw_value: f64,
        aftertreatment2_supply_air_press_raw_value: f64,
        aftrtreatment2_air_enable_actuator: Aftrtreatment2AirEnableActuator2566758142,
        aftertreatment2_purge_air_actuator: Aftertreatment2PurgeAirActuator2566758142,
        aftrtrtmnt2_atmzation_air_actuator: Aftrtrtmnt2AtmzationAirActuator2566758142,
        aftertreatment2_air_system_relay: Aftertreatment2AirSystemRelay2566758142,
    },
    Aac1 {
        aftrtreatment1_air_enable_actuator_raw_value: u8,
        aftertreatment1_purge_air_actuator_raw_value: u8,
        aftrtrtmnt1_atmzation_air_actuator_raw_value: u8,
        aftertreatment1_air_system_relay_raw_value: u8,
        aftrtrtment1_air_press_actuator_pos_raw_value: f64,
        aftertreatment1_air_press_ctrl_raw_value: f64,
        aftertreatment1_purge_air_press_raw_value: f64,
        aftertreatment1_supply_air_press_raw_value: f64,
        aftrtreatment1_air_enable_actuator: Aftrtreatment1AirEnableActuator2566758398,
        aftertreatment1_purge_air_actuator: Aftertreatment1PurgeAirActuator2566758398,
        aftrtrtmnt1_atmzation_air_actuator: Aftrtrtmnt1AtmzationAirActuator2566758398,
        aftertreatment1_air_system_relay: Aftertreatment1AirSystemRelay2566758398,
    },
    Ahi1 {
        aftr_trtmnt1_ttal_regeneration_time_raw_value: u32,
        after_treatment1_total_fuel_used_raw_value: f64,
    },
    Rgaaq {
        rqd_gnrtr_avrg_lne_line_acrms_voltage_raw_value: f64,
    },
    Tfac {
        eng_throttle_actuator2_ctrl_cmd_raw_value: f64,
        eng_throttle_actuator1_ctrl_cmd_raw_value: f64,
        eng_fuel_actuator2_ctrl_cmd_raw_value: f64,
        eng_fuel_actuator1_ctrl_cmd_raw_value: f64,
    },
    Kl3 {
        eng_cyl24_knock_level_raw_value: u8,
        eng_cyl23_knock_level_raw_value: u8,
        eng_cyl22_knock_level_raw_value: u8,
        eng_cyl21_knock_level_raw_value: u8,
        eng_cyl20_knock_level_raw_value: u8,
        eng_cyl19_knock_level_raw_value: u8,
        eng_cyl18_knock_level_raw_value: u8,
        eng_cyl17_knock_level_raw_value: u8,
    },
    Kl2 {
        eng_cyl15_knock_level_raw_value: u8,
        eng_cyl14_knock_level_raw_value: u8,
        eng_cyl13_knock_level_raw_value: u8,
        eng_cyl12_knock_level_raw_value: u8,
        eng_cyl11_knock_level_raw_value: u8,
        eng_cyl10_knock_level_raw_value: u8,
        eng_cyl9_knock_level_raw_value: u8,
        eng_cyl16_knock_level_raw_value: u8,
    },
    Kl1 {
        eng_cyl8_knock_level_raw_value: u8,
        eng_cyl7_knock_level_raw_value: u8,
        eng_cyl6_knock_level_raw_value: u8,
        eng_cyl5_knock_level_raw_value: u8,
        eng_cyl4_knock_level_raw_value: u8,
        eng_cyl3_knock_level_raw_value: u8,
        eng_cyl2_knock_level_raw_value: u8,
        eng_cyl1_knock_level_raw_value: u8,
    },
    Ccs {
        eng_cyl9_combustion_status_raw_value: u8,
        eng_cyl8_combustion_status_raw_value: u8,
        eng_cyl7_combustion_status_raw_value: u8,
        eng_cyl6_combustion_status_raw_value: u8,
        eng_cyl5_combustion_status_raw_value: u8,
        eng_cyl4_combustion_status_raw_value: u8,
        eng_cyl3_combustion_status_raw_value: u8,
        eng_cyl2_combustion_status_raw_value: u8,
        eng_cyl24_combustion_status_raw_value: u8,
        eng_cyl23_combustion_status_raw_value: u8,
        eng_cyl22_combustion_status_raw_value: u8,
        eng_cyl21_combustion_status_raw_value: u8,
        eng_cyl20_combustion_status_raw_value: u8,
        eng_cyl1_combustion_status_raw_value: u8,
        eng_cyl19_combustion_status_raw_value: u8,
        eng_cyl18_combustion_status_raw_value: u8,
        eng_cyl17_combustion_status_raw_value: u8,
        eng_cyl16_combustion_status_raw_value: u8,
        eng_cyl15_combustion_status_raw_value: u8,
        eng_cyl14_combustion_status_raw_value: u8,
        eng_cyl13_combustion_status_raw_value: u8,
        eng_cyl12_combustion_status_raw_value: u8,
        eng_cyl11_combustion_status_raw_value: u8,
        eng_cyl10_combustion_status_raw_value: u8,
        eng_cyl9_combustion_status: EngCyl9CombustionStatus2364544766,
        eng_cyl8_combustion_status: EngCyl8CombustionStatus2364544766,
        eng_cyl7_combustion_status: EngCyl7CombustionStatus2364544766,
        eng_cyl6_combustion_status: EngCyl6CombustionStatus2364544766,
        eng_cyl5_combustion_status: EngCyl5CombustionStatus2364544766,
        eng_cyl4_combustion_status: EngCyl4CombustionStatus2364544766,
        eng_cyl3_combustion_status: EngCyl3CombustionStatus2364544766,
        eng_cyl2_combustion_status: EngCyl2CombustionStatus2364544766,
        eng_cyl24_combustion_status: EngCyl24CombustionStatus2364544766,
        eng_cyl23_combustion_status: EngCyl23CombustionStatus2364544766,
        eng_cyl22_combustion_status: EngCyl22CombustionStatus2364544766,
        eng_cyl21_combustion_status: EngCyl21CombustionStatus2364544766,
        eng_cyl20_combustion_status: EngCyl20CombustionStatus2364544766,
        eng_cyl1_combustion_status: EngCyl1CombustionStatus2364544766,
        eng_cyl19_combustion_status: EngCyl19CombustionStatus2364544766,
        eng_cyl18_combustion_status: EngCyl18CombustionStatus2364544766,
        eng_cyl17_combustion_status: EngCyl17CombustionStatus2364544766,
        eng_cyl16_combustion_status: EngCyl16CombustionStatus2364544766,
        eng_cyl15_combustion_status: EngCyl15CombustionStatus2364544766,
        eng_cyl14_combustion_status: EngCyl14CombustionStatus2364544766,
        eng_cyl13_combustion_status: EngCyl13CombustionStatus2364544766,
        eng_cyl12_combustion_status: EngCyl12CombustionStatus2364544766,
        eng_cyl11_combustion_status: EngCyl11CombustionStatus2364544766,
        eng_cyl10_combustion_status: EngCyl10CombustionStatus2364544766,
    },
    Rgtarp {
        rq_gen_overall_power_factor_lagging_raw_value: u8,
        rq_generator_overall_power_factor_raw_value: f64,
        rq_generator_total_ac_reactive_power_raw_value: f64,
        rq_gen_overall_power_factor_lagging: RqGenOverallPowerFactorLagging2364544510,
    },
    Bi {
        blade_rotation_angle_figure_of_merit_raw_value: u8,
        rel_blade_height_figure_of_merit_raw_value: u8,
        rel_blade_measurement_latency_raw_value: f64,
        blade_rotation_angle_raw_value: f64,
        relative_blade_height_raw_value: f64,
        blade_rotation_angle_figure_of_merit: BladeRotationAngleFigureOfMerit2364544254,
        rel_blade_height_figure_of_merit: RelBladeHeightFigureOfMerit2364544254,
    },
    Ebs11 {
        retarder_demand_value_raw_value: f64,
        park_brake_demand_value_raw_value: f64,
        service_brake_demand_value_raw_value: f64,
        vehicle_type_raw_value: u8,
        brake_light_switch_raw_value: u8,
        asr_engine_control_active_raw_value: u8,
        asr_break_control_active_raw_value: u8,
        vehicle_retarder_ctrl_active_raw_value: u8,
        vehicle_abs_active_raw_value: u8,
        vehicle_type: VehicleType2349006590,
        brake_light_switch: BrakeLightSwitch2349006590,
        asr_engine_control_active: AsrEngineControlActive2349006590,
        asr_break_control_active: AsrBreakControlActive2349006590,
        vehicle_retarder_ctrl_active: VehicleRetarderCtrlActive2349006590,
        vehicle_abs_active: VehicleAbsActive2349006590,
    },
    Ebs12 {
        road_curvature_raw_value: f64,
        pneumatic_control_line_raw_value: u8,
        abs_offroad_request_raw_value: u8,
        two_el_circuits_brake_demand_raw_value: u8,
        vehicle_retarder_ctrl_active_raw_value: u8,
        pneumatic_control_line: PneumaticControlLine2566834686,
        abs_offroad_request: AbsOffroadRequest2566834686,
        two_el_circuits_brake_demand: TwoElCircuitsBrakeDemand2566834686,
        vehicle_retarder_ctrl_active: VehicleRetarderCtrlActive2566834686,
    },
    Ebs21 {
        wheel_speed_diff_main_axle_raw_value: f64,
        actual_retarder_perc_torque_raw_value: f64,
        wheel_based_vehicle_speed_raw_value: f64,
        supply_line_braking_request_raw_value: u8,
        vdc_active_raw_value: u8,
        autom_towed_veh_break_active_raw_value: u8,
        vehicle_service_brake_active_raw_value: u8,
        vehicle_retarder_ctrl_active_raw_value: u8,
        vehicle_abs_active_raw_value: u8,
        supply_line_braking_request: SupplyLineBrakingRequest2550398718,
        vdc_active: VdcActive2550398718,
        autom_towed_veh_break_active: AutomTowedVehBreakActive2550398718,
        vehicle_service_brake_active: VehicleServiceBrakeActive2550398718,
        vehicle_retarder_ctrl_active: VehicleRetarderCtrlActive2550398718,
        vehicle_abs_active: VehicleAbsActive2550398718,
    },
    Ebs22 {
        reference_retarder_torque_raw_value: u16,
        axle_load_sum_raw_value: f64,
        supply_line_braking_request_raw_value: u8,
        loading_ramp_approach_assist_raw_value: u8,
        spring_brake_engaged_raw_value: u8,
        electr_load_prop_func_raw_value: u8,
        spring_brake_installed_raw_value: u8,
        vehicle_type_raw_value: u8,
        elec_supply_of_non_braking_sys_raw_value: u8,
        amber_warning_signal_req_raw_value: u8,
        red_warning_signal_request_raw_value: u8,
        vehicle_electr_supply_suff_raw_value: u8,
        autom_towed_veh_break_active_raw_value: u8,
        vehicle_service_brake_active_raw_value: u8,
        vehicle_retarder_ctrl_active_raw_value: u8,
        vehicle_abs_active_raw_value: u8,
        supply_line_braking_request: SupplyLineBrakingRequest2566833406,
        loading_ramp_approach_assist: LoadingRampApproachAssist2566833406,
        spring_brake_engaged: SpringBrakeEngaged2566833406,
        electr_load_prop_func: ElectrLoadPropFunc2566833406,
        spring_brake_installed: SpringBrakeInstalled2566833406,
        vehicle_type: VehicleType2566833406,
        elec_supply_of_non_braking_sys: ElecSupplyOfNonBrakingSys2566833406,
        amber_warning_signal_req: AmberWarningSignalReq2566833406,
        red_warning_signal_request: RedWarningSignalRequest2566833406,
        vehicle_electr_supply_suff: VehicleElectrSupplySuff2566833406,
        autom_towed_veh_break_active: AutomTowedVehBreakActive2566833406,
        vehicle_service_brake_active: VehicleServiceBrakeActive2566833406,
        vehicle_retarder_ctrl_active: VehicleRetarderCtrlActive2566833406,
        vehicle_abs_active: VehicleAbsActive2566833406,
    },
    Ebs23 {
        pneumatic_supply_pressure_raw_value: f64,
        brake_temperature_raw_value: f64,
        brake_lining_raw_value: f64,
        tyre_pressure_raw_value: f64,
        tyre_wheel_ident_temp2_raw_value: u8,
        tyre_wheel_ident_temp1_raw_value: u8,
        tyre_wheel_ident_pressure2_raw_value: u8,
        tyre_wheel_ident_pressure1_raw_value: u8,
        tyre_wheel_ident_lining2_raw_value: u8,
        tyre_wheel_ident_lining1_raw_value: u8,
        vehicle_pneum_supply_suff_raw_value: u8,
        brake_temperature_status_raw_value: u8,
        brake_lining_sufficient_raw_value: u8,
        tyre_pressure_sufficient_raw_value: u8,
        tyre_wheel_ident_temp2: TyreWheelIdentTemp22365507326,
        tyre_wheel_ident_temp1: TyreWheelIdentTemp12365507326,
        tyre_wheel_ident_pressure2: TyreWheelIdentPressure22365507326,
        tyre_wheel_ident_pressure1: TyreWheelIdentPressure12365507326,
        tyre_wheel_ident_lining2: TyreWheelIdentLining22365507326,
        tyre_wheel_ident_lining1: TyreWheelIdentLining12365507326,
        vehicle_pneum_supply_suff: VehiclePneumSupplySuff2365507326,
        brake_temperature_status: BrakeTemperatureStatus2365507326,
        brake_lining_sufficient: BrakeLiningSufficient2365507326,
        tyre_pressure_sufficient: TyrePressureSufficient2365507326,
    },
    Gpm11 {
        odd_request_raw_value: u8,
        anti_theft_device_req_raw_value: u8,
        vehicle_type_raw_value: u8,
        odd_request: OddRequest2565013246,
        anti_theft_device_req: AntiTheftDeviceReq2565013246,
        vehicle_type: VehicleType2565013246,
    },
    Gpm12 {
        max_vehicle_speed_limit_raw_value: u8,
        engine_speed_upper_limit_raw_value: f64,
        engine_speed_lower_limit_raw_value: f64,
    },
    Gpm13 {
        engine_torque_mode_raw_value: u8,
        vehicle_speed_raw_value: f64,
        percent_load_at_current_speed_raw_value: u8,
        engine_speed_raw_value: f64,
        actual_engine_perc_torque_raw_value: f64,
        drivers_demand_engine_perc_torque_raw_value: f64,
        engine_running_raw_value: u8,
        engine_control_allowed_raw_value: u8,
        engine_torque_mode: EngineTorqueMode2365480958,
        engine_running: EngineRunning2365480958,
        engine_control_allowed: EngineControlAllowed2365480958,
    },
    Gpm14 {
        clutch_indptd_pto_feedback_raw_value: u8,
        accel_pedal_position_raw_value: f64,
        accel_pedal_low_idle_switch_raw_value: u8,
        starter_active_raw_value: u8,
        torque_conv_oil_temp_raw_value: f64,
        torque_convt_oil_temp_warning_raw_value: u8,
        pto_control_allowed_raw_value: u8,
        sec_engine_mtd_pto_feedback_raw_value: u8,
        first_engine_mtd_pto_feedback_raw_value: u8,
        sec_clutch_dptd_pto_feedback_raw_value: u8,
        first_clutch_dpdt_pto_feedback_raw_value: u8,
        current_gear_raw_value: f64,
        percent_clutch_slip_raw_value: f64,
        clutch_indptd_pto_feedback: ClutchIndptdPtoFeedback2566808062,
        accel_pedal_low_idle_switch: AccelPedalLowIdleSwitch2566808062,
        starter_active: StarterActive2566808062,
        torque_convt_oil_temp_warning: TorqueConvtOilTempWarning2566808062,
        pto_control_allowed: PtoControlAllowed2566808062,
        sec_engine_mtd_pto_feedback: SecEngineMtdPtoFeedback2566808062,
        first_engine_mtd_pto_feedback: FirstEngineMtdPtoFeedback2566808062,
        sec_clutch_dptd_pto_feedback: SecClutchDptdPtoFeedback2566808062,
        first_clutch_dpdt_pto_feedback: FirstClutchDpdtPtoFeedback2566808062,
    },
    Gpm15 {
        reference_engine_torque_raw_value: u16,
        fuel_level_warning_raw_value: u8,
        engine_oil_pressure_warning_raw_value: u8,
        engine_coolant_temp_warning_raw_value: u8,
        engine_oil_pressure_raw_value: f64,
        engine_coolant_temperature_raw_value: f64,
        engine_oil_temperature_raw_value: f64,
        fuel_level_warning: FuelLevelWarning2566808574,
        engine_oil_pressure_warning: EngineOilPressureWarning2566808574,
        engine_coolant_temp_warning: EngineCoolantTempWarning2566808574,
    },
    Gpm16 {
        ambient_air_temperature_raw_value: f64,
    },
    Gpm21 {
        vehicle_type_raw_value: u8,
        vehicle_type: VehicleType2564947710,
    },
    Gpm22 {
        body_pressure_raw_value: f64,
        body_fluid_level_raw_value: f64,
        thermal_body_temperature_raw_value: f64,
        rear_obstacle_distance_raw_value: f64,
        anti_theft_device_status_raw_value: u8,
        odd_status_raw_value: u8,
        anti_theft_device_status: AntiTheftDeviceStatus2566834430,
        odd_status: OddStatus2566834430,
    },
    Gpm23 {
        req_engine_speed_upper_lim_raw_value: f64,
        req_engine_speed_lower_lim_raw_value: f64,
        req_engine_torque_limit_raw_value: f64,
        req_engine_speed_limit_raw_value: u8,
        req_engine_speed_raw_value: f64,
    },
    Gpm24 {
        sec_engine_mtd_pto_switch_raw_value: u8,
        sec_clutch_dpdt_pto_switch_raw_value: u8,
        first_clutch_dpdt_pto_switch_raw_value: u8,
        operating_panel_active_raw_value: u8,
        refuse_packer_step_switch_raw_value: u8,
        engine_stop_switch_raw_value: u8,
        engine_start_switch_raw_value: u8,
        starter_lockout_switch_raw_value: u8,
        rqsted_percent_clutch_slip_raw_value: f64,
        first_engine_mtd_pto_switch_raw_value: u8,
        clutch_indpdt_pto_switch_raw_value: u8,
        sec_engine_mtd_pto_switch: SecEngineMtdPtoSwitch2566808318,
        sec_clutch_dpdt_pto_switch: SecClutchDpdtPtoSwitch2566808318,
        first_clutch_dpdt_pto_switch: FirstClutchDpdtPtoSwitch2566808318,
        operating_panel_active: OperatingPanelActive2566808318,
        refuse_packer_step_switch: RefusePackerStepSwitch2566808318,
        engine_stop_switch: EngineStopSwitch2566808318,
        engine_start_switch: EngineStartSwitch2566808318,
        starter_lockout_switch: StarterLockoutSwitch2566808318,
        first_engine_mtd_pto_switch: FirstEngineMtdPtoSwitch2566808318,
        clutch_indpdt_pto_switch: ClutchIndpdtPtoSwitch2566808318,
    },
    Gpm25 {
        trailer_left_side_marker_light_raw_value: u8,
        trailer_left_reversing_light_raw_value: u8,
        trailer_left_rear_wid_ind_light_raw_value: u8,
        trailer_left_rear_reg_plt_light_raw_value: u8,
        trailer_left_rear_light_raw_value: u8,
        trailer_left_rear_fog_light_raw_value: u8,
        trailer_left_dir_ind_light_raw_value: u8,
        trailer_left_crn_marker_light_raw_value: u8,
        trailer_interior_light_raw_value: u8,
        trailer_work_lamp_raw_value: u8,
        trailer_rotating_ident_light_raw_value: u8,
        trailer_right_stop_light_raw_value: u8,
        trailer_right_side_mrk_light_raw_value: u8,
        trailer_right_reversing_light_raw_value: u8,
        trail_right_rear_wid_ind_light_raw_value: u8,
        trailer_right_rear_reg_plt_light_raw_value: u8,
        trailer_right_rear_light_raw_value: u8,
        trailer_right_rear_fog_light_raw_value: u8,
        trailer_right_dir_ind_light_raw_value: u8,
        trailer_right_crn_marker_light_raw_value: u8,
        trailer_rear_warning_light_raw_value: u8,
        trailer_left_stop_light_raw_value: u8,
        trailer_left_side_marker_light: TrailerLeftSideMarkerLight2566808830,
        trailer_left_reversing_light: TrailerLeftReversingLight2566808830,
        trailer_left_rear_wid_ind_light: TrailerLeftRearWidIndLight2566808830,
        trailer_left_rear_reg_plt_light: TrailerLeftRearRegPltLight2566808830,
        trailer_left_rear_light: TrailerLeftRearLight2566808830,
        trailer_left_rear_fog_light: TrailerLeftRearFogLight2566808830,
        trailer_left_dir_ind_light: TrailerLeftDirIndLight2566808830,
        trailer_left_crn_marker_light: TrailerLeftCrnMarkerLight2566808830,
        trailer_interior_light: TrailerInteriorLight2566808830,
        trailer_work_lamp: TrailerWorkLamp2566808830,
        trailer_rotating_ident_light: TrailerRotatingIdentLight2566808830,
        trailer_right_stop_light: TrailerRightStopLight2566808830,
        trailer_right_side_mrk_light: TrailerRightSideMrkLight2566808830,
        trailer_right_reversing_light: TrailerRightReversingLight2566808830,
        trail_right_rear_wid_ind_light: TrailRightRearWidIndLight2566808830,
        trailer_right_rear_reg_plt_light: TrailerRightRearRegPltLight2566808830,
        trailer_right_rear_light: TrailerRightRearLight2566808830,
        trailer_right_rear_fog_light: TrailerRightRearFogLight2566808830,
        trailer_right_dir_ind_light: TrailerRightDirIndLight2566808830,
        trailer_right_crn_marker_light: TrailerRightCrnMarkerLight2566808830,
        trailer_rear_warning_light: TrailerRearWarningLight2566808830,
        trailer_left_stop_light: TrailerLeftStopLight2566808830,
    },
    Iso15765Funct {
        sn_raw_value: Option<u8>,
        separation_time_raw_value: Option<u8>,
        block_size_raw_value: Option<u8>,
        flow_status_raw_value: Option<u8>,
        first_frame_data_length_raw_value: Option<u16>,
        single_frame_data_length_raw_value: Option<u8>,
        protocol_ctrl_information_raw_value: u8,
        flow_status: FlowStatus2564554494,
        protocol_ctrl_information: ProtocolCtrlInformation2564554494,
    },
    Iso15765Phys {
        sn_raw_value: Option<u8>,
        separation_time_raw_value: Option<u8>,
        block_size_raw_value: Option<u8>,
        flow_status_raw_value: Option<u8>,
        first_frame_data_length_raw_value: Option<u16>,
        single_frame_data_length_raw_value: Option<u8>,
        protocol_ctrl_information_raw_value: u8,
        flow_status: FlowStatus2564488958,
        protocol_ctrl_information: ProtocolCtrlInformation2564488958,
    },
    Network {
        control_byte_raw_value: u8,
        filter_mode_raw_value: u8,
        to_port_raw_value: u8,
        from_port_raw_value: u8,
        control_byte: ControlByte2565734142,
        filter_mode: FilterMode2565734142,
    },
    Rge11 {
        parking_and_trailer_air_press_raw_value: f64,
        driven_axle_load_raw_value: f64,
        aux_equip_supply_pressure_raw_value: f64,
        stop_level_change_req_raw_value: u8,
        ramp_level_storage_req_raw_value: u8,
        level_control_req_raw_value: u8,
        ramp_level_req_raw_value: u8,
        steering_axle_locking_req_raw_value: u8,
        lift_axle2_position_req_raw_value: u8,
        lift_axle1_position_req_raw_value: u8,
        traction_help_req_raw_value: u8,
        level_change_req_rear_axle_raw_value: u8,
        level_change_req_front_axle_raw_value: u8,
        ride_height_request_raw_value: u8,
        stop_level_change_req: StopLevelChangeReq2565144318,
        ramp_level_storage_req: RampLevelStorageReq2565144318,
        level_control_req: LevelControlReq2565144318,
        ramp_level_req: RampLevelReq2565144318,
        steering_axle_locking_req: SteeringAxleLockingReq2565144318,
        lift_axle2_position_req: LiftAxle2PositionReq2565144318,
        lift_axle1_position_req: LiftAxle1PositionReq2565144318,
        traction_help_req: TractionHelpReq2565144318,
        level_change_req_rear_axle: LevelChangeReqRearAxle2565144318,
        level_change_req_front_axle: LevelChangeReqFrontAxle2565144318,
        ride_height_request: RideHeightRequest2565144318,
    },
    Rge21 {
        level_control_raw_value: u8,
        nominal_veh_body_level_rear_axle_raw_value: u16,
        nominal_veh_body_level_front_axle_raw_value: u16,
        ramp_level_raw_value: u8,
        normal_level_raw_value: u8,
        stop_level_change_acknowledge_raw_value: u8,
        level_change_rear_axle_raw_value: u8,
        level_change_front_axle_raw_value: u8,
        ramp_level_storage_raw_value: u8,
        steering_axle_locking_raw_value: u8,
        lift_axle2_pos_raw_value: u8,
        lift_axle1_pos_raw_value: u8,
        ramp_level_position_raw_value: u8,
        traction_help_raw_value: u8,
        level_ctrl_sys_ride_height_level_raw_value: u8,
        level_control: LevelControl2565209854,
        ramp_level: RampLevel2565209854,
        normal_level: NormalLevel2565209854,
        stop_level_change_acknowledge: StopLevelChangeAcknowledge2565209854,
        level_change_rear_axle: LevelChangeRearAxle2565209854,
        level_change_front_axle: LevelChangeFrontAxle2565209854,
        ramp_level_storage: RampLevelStorage2565209854,
        steering_axle_locking: SteeringAxleLocking2565209854,
        lift_axle2_pos: LiftAxle2Pos2565209854,
        lift_axle1_pos: LiftAxle1Pos2565209854,
        ramp_level_position: RampLevelPosition2565209854,
        traction_help: TractionHelp2565209854,
        level_ctrl_sys_ride_height_level: LevelCtrlSysRideHeightLevel2565209854,
    },
    Rge22 {
        rel_veh_body_level_rear_axle_raw_value: u16,
        rel_veh_body_level_front_axle_raw_value: f64,
    },
    Rge23 {
        tyre_press_threshold_detect_raw_value: u8,
        tyre_module_power_supply_raw_value: u8,
        tyre_temperature_raw_value: f64,
        air_leakage_detection_raw_value: f64,
        tyre_wheel_identification2_raw_value: u8,
        tyre_wheel_identification1_raw_value: u8,
        tyre_press_threshold_detect: TyrePressThresholdDetect2566807294,
        tyre_module_power_supply: TyreModulePowerSupply2566807294,
        tyre_wheel_identification2: TyreWheelIdentification22566807294,
        tyre_wheel_identification1: TyreWheelIdentification12566807294,
    },
    Dm26 {
        misfire_monitoring_complete_raw_value: bool,
        misfire_monitoring_enabled_raw_value: bool,
        fuel_system_monitoring_enabled_raw_value: bool,
        comprehensive_compt_mon_complete_raw_value: bool,
        comprehensive_comp_mon_enabled_raw_value: bool,
        second_air_system_mon_complete_raw_value: bool,
        second_air_system_mon_enabled_raw_value: bool,
        oxygen_sensor_mon_complete_raw_value: bool,
        oxygen_sensor_mon_enabled_raw_value: bool,
        oxygen_sensor_heater_mon_complete_raw_value: bool,
        oxygen_sensor_heater_mon_enabled_raw_value: bool,
        heated_catalyst_mon_complete_raw_value: bool,
        heated_catalyst_mon_enabled_raw_value: bool,
        evaporative_system_mon_complete_raw_value: bool,
        evaporative_system_mon_enabled_raw_value: bool,
        egr_system_monitoring_complete_raw_value: bool,
        egr_system_monitoring_enabled_raw_value: bool,
        cold_start_aid_system_mon_complete_raw_value: bool,
        cold_start_aid_system_mon_enabled_raw_value: bool,
        catalyst_mon_complete_raw_value: bool,
        catalyst_mon_enabled_raw_value: bool,
        ac_system_refrigerant_mon_complete_raw_value: bool,
        ac_system_refrigerant_mon_enabled_raw_value: bool,
        fuel_system_monitoring_complete_raw_value: bool,
        num_of_warm_ups_since_dt_cs_cleared_raw_value: u8,
        time_since_engine_start_raw_value: u16,
        misfire_monitoring_complete: MisfireMonitoringComplete2566764798,
        misfire_monitoring_enabled: MisfireMonitoringEnabled2566764798,
        fuel_system_monitoring_enabled: FuelSystemMonitoringEnabled2566764798,
        comprehensive_compt_mon_complete: ComprehensiveComptMonComplete2566764798,
        comprehensive_comp_mon_enabled: ComprehensiveCompMonEnabled2566764798,
        second_air_system_mon_complete: SecondAirSystemMonComplete2566764798,
        second_air_system_mon_enabled: SecondAirSystemMonEnabled2566764798,
        oxygen_sensor_mon_complete: OxygenSensorMonComplete2566764798,
        oxygen_sensor_mon_enabled: OxygenSensorMonEnabled2566764798,
        oxygen_sensor_heater_mon_complete: OxygenSensorHeaterMonComplete2566764798,
        oxygen_sensor_heater_mon_enabled: OxygenSensorHeaterMonEnabled2566764798,
        heated_catalyst_mon_complete: HeatedCatalystMonComplete2566764798,
        heated_catalyst_mon_enabled: HeatedCatalystMonEnabled2566764798,
        evaporative_system_mon_complete: EvaporativeSystemMonComplete2566764798,
        evaporative_system_mon_enabled: EvaporativeSystemMonEnabled2566764798,
        egr_system_monitoring_complete: EgrSystemMonitoringComplete2566764798,
        egr_system_monitoring_enabled: EgrSystemMonitoringEnabled2566764798,
        cold_start_aid_system_mon_complete: ColdStartAidSystemMonComplete2566764798,
        cold_start_aid_system_mon_enabled: ColdStartAidSystemMonEnabled2566764798,
        catalyst_mon_complete: CatalystMonComplete2566764798,
        catalyst_mon_enabled: CatalystMonEnabled2566764798,
        ac_system_refrigerant_mon_complete: AcSystemRefrigerantMonComplete2566764798,
        ac_system_refrigerant_mon_enabled: AcSystemRefrigerantMonEnabled2566764798,
        fuel_system_monitoring_complete: FuelSystemMonitoringComplete2566764798,
    },
    Dm18 {
        security_entity_length_high_raw_value: u8,
        security_entity_type_raw_value: u8,
        security_entity_length_raw_value: u8,
        security_entity_type: SecurityEntityType2564095742,
    },
    Xbr {
        xbr_message_checksum_raw_value: u8,
        xbr_message_counter_raw_value: u8,
        xbr_ctrl_mode_raw_value: u8,
        xbr_priority_raw_value: u8,
        xbrebi_mode_raw_value: u8,
        extl_acceleration_demand_raw_value: f64,
        xbr_ctrl_mode: XbrCtrlMode2349137662,
        xbr_priority: XbrPriority2349137662,
        xbrebi_mode: XbrebiMode2349137662,
    },
    Wfi {
        water_in_fuel_indicator_raw_value: u8,
        water_in_fuel_indicator: WaterInFuelIndicator2566848510,
    },
    Vw {
        cargo_weight_raw_value: f64,
        trailer_weight_raw_value: f64,
        axle_weight_raw_value: f64,
        axle_location_raw_value: u8,
    },
    Vep3 {
        net_battery_current_hi_res_raw_value: f64,
        alt_current_hi_res_raw_value: f64,
    },
    Vep2 {
        battery2_potential_raw_value: f64,
        ecu_power_output_supply_voltage3_raw_value: f64,
        ecu_power_output_supply_voltage2_raw_value: f64,
        ecu_power_output_supply_voltage1_raw_value: f64,
        battery_potential_power_input2_raw_value: f64,
    },
    Vp {
        longitude_raw_value: f64,
        latitude_raw_value: f64,
    },
    Vi {},
    Vh {
        total_power_takeoff_hours_raw_value: f64,
        total_vehicle_hours_raw_value: f64,
    },
    Vf {
        winch_oil_press_switch_raw_value: u8,
        hyd_oil_level_raw_value: f64,
        hyd_oil_filter_restriction_switch_raw_value: u8,
        hyd_temp_raw_value: f64,
        winch_oil_press_switch: WinchOilPressSwitch2566809854,
        hyd_oil_filter_restriction_switch: HydOilFilterRestrictionSwitch2566809854,
    },
    Vds {
        altitude_raw_value: f64,
        pitch_raw_value: f64,
        navigation_based_vehicle_speed_raw_value: f64,
        compass_bearing_raw_value: f64,
    },
    Vdhr {
        high_resolution_trip_distance_raw_value: f64,
        hgh_rslution_total_vehicle_distance_raw_value: f64,
    },
    Vdc2 {
        longitudinal_acceleration_raw_value: f64,
        lateral_acceleration_raw_value: f64,
        yaw_rate_raw_value: f64,
        steer_wheel_angle_sensor_type_raw_value: u8,
        steer_wheel_turn_counter_raw_value: f64,
        steer_wheel_angle_raw_value: f64,
        steer_wheel_angle_sensor_type: SteerWheelAngleSensorType2565868030,
    },
    Vdc1 {
        yc_brake_ctrl_active_raw_value: u8,
        yc_eng_ctrl_active_raw_value: u8,
        rop_brake_ctrl_active_raw_value: u8,
        rop_eng_ctrl_active_raw_value: u8,
        vdc_brake_light_rq_raw_value: u8,
        vdc_fully_operational_raw_value: u8,
        vdc_information_signal_raw_value: u8,
        yc_brake_ctrl_active: YcBrakeCtrlActive2566803454,
        yc_eng_ctrl_active: YcEngCtrlActive2566803454,
        rop_brake_ctrl_active: RopBrakeCtrlActive2566803454,
        rop_eng_ctrl_active: RopEngCtrlActive2566803454,
        vdc_brake_light_rq: VdcBrakeLightRq2566803454,
        vdc_fully_operational: VdcFullyOperational2566803454,
        vdc_information_signal: VdcInformationSignal2566803454,
    },
    Vd {
        total_vehicle_distance_raw_value: f64,
        trip_distance_raw_value: f64,
    },
    Tvi {
        trip_cruise_distance_raw_value: f64,
        trip_max_vehicle_speed_raw_value: f64,
    },
    Tti2 {
        trip_pto_time_raw_value: f64,
        trip_cruise_time_raw_value: f64,
    },
    Tti1 {
        trip_time_in_top_gear_raw_value: f64,
        trip_time_in_vsl_raw_value: f64,
    },
    Tsi {
        trip_sudden_decelerations_raw_value: u16,
        trp_nmber_of_idle_shutdown_overrides_raw_value: u16,
        trip_number_of_idle_shutdowns_raw_value: u16,
        trip_number_of_hot_shutdowns_raw_value: u16,
    },
    Tsc1 {
        control_purpose_raw_value: u8,
        transmission_rate_raw_value: u8,
        eng_rqed_torque_torque_limit_raw_value: f64,
        eng_rqed_speed_speed_limit_raw_value: f64,
        override_ctrl_mode_priority_raw_value: u8,
        eng_rqed_speed_ctrl_conditions_raw_value: u8,
        eng_override_ctrl_mode_raw_value: u8,
        control_purpose: ControlPurpose2348875518,
        transmission_rate: TransmissionRate2348875518,
        override_ctrl_mode_priority: OverrideCtrlModePriority2348875518,
        eng_rqed_speed_ctrl_conditions: EngRqedSpeedCtrlConditions2348875518,
        eng_override_ctrl_mode: EngOverrideCtrlMode2348875518,
    },
    Tr7 {
        transit_run_status_raw_value: u8,
        vehicle_use_status_raw_value: u8,
        silent_alarm_status_raw_value: u8,
        patron_count_raw_value: u8,
        type_of_passenger_count_raw_value: u8,
        transit_run_status: TransitRunStatus2566766846,
        vehicle_use_status: VehicleUseStatus2566766846,
        silent_alarm_status: SilentAlarmStatus2566766846,
        type_of_passenger_count: TypeOfPassengerCount2566766846,
    },
    Tr6 {
        farebox_alarm_identifier_raw_value: u8,
        farebox_emergency_status_raw_value: u8,
        farebox_alarm_identifier: FareboxAlarmIdentifier2566765310,
        farebox_emergency_status: FareboxEmergencyStatus2566765310,
    },
    Tr5 {
        transfer_sold_raw_value: u8,
        route_number_raw_value: u16,
        transfer_type_raw_value: u8,
        type_of_service_raw_value: u8,
        initial_fare_agency_raw_value: u8,
        pass_category_raw_value: u8,
        fare_validity_raw_value: u8,
        payment_details_raw_value: u8,
        type_of_fare_raw_value: u8,
        passenger_type_raw_value: u8,
        transaction_type_raw_value: u8,
        transfer_type: TransferType2566765566,
        type_of_service: TypeOfService2566765566,
        payment_details: PaymentDetails2566765566,
        type_of_fare: TypeOfFare2566765566,
        transaction_type: TransactionType2566765566,
    },
    Tr4 {
        assigned_route_raw_value: u16,
        pattern_number_raw_value: u16,
        trip_number_raw_value: u16,
        fare_presets_raw_value: u8,
        trip_direction_raw_value: u8,
        trip_status_raw_value: u8,
        farebox_service_status_raw_value: u8,
        trip_direction: TripDirection2566765822,
        trip_status: TripStatus2566765822,
        farebox_service_status: FareboxServiceStatus2566765822,
    },
    Tr3 {
        vehicle_id_raw_value: u16,
        strobe_activation_ctrl_status_raw_value: u8,
        transit_door_enable_raw_value: u8,
        priority_of_resp_sent_by_emitter_raw_value: u8,
        intersection_preemption_rq_resp_raw_value: u8,
        transit_route_id_usage_raw_value: u8,
        range_code_enable_raw_value: u8,
        strobe_activation_ctrl_status: StrobeActivationCtrlStatus2566766078,
        transit_door_enable: TransitDoorEnable2566766078,
        priority_of_resp_sent_by_emitter: PriorityOfRespSentByEmitter2566766078,
        intersection_preemption_rq_resp: IntersectionPreemptionRqResp2566766078,
        transit_route_id_usage: TransitRouteIdUsage2566766078,
        range_code_enable: RangeCodeEnable2566766078,
    },
    Tr2 {
        nmbr_of_byts_in_mlpst_identification_raw_value: u8,
    },
    Tr1 {
        agency_raw_value: u8,
        nmbr_of_byts_in_trnst_assgnd_blck_idntt_raw_value: u8,
        nmbr_of_byts_in_trnst_assgnd_rn_idntty_raw_value: u8,
        nmbr_of_byts_in_trnst_assgnd_rt_idntty_raw_value: u8,
    },
    Tprs {
        reference_tire_press_setting_raw_value: f64,
        tire_location_raw_value: u8,
    },
    Tpri {
        reference_tire_press_raw_value: f64,
        tire_location_raw_value: u8,
    },
    Tp3 {
        steer_channel_tire_press_raw_value: f64,
        drive_channel_tire_press_raw_value: f64,
        trailer_tag_push_channel_tire_press_raw_value: f64,
    },
    Tp2 {
        steer_channel_tire_press_target_raw_value: f64,
        drive_channel_tire_press_target_raw_value: f64,
        trlr_tg_psh_channel_tire_press_target_raw_value: f64,
    },
    Tp1 {
        pcu_supply_solenoid_status_raw_value: u8,
        pcu_ctrl_solenoid_status_raw_value: u8,
        pcu_deflate_solenoid_status_raw_value: u8,
        tire_press_supply_switch_status_raw_value: u8,
        pcu_steer_solenoid_status_raw_value: u8,
        pcu_drive_solenoid_status_raw_value: u8,
        drive_channel_mode_raw_value: u8,
        trailer_tag_channel_mode_raw_value: u8,
        steer_channel_mode_raw_value: u8,
        tire_press_check_interval_raw_value: u8,
        pcu_trailer_tag_push_solenoid_status_raw_value: u8,
        pcu_supply_solenoid_status: PcuSupplySolenoidStatus2633922814,
        pcu_ctrl_solenoid_status: PcuCtrlSolenoidStatus2633922814,
        pcu_deflate_solenoid_status: PcuDeflateSolenoidStatus2633922814,
        tire_press_supply_switch_status: TirePressSupplySwitchStatus2633922814,
        pcu_steer_solenoid_status: PcuSteerSolenoidStatus2633922814,
        pcu_drive_solenoid_status: PcuDriveSolenoidStatus2633922814,
        drive_channel_mode: DriveChannelMode2633922814,
        trailer_tag_channel_mode: TrailerTagChannelMode2633922814,
        steer_channel_mode: SteerChannelMode2633922814,
        pcu_trailer_tag_push_solenoid_status: PcuTrailerTagPushSolenoidStatus2633922814,
    },
    Tire {
        tire_press_threshold_detection_raw_value: u8,
        tire_air_leakage_rate_raw_value: f64,
        cti_wheel_end_electrical_fault_raw_value: u8,
        cti_tire_status_raw_value: u8,
        cti_wheel_sensor_status_raw_value: u8,
        tire_temp_raw_value: f64,
        tire_press_raw_value: f64,
        tire_location_raw_value: u8,
        tire_press_threshold_detection: TirePressThresholdDetection2566845694,
        cti_wheel_end_electrical_fault: CtiWheelEndElectricalFault2566845694,
        cti_tire_status: CtiTireStatus2566845694,
        cti_wheel_sensor_status: CtiWheelSensorStatus2566845694,
    },
    Ti1 {
        catalyst_tank_temp_raw_value: f64,
        catalyst_tank_level_raw_value: f64,
        catalyst_tank_level_preliminary_fmi_raw_value: u8,
        catalyst_tank_level2_raw_value: f64,
    },
    Tfi {
        trip_fan_on_time_raw_value: f64,
        trip_fan_on_time_due_to_eng_system_raw_value: f64,
    },
    Tdi {
        trip_gear_down_distance_raw_value: f64,
        trip_distance_on_vsl_raw_value: f64,
    },
    Tda {
        adjust_local_hour_offset_raw_value: f64,
        adjust_local_minute_offset_raw_value: f64,
        adjust_year_raw_value: f64,
        adjust_day_raw_value: f64,
        adjust_month_raw_value: u8,
        adjust_hours_raw_value: u8,
        adjust_minutes_raw_value: u8,
        adjust_seconds_raw_value: f64,
    },
    Td {
        local_hour_offset_raw_value: f64,
        local_minute_offset_raw_value: f64,
        year_raw_value: f64,
        day_raw_value: f64,
        month_raw_value: u8,
        hours_raw_value: u8,
        minutes_raw_value: u8,
        seconds_raw_value: f64,
    },
    Tcw {
        eng_trb_wstgt_actuator_ctrl_air_press_raw_value: f64,
        eng_turbo4_wastegate_drive_raw_value: f64,
        eng_turbo3_wastegate_drive_raw_value: f64,
        eng_turbo2_wastegate_drive_raw_value: f64,
        eng_turbo1_wastegate_drive_raw_value: f64,
    },
    Tco1 {
        tachograph_vehicle_speed_raw_value: f64,
        tachograph_output_shaft_speed_raw_value: f64,
        direction_indicator_raw_value: u8,
        tachograph_performance_raw_value: u8,
        handling_information_raw_value: u8,
        system_event_raw_value: u8,
        driver_card_driver2_raw_value: u8,
        driver2_time_related_states_raw_value: u8,
        overspeed_raw_value: u8,
        driver_card_driver1_raw_value: u8,
        driver1_time_related_states_raw_value: u8,
        drive_recognize_raw_value: u8,
        driver2_working_state_raw_value: u8,
        driver1_working_state_raw_value: u8,
        direction_indicator: DirectionIndicator2365484286,
        tachograph_performance: TachographPerformance2365484286,
        handling_information: HandlingInformation2365484286,
        system_event: SystemEvent2365484286,
        driver_card_driver2: DriverCardDriver22365484286,
        driver2_time_related_states: Driver2TimeRelatedStates2365484286,
        overspeed: Overspeed2365484286,
        driver_card_driver1: DriverCardDriver12365484286,
        driver1_time_related_states: Driver1TimeRelatedStates2365484286,
        drive_recognize: DriveRecognize2365484286,
        driver2_working_state: Driver2WorkingState2365484286,
        driver1_working_state: Driver1WorkingState2365484286,
    },
    Tci6 {
        eng_turbo4_compressor_outlet_temp_raw_value: f64,
        eng_turbo3_compressor_outlet_temp_raw_value: f64,
        eng_turbo2_compressor_outlet_temp_raw_value: f64,
        eng_turbo1_compressor_outlet_temp_raw_value: f64,
    },
    Tci5 {
        eng_turbo4_turbine_outlet_temp_raw_value: f64,
        eng_turbo3_turbine_outlet_temp_raw_value: f64,
        eng_turbo2_turbine_outlet_temp_raw_value: f64,
        eng_turbo1_turbine_outlet_temp_raw_value: f64,
    },
    Tci4 {
        eng_turbo4_turbine_inlet_temp_raw_value: f64,
        eng_turbo3_turbine_inlet_temp_raw_value: f64,
        eng_turbo2_turbine_inlet_temp_raw_value: f64,
        eng_turbo1_turbine_inlet_temp_raw_value: f64,
    },
    Tci3 {
        eng_turbo4_compressor_inlet_press_raw_value: f64,
        eng_turbo3_compressor_inlet_press_raw_value: f64,
        eng_turbo2_compressor_inlet_press_raw_value: f64,
        eng_turbo1_compressor_inlet_press_raw_value: f64,
    },
    Tci2 {
        eng_turbo4_compressor_inlet_temp_raw_value: f64,
        eng_turbo3_compressor_inlet_temp_raw_value: f64,
        eng_turbo2_compressor_inlet_temp_raw_value: f64,
        eng_turbo1_compressor_inlet_temp_raw_value: f64,
    },
    Tci1 {
        eng_turbo4_speed_raw_value: f64,
        eng_turbo3_speed_raw_value: f64,
        eng_turbo2_speed_raw_value: f64,
        eng_turbo_lube_oil_press2_raw_value: f64,
    },
    Tcfg2 {
        trans_torque_limit_raw_value: u16,
    },
    Tcfg {
        trans_gear_ratio_raw_value: f64,
        number_of_forward_gear_ratios_raw_value: u8,
        number_of_reverse_gear_ratios_raw_value: u8,
    },
    Tc1 {
        trns_shft_slctor_display_mode_switch_raw_value: u8,
        trans_mode4_raw_value: u8,
        trans_mode3_raw_value: u8,
        trans_mode2_raw_value: u8,
        trans_mode1_raw_value: u8,
        disengage_diff_lock_rq_central_rear_raw_value: u8,
        disengage_diff_lock_rq_central_front_raw_value: u8,
        disengage_diff_lock_rq_central_raw_value: u8,
        disengage_diff_lock_rq_rear_axle2_raw_value: u8,
        disengage_diff_lock_rq_rear_axle1_raw_value: u8,
        disengage_diff_lock_rq_front_axle2_raw_value: u8,
        disengage_diff_lock_rq_front_axle1_raw_value: u8,
        trans_rqed_gear_raw_value: f64,
        rqed_percent_clutch_slip_raw_value: f64,
        disengage_driveline_rq_raw_value: u8,
        torque_converter_lockup_disable_rq_raw_value: u8,
        trans_gear_shift_inhibit_rq_raw_value: u8,
        trns_shft_slctor_display_mode_switch: TrnsShftSlctorDisplayModeSwitch2348941054,
        trans_mode4: TransMode42348941054,
        trans_mode3: TransMode32348941054,
        trans_mode2: TransMode22348941054,
        trans_mode1: TransMode12348941054,
        disengage_diff_lock_rq_central_rear: DisengageDiffLockRqCentralRear2348941054,
        disengage_diff_lock_rq_central_front: DisengageDiffLockRqCentralFront2348941054,
        disengage_diff_lock_rq_central: DisengageDiffLockRqCentral2348941054,
        disengage_diff_lock_rq_rear_axle2: DisengageDiffLockRqRearAxle22348941054,
        disengage_diff_lock_rq_rear_axle1: DisengageDiffLockRqRearAxle12348941054,
        disengage_diff_lock_rq_front_axle2: DisengageDiffLockRqFrontAxle22348941054,
        disengage_diff_lock_rq_front_axle1: DisengageDiffLockRqFrontAxle12348941054,
        trans_rqed_gear: TransRqedGear2348941054,
        disengage_driveline_rq: DisengageDrivelineRq2348941054,
        torque_converter_lockup_disable_rq: TorqueConverterLockupDisableRq2348941054,
        trans_gear_shift_inhibit_rq: TransGearShiftInhibitRq2348941054,
    },
    Tc {
        eng_turbo_oil_level_switch_raw_value: u8,
        eng_turbo1_speed_raw_value: f64,
        eng_turbo_lube_oil_press1_raw_value: f64,
    },
    Tavg {
        eng_total_average_fuel_economy_raw_value: f64,
        eng_total_average_fuel_rate_raw_value: f64,
    },
    Spr {
        air_suspension_supply_press_rq_raw_value: f64,
        aux_equipment_supply_press_rq_raw_value: f64,
        service_brake_air_press_rq_circuit2_raw_value: f64,
        service_brake_air_press_rq_circuit1_raw_value: f64,
        parking_and_or_trailer_air_press_rq_raw_value: f64,
        pneumatic_supply_press_rq_raw_value: f64,
    },
    Sp2 {
        eng_extl_shutdown_air_supply_press_raw_value: f64,
    },
    Soft {
        nmbr_of_sftwr_identification_fields_raw_value: u8,
    },
    Shutdow {
        eng_overspeed_test_raw_value: u8,
        eng_air_shutoff_cmd_status_raw_value: u8,
        eng_alarm_output_cmd_status_raw_value: u8,
        eng_alarm_acknowledge_raw_value: u8,
        eng_protection_system_config_raw_value: u8,
        eng_protection_system_timer_state_raw_value: u8,
        eng_prtection_system_timer_override_raw_value: u8,
        eng_prtctn_systm_apprching_shutdown_raw_value: u8,
        eng_prtction_system_has_shutdown_eng_raw_value: u8,
        eng_wait_to_start_lamp_raw_value: u8,
        refrigerant_high_press_switch_raw_value: u8,
        refrigerant_low_press_switch_raw_value: u8,
        a_c_high_press_fan_switch_raw_value: u8,
        eng_idle_shutdown_timer_function_raw_value: u8,
        eng_idle_shutdown_timer_state_raw_value: u8,
        eng_idle_shutdown_timer_override_raw_value: u8,
        eng_idle_shutdown_driver_alert_mode_raw_value: u8,
        eng_idle_shutdown_has_shutdown_eng_raw_value: u8,
        eng_overspeed_test: EngOverspeedTest2566841598,
        eng_air_shutoff_cmd_status: EngAirShutoffCmdStatus2566841598,
        eng_alarm_output_cmd_status: EngAlarmOutputCmdStatus2566841598,
        eng_alarm_acknowledge: EngAlarmAcknowledge2566841598,
        eng_protection_system_config: EngProtectionSystemConfig2566841598,
        eng_protection_system_timer_state: EngProtectionSystemTimerState2566841598,
        eng_prtection_system_timer_override: EngPrtectionSystemTimerOverride2566841598,
        eng_prtctn_systm_apprching_shutdown: EngPrtctnSystmApprchingShutdown2566841598,
        eng_prtction_system_has_shutdown_eng: EngPrtctionSystemHasShutdownEng2566841598,
        eng_wait_to_start_lamp: EngWaitToStartLamp2566841598,
        refrigerant_high_press_switch: RefrigerantHighPressSwitch2566841598,
        refrigerant_low_press_switch: RefrigerantLowPressSwitch2566841598,
        a_c_high_press_fan_switch: ACHighPressFanSwitch2566841598,
        eng_idle_shutdown_timer_function: EngIdleShutdownTimerFunction2566841598,
        eng_idle_shutdown_timer_state: EngIdleShutdownTimerState2566841598,
        eng_idle_shutdown_timer_override: EngIdleShutdownTimerOverride2566841598,
        eng_idle_shutdown_driver_alert_mode: EngIdleShutdownDriverAlertMode2566841598,
        eng_idle_shutdown_has_shutdown_eng: EngIdleShutdownHasShutdownEng2566841598,
    },
    Serv {
        service_component_identification_b_raw_value: u8,
        service_component_identification_a_raw_value: u8,
        srvce_delay_operational_time_based_raw_value: f64,
        service_delay_calendar_time_based_raw_value: f64,
        service_distance_raw_value: f64,
        service_component_identification_raw_value: u8,
    },
    S2 {
        time_since_last_service_raw_value: f64,
        service_component_identification_raw_value: u8,
    },
    Rtc1 {
        max_continuous_retarder_torque_raw_value: f64,
        min_continuous_retarder_speed_raw_value: f64,
        max_continuous_retarder_speed_raw_value: f64,
        hgh_lmt_thrshhld_fr_mn_cntns_trq_frm_rtr_raw_value: f64,
        lw_lmt_thrshhld_fr_mx_trq_frm_retarder_raw_value: f64,
        hgh_lmt_thrshhld_fr_mn_cntns_rpm_frm_rtr_raw_value: f64,
        lw_lmt_thrshhld_fr_mx_rpm_frm_retarder_raw_value: f64,
        min_continuous_retarder_torque_raw_value: f64,
    },
    Rf {
        hyd_retarder_oil_temp_raw_value: f64,
        hyd_retarder_press_raw_value: f64,
    },
    Reset {
        eng_build_hours_reset_raw_value: u8,
        service_component_identification_raw_value: u8,
        trip_group2_proprietary_raw_value: u8,
        trip_group1_raw_value: u8,
        eng_build_hours_reset: EngBuildHoursReset2631859966,
        trip_group2_proprietary: TripGroup2Proprietary2631859966,
        trip_group1: TripGroup12631859966,
    },
    Rc {
        percent_torque_at_max_speed_point2_raw_value: f64,
        max_retarder_speed_point2_raw_value: f64,
        percent_torque_at_idle_point1_raw_value: f64,
        retarder_speed_at_idle_point1_raw_value: f64,
        retarder_ctrl_method_raw_value: u8,
        retarder_location_raw_value: u8,
        retarder_type_raw_value: u8,
        retarder_location: RetarderLocation2566840830,
        retarder_type: RetarderType2566840830,
    },
    Rbi {
        eng_operation_time_since_rebuild_raw_value: u32,
    },
    Pto {
        operator_pto_memory_select_switch_raw_value: u8,
        eng_pto_accelerate_switch_raw_value: u8,
        eng_pto_resume_switch_raw_value: u8,
        eng_pto_coast_decelerate_switch_raw_value: u8,
        eng_pto_set_switch_raw_value: u8,
        eng_rmt_pto_vriable_speed_ctrl_switch_raw_value: u8,
        eng_rmt_pto_prprgrmmd_spd_ctrl_switch_raw_value: u8,
        eng_pto_enable_switch_raw_value: u8,
        power_takeoff_set_speed_raw_value: f64,
        power_takeoff_speed_raw_value: f64,
        power_takeoff_oil_temp_raw_value: f64,
        rmt_pto_prprgrmmd_speed_ctrl_switch2_raw_value: u8,
        aux_input_ignore_switch_raw_value: u8,
        operator_pto_memory_select_switch: OperatorPtoMemorySelectSwitch2566844670,
        eng_pto_accelerate_switch: EngPtoAccelerateSwitch2566844670,
        eng_pto_resume_switch: EngPtoResumeSwitch2566844670,
        eng_pto_coast_decelerate_switch: EngPtoCoastDecelerateSwitch2566844670,
        eng_pto_set_switch: EngPtoSetSwitch2566844670,
        eng_rmt_pto_vriable_speed_ctrl_switch: EngRmtPtoVriableSpeedCtrlSwitch2566844670,
        eng_rmt_pto_prprgrmmd_spd_ctrl_switch: EngRmtPtoPrprgrmmdSpdCtrlSwitch2566844670,
        eng_pto_enable_switch: EngPtoEnableSwitch2566844670,
        rmt_pto_prprgrmmd_speed_ctrl_switch2: RmtPtoPrprgrmmdSpeedCtrlSwitch22566844670,
        aux_input_ignore_switch: AuxInputIgnoreSwitch2566844670,
    },
    Oww {
        rear_washer_function_raw_value: u8,
        front_operator_washer_switch_raw_value: u8,
        front_nonoperator_washer_switch_raw_value: u8,
        rear_wiper_delay_ctrl_raw_value: f64,
        front_nonoperator_wiper_delay_ctrl_raw_value: f64,
        front_operator_wiper_delay_ctrl_raw_value: f64,
        rear_wiper_switch_raw_value: u8,
        front_operator_wiper_switch_raw_value: u8,
        front_nonoperator_wiper_switch_raw_value: u8,
        rear_washer_function: RearWasherFunction2566770174,
        front_operator_washer_switch: FrontOperatorWasherSwitch2566770174,
        front_nonoperator_washer_switch: FrontNonoperatorWasherSwitch2566770174,
        rear_wiper_switch: RearWiperSwitch2566770174,
        front_operator_wiper_switch: FrontOperatorWiperSwitch2566770174,
        front_nonoperator_wiper_switch: FrontNonoperatorWiperSwitch2566770174,
    },
    Ohecs {
        eng_alt_droop_aux_input_select_raw_value: u8,
        eng_alt_droop_remote_accel_select_raw_value: u8,
        eng_alt_droop_accel2_select_raw_value: u8,
        eng_alt_droop_accel1_select_raw_value: u8,
        eng_alt_rating_select_raw_value: u8,
        eng_alt_low_idle_switch_raw_value: u8,
        eng_synchronization_switch_raw_value: u8,
        eng_aux_governor_switch_raw_value: u8,
        eng_alt_droop_aux_input_select: EngAltDroopAuxInputSelect2566769662,
        eng_alt_droop_remote_accel_select: EngAltDroopRemoteAccelSelect2566769662,
        eng_alt_droop_accel2_select: EngAltDroopAccel2Select2566769662,
        eng_alt_droop_accel1_select: EngAltDroopAccel1Select2566769662,
        eng_alt_rating_select: EngAltRatingSelect2566769662,
        eng_alt_low_idle_switch: EngAltLowIdleSwitch2566769662,
        eng_synchronization_switch: EngSynchronizationSwitch2566769662,
        eng_aux_governor_switch: EngAuxGovernorSwitch2566769662,
    },
    Ohcss {
        eng_alt_droop_aux_input_select_state_raw_value: u8,
        eng_alt_drp_remote_accel_select_state_raw_value: u8,
        eng_alt_droop_accel2_select_state_raw_value: u8,
        eng_alt_droop_accel1_select_state_raw_value: u8,
        eng_alt_rating_select_state_raw_value: u8,
        eng_alt_low_idle_select_state_raw_value: u8,
        eng_multi_unit_sync_state_raw_value: u8,
        eng_aux_governor_state_raw_value: u8,
        eng_alt_droop_aux_input_select_state: EngAltDroopAuxInputSelectState2566768638,
        eng_alt_drp_remote_accel_select_state: EngAltDrpRemoteAccelSelectState2566768638,
        eng_alt_droop_accel2_select_state: EngAltDroopAccel2SelectState2566768638,
        eng_alt_droop_accel1_select_state: EngAltDroopAccel1SelectState2566768638,
        eng_alt_rating_select_state: EngAltRatingSelectState2566768638,
        eng_alt_low_idle_select_state: EngAltLowIdleSelectState2566768638,
        eng_multi_unit_sync_state: EngMultiUnitSyncState2566768638,
        eng_aux_governor_state: EngAuxGovernorState2566768638,
    },
    Oel {
        oprtrs_desired_delayed_lamp_off_time_raw_value: u16,
        operators_desired_backlight_raw_value: f64,
        high_low_beam_switch_raw_value: u8,
        hazard_light_switch_raw_value: u8,
        turn_signal_switch_raw_value: u8,
        main_light_switch_raw_value: u8,
        work_light_switch_raw_value: u8,
        high_low_beam_switch: HighLowBeamSwitch2365443326,
        hazard_light_switch: HazardLightSwitch2365443326,
        turn_signal_switch: TurnSignalSwitch2365443326,
        main_light_switch: MainLightSwitch2365443326,
        work_light_switch: WorkLightSwitch2365443326,
    },
    Mvs {
        applied_vehicle_speed_limit_raw_value: u8,
        max_vehicle_speed_limit7_raw_value: u8,
        max_vehicle_speed_limit6_raw_value: u8,
        max_vehicle_speed_limit5_raw_value: u8,
        max_vehicle_speed_limit4_raw_value: u8,
        max_vehicle_speed_limit3_raw_value: u8,
        max_vehicle_speed_limit2_raw_value: u8,
        max_vehicle_speed_limit1_raw_value: u8,
    },
    Ml {
        oprtrs_blck_out_intensity_selection_raw_value: f64,
        black_out_work_lamp_select_raw_value: u8,
        night_vision_illuminator_select_raw_value: u8,
        black_out_brake_stop_lamp_select_raw_value: u8,
        convoy_driving_lamp_select_raw_value: u8,
        convoy_lamp_select_raw_value: u8,
        front_black_out_marker_lamp_select_raw_value: u8,
        rear_black_out_marker_select_raw_value: u8,
        black_out_work_lamp_select: BlackOutWorkLampSelect2566802686,
        night_vision_illuminator_select: NightVisionIlluminatorSelect2566802686,
        black_out_brake_stop_lamp_select: BlackOutBrakeStopLampSelect2566802686,
        convoy_driving_lamp_select: ConvoyDrivingLampSelect2566802686,
        convoy_lamp_select: ConvoyLampSelect2566802686,
        front_black_out_marker_lamp_select: FrontBlackOutMarkerLampSelect2566802686,
        rear_black_out_marker_select: RearBlackOutMarkerSelect2566802686,
    },
    Mci {
        slow_vessel_mode_status_raw_value: u8,
        trolling_mode_status_raw_value: u8,
        eng_thrttl_synchrnztion_mode_status_raw_value: u8,
        slow_vessel_mode_status: SlowVesselModeStatus2566774014,
        trolling_mode_status: TrollingModeStatus2566774014,
        eng_thrttl_synchrnztion_mode_status: EngThrttlSynchrnztionModeStatus2566774014,
    },
    Mbt3 {
        eng_main_bearing11_temp_raw_value: f64,
        eng_main_bearing10_temp_raw_value: f64,
        eng_main_bearing9_temp_raw_value: f64,
    },
    Mbt2 {
        eng_main_bearing8_temp_raw_value: f64,
        eng_main_bearing7_temp_raw_value: f64,
        eng_main_bearing6_temp_raw_value: f64,
        eng_main_bearing5_temp_raw_value: f64,
    },
    Mbt1 {
        eng_main_bearing4_temp_raw_value: f64,
        eng_main_bearing3_temp_raw_value: f64,
        eng_main_bearing2_temp_raw_value: f64,
        eng_main_bearing1_temp_raw_value: f64,
    },
    Lvdd {
        display_deadbands_raw_value: u8,
        led_pattern_ctrl_raw_value: u8,
        led_display_deadband_ctrl_raw_value: u8,
        led_display_mode_ctrl_raw_value: u8,
        led_display_data1_raw_value: u8,
        display_deadbands: DisplayDeadbands2432595710,
        led_pattern_ctrl: LedPatternCtrl2432595710,
        led_display_deadband_ctrl: LedDisplayDeadbandCtrl2432595710,
        led_display_mode_ctrl: LedDisplayModeCtrl2432595710,
        led_display_data1: LedDisplayData12432595710,
    },
    Lvd {
        abs_laser_strike_position_raw_value: f64,
        laser_strike_data_latency_raw_value: f64,
        laser_receiver_type_raw_value: u8,
        laser_strike_vertical_deviation_raw_value: f64,
        laser_receiver_type: LaserReceiverType2365486590,
    },
    Ltp {
        laser_tracer_information_raw_value: u8,
        led_display_data2_raw_value: u8,
        laser_tracer_horizontal_deviation_raw_value: u8,
        laser_tracer_vertical_distance_raw_value: f64,
        laser_tracer_target_deviation_raw_value: f64,
        laser_tracer_information: LaserTracerInformation2365485566,
        led_display_data2: LedDisplayData22365485566,
    },
    Ltfi {
        trip_pto_moving_fuel_used_raw_value: f64,
        trip_drive_fuel_used_raw_value: f64,
    },
    Lsp {
        bld_height_set_point_high_resolution_raw_value: f64,
        modify_set_point_raw_value: f64,
    },
    Loi {
        sdshft_dsrd_bld_offset_operator_ctrl_raw_value: u8,
        sdshft_bld_ctrl_mde_operator_control_raw_value: u8,
        rght_dsrd_blade_offset_operator_ctrl_raw_value: u8,
        rght_blde_ctrl_mode_operator_control_raw_value: u8,
        lft_dsred_blade_offset_operator_ctrl_raw_value: u8,
        lft_blade_ctrl_mode_operator_control_raw_value: u8,
        blade_auto_mode_cmd_raw_value: u8,
        desired_grade_offset_switch_raw_value: u8,
        blade_ctrl_mode_switch_raw_value: u8,
        sdshft_dsrd_bld_offset_operator_ctrl: SdshftDsrdBldOffsetOperatorCtrl2364542462,
        sdshft_bld_ctrl_mde_operator_control: SdshftBldCtrlMdeOperatorControl2364542462,
        rght_dsrd_blade_offset_operator_ctrl: RghtDsrdBladeOffsetOperatorCtrl2364542462,
        rght_blde_ctrl_mode_operator_control: RghtBldeCtrlModeOperatorControl2364542462,
        lft_dsred_blade_offset_operator_ctrl: LftDsredBladeOffsetOperatorCtrl2364542462,
        lft_blade_ctrl_mode_operator_control: LftBladeCtrlModeOperatorControl2364542462,
        blade_auto_mode_cmd: BladeAutoModeCmd2364542462,
        desired_grade_offset_switch: DesiredGradeOffsetSwitch2364542462,
        blade_ctrl_mode_switch: BladeCtrlModeSwitch2364542462,
    },
    Lmp {
        mast_pos_raw_value: f64,
    },
    Lfi {
        trip_average_fuel_rate_raw_value: f64,
        total_eng_pto_fuel_used_raw_value: f64,
    },
    Lfe {
        eng_average_fuel_economy_raw_value: f64,
        eng_instantaneous_fuel_economy_raw_value: f64,
        eng_fuel_rate_raw_value: f64,
        eng_throttle2_pos_raw_value: f64,
        eng_throttle_pos_raw_value: f64,
    },
    Lfc {
        eng_total_fuel_used_raw_value: f64,
        eng_trip_fuel_raw_value: f64,
    },
    Fwd {
        front_wheel_drive_actuator_status_raw_value: u8,
        front_wheel_drive_actuator_status: FrontWheelDriveActuatorStatus2633883646,
    },
    Fms {
        fm_sstandard_s_wversion_supported_raw_value: u32,
        fm_sstandard_rqs_supported_raw_value: u8,
        fm_sstandard_diagnostics_supported_raw_value: u8,
        fm_sstandard_rqs_supported: FmSstandardRqsSupported2633880062,
        fm_sstandard_diagnostics_supported: FmSstandardDiagnosticsSupported2633880062,
    },
    Fli2 {
        ln_dprture_indication_enable_status_raw_value: u8,
        lane_tracking_status_left_side_raw_value: u8,
        lane_tracking_status_right_side_raw_value: u8,
        ln_dprture_indication_enable_status: LnDprtureIndicationEnableStatus2566806526,
        lane_tracking_status_left_side: LaneTrackingStatusLeftSide2566806526,
        lane_tracking_status_right_side: LaneTrackingStatusRightSide2566806526,
    },
    Fli1 {
        lane_departure_imminent_left_side_raw_value: u8,
        lane_departure_imminent_right_side_raw_value: u8,
        lane_departure_imminent_left_side: LaneDepartureImminentLeftSide2431649790,
        lane_departure_imminent_right_side: LaneDepartureImminentRightSide2431649790,
    },
    Fl {
        eng_fuel_leakage2_raw_value: u8,
        eng_fuel_leakage1_raw_value: u8,
        eng_fuel_leakage2: EngFuelLeakage22633929214,
        eng_fuel_leakage1: EngFuelLeakage12633929214,
    },
    Fd {
        fan_speed_raw_value: f64,
        fan_drive_state_raw_value: u8,
        est_percent_fan_speed_raw_value: f64,
        fan_drive_state: FanDriveState2566831614,
    },
    Eth {
        calib_record_start_month_raw_value: u8,
        eng_peak_torque2_raw_value: u16,
        eng_peak_torque1_raw_value: u16,
        eng_power_raw_value: f64,
        number_of_eng_torque_history_records_raw_value: u8,
    },
    Etc8 {
        trans_torque_converter_ratio_raw_value: f64,
    },
    Etc7 {
        trans_rqed_gear_feedback_raw_value: f64,
        trans_mode1_indicator_raw_value: u8,
        trans_mode2_indicator_raw_value: u8,
        trans_mode3_indicator_raw_value: u8,
        trans_mode4_indicator_raw_value: u8,
        trans_shift_inhibit_indicator_raw_value: u8,
        trans_eng_crank_enable_raw_value: u8,
        active_shift_console_indicator_raw_value: u8,
        trans_ready_for_brake_release_raw_value: u8,
        trans_rqed_range_display_flash_state_raw_value: u8,
        trans_rqed_range_display_blank_state_raw_value: u8,
        trans_mode1_indicator: TransMode1Indicator2566802174,
        trans_mode2_indicator: TransMode2Indicator2566802174,
        trans_mode3_indicator: TransMode3Indicator2566802174,
        trans_mode4_indicator: TransMode4Indicator2566802174,
        trans_shift_inhibit_indicator: TransShiftInhibitIndicator2566802174,
        trans_eng_crank_enable: TransEngCrankEnable2566802174,
        active_shift_console_indicator: ActiveShiftConsoleIndicator2566802174,
        trans_ready_for_brake_release: TransReadyForBrakeRelease2566802174,
        trans_rqed_range_display_flash_state: TransRqedRangeDisplayFlashState2566802174,
        trans_rqed_range_display_blank_state: TransRqedRangeDisplayBlankState2566802174,
    },
    Etc6 {
        clutch_life_remaining_raw_value: f64,
        lowest_possible_gear_raw_value: f64,
        highest_possible_gear_raw_value: f64,
        recommended_gear_raw_value: f64,
    },
    Etc5 {
        trans_forward_direction_switch_raw_value: u8,
        trans_neutral_switch_raw_value: u8,
        trans_reverse_direction_switch_raw_value: u8,
        trans_low_range_sense_switch_raw_value: u8,
        trans_high_range_sense_switch_raw_value: u8,
        trans_forward_direction_switch: TransForwardDirectionSwitch2633942014,
        trans_neutral_switch: TransNeutralSwitch2633942014,
        trans_reverse_direction_switch: TransReverseDirectionSwitch2633942014,
        trans_low_range_sense_switch: TransLowRangeSenseSwitch2633942014,
        trans_high_range_sense_switch: TransHighRangeSenseSwitch2633942014,
    },
    Etc4 {
        trans_synchronizer_brake_value_raw_value: f64,
        trans_synchronizer_clutch_value_raw_value: f64,
    },
    Etc3 {
        trans_inertia_brake_actuator_raw_value: u8,
        trans_defuel_actuator_raw_value: u8,
        trans_lockup_clutch_actuator_raw_value: u8,
        trans_clutch_actuator_raw_value: u8,
        trans_splitter_indirect_actuator_raw_value: u8,
        trans_splitter_direct_actuator_raw_value: u8,
        trans_range_low_actuator_raw_value: u8,
        trans_range_high_actuator_raw_value: u8,
        trans_shift_finger_gear_actuator2_raw_value: u8,
        trans_shift_finger_rail_actuator2_raw_value: u8,
        trans_shift_finger_gear_actuator1_raw_value: u8,
        trans_shift_finger_rail_actuator1_raw_value: u8,
        trns_shft_fngr_center_rail_indicator_raw_value: u8,
        trns_shft_fngr_engagement_indicator_raw_value: u8,
        trns_shift_finger_neutral_indicator_raw_value: u8,
        trans_shift_finger_rail_pos_raw_value: f64,
        trans_shift_finger_gear_pos_raw_value: f64,
        trans_inertia_brake_actuator: TransInertiaBrakeActuator2633943038,
        trans_defuel_actuator: TransDefuelActuator2633943038,
        trans_lockup_clutch_actuator: TransLockupClutchActuator2633943038,
        trans_clutch_actuator: TransClutchActuator2633943038,
        trans_splitter_indirect_actuator: TransSplitterIndirectActuator2633943038,
        trans_splitter_direct_actuator: TransSplitterDirectActuator2633943038,
        trans_range_low_actuator: TransRangeLowActuator2633943038,
        trans_range_high_actuator: TransRangeHighActuator2633943038,
        trans_shift_finger_gear_actuator2: TransShiftFingerGearActuator22633943038,
        trans_shift_finger_rail_actuator2: TransShiftFingerRailActuator22633943038,
        trans_shift_finger_gear_actuator1: TransShiftFingerGearActuator12633943038,
        trans_shift_finger_rail_actuator1: TransShiftFingerRailActuator12633943038,
        trns_shft_fngr_center_rail_indicator: TrnsShftFngrCenterRailIndicator2633943038,
        trns_shft_fngr_engagement_indicator: TrnsShftFngrEngagementIndicator2633943038,
        trns_shift_finger_neutral_indicator: TrnsShiftFingerNeutralIndicator2633943038,
    },
    Etc2 {
        trans_current_range_raw_value: u16,
        trans_rqed_range_raw_value: u16,
        trans_current_gear_raw_value: f64,
        trans_actual_gear_ratio_raw_value: f64,
        trans_selected_gear_raw_value: f64,
    },
    Etc1 {
        src_addrss_of_ctrllng_dvc_fr_trns_ctrl_raw_value: u8,
        trans_input_shaft_speed_raw_value: f64,
        progressive_shift_disable_raw_value: u8,
        eng_momentary_overspeed_enable_raw_value: u8,
        percent_clutch_slip_raw_value: f64,
        trans_output_shaft_speed_raw_value: f64,
        trans_shift_in_process_raw_value: u8,
        torque_converter_lockup_engaged_raw_value: u8,
        trans_driveline_engaged_raw_value: u8,
        progressive_shift_disable: ProgressiveShiftDisable2364539646,
        eng_momentary_overspeed_enable: EngMomentaryOverspeedEnable2364539646,
        trans_shift_in_process: TransShiftInProcess2364539646,
        torque_converter_lockup_engaged: TorqueConverterLockupEngaged2364539646,
        trans_driveline_engaged: TransDrivelineEngaged2364539646,
    },
    Et3 {
        eng_charge_air_cooler_outlet_temp_raw_value: f64,
        eng_coolant_temp_hi_res_raw_value: f64,
        eng_intk_vlv_actation_system_oil_temp_raw_value: f64,
        eng_intake_manifold1_air_temp_raw_value: f64,
    },
    Et2 {
        eng_exhaust_gas_recirculation_temp_raw_value: f64,
        eng_exhst_gs_rcirculation_diff_press_raw_value: f64,
        eng_ecu_temp_raw_value: f64,
        eng_oil_temp2_raw_value: f64,
    },
    Et1 {
        eng_intercooler_thermostat_opening_raw_value: f64,
        eng_intercooler_temp_raw_value: f64,
        eng_turbo_oil_temp_raw_value: f64,
        eng_oil_temp1_raw_value: f64,
        eng_fuel_temp_raw_value: f64,
        eng_coolant_temp_raw_value: f64,
    },
    Et {
        eng_exhst_exhst_gs_temp_left_manifold_raw_value: f64,
        eng_exhst_exhst_gs_tmp_right_manifold_raw_value: f64,
    },
    Esc1 {
        sterable_lift_axle_lowering_inhibit_raw_value: u8,
        axle_location_raw_value: u8,
        type_of_steer_trans_raw_value: u8,
        type_of_steer_forces_raw_value: u8,
        steer_type_raw_value: u8,
        status_of_steer_axle_raw_value: u8,
        actual_inner_wheel_steer_angle_raw_value: f64,
        sterable_lift_axle_lowering_inhibit: SterableLiftAxleLoweringInhibit2565868542,
        type_of_steer_trans: TypeOfSteerTrans2565868542,
        type_of_steer_forces: TypeOfSteerForces2565868542,
        steer_type: SteerType2565868542,
        status_of_steer_axle: StatusOfSteerAxle2565868542,
    },
    Erc2 {
        trans_output_retarder_raw_value: u8,
        trans_output_retarder: TransOutputRetarder2633941758,
    },
    Erc1 {
        retarder_selection_non_eng_raw_value: f64,
        actl_mx_avlbl_rtarder_percent_torque_raw_value: f64,
        drvrs_dmand_retarder_percent_torque_raw_value: f64,
        src_addrss_of_ctrllng_dvc_fr_rtrdr_ctrl_raw_value: u8,
        retarder_rqing_brake_light_raw_value: u8,
        eng_coolant_load_increase_raw_value: u8,
        intended_retarder_percent_torque_raw_value: f64,
        actual_retarder_percent_torque_raw_value: f64,
        retarder_enable_shift_assist_switch_raw_value: u8,
        retarder_enable_brake_assist_switch_raw_value: u8,
        retarder_torque_mode_raw_value: u8,
        eng_coolant_load_increase: EngCoolantLoadIncrease2565865726,
        retarder_enable_shift_assist_switch: RetarderEnableShiftAssistSwitch2565865726,
        retarder_enable_brake_assist_switch: RetarderEnableBrakeAssistSwitch2565865726,
    },
    Ept5 {
        eng_exhaust_gas_port20_temp_raw_value: f64,
        eng_exhaust_gas_port19_temp_raw_value: f64,
        eng_exhaust_gas_port18_temp_raw_value: f64,
        eng_exhaust_gas_port17_temp_raw_value: f64,
    },
    Ept4 {
        eng_exhaust_gas_port16_temp_raw_value: f64,
        eng_exhaust_gas_port15_temp_raw_value: f64,
        eng_exhaust_gas_port14_temp_raw_value: f64,
        eng_exhaust_gas_port13_temp_raw_value: f64,
    },
    Ept3 {
        eng_exhaust_gas_port12_temp_raw_value: f64,
        eng_exhaust_gas_port11_temp_raw_value: f64,
        eng_exhaust_gas_port10_temp_raw_value: f64,
        eng_exhaust_gas_port9_temp_raw_value: f64,
    },
    Ept2 {
        eng_exhaust_gas_port8_temp_raw_value: f64,
        eng_exhaust_gas_port7_temp_raw_value: f64,
        eng_exhaust_gas_port6_temp_raw_value: f64,
        eng_exhaust_gas_port5_temp_raw_value: f64,
    },
    Ept1 {
        eng_exhaust_gas_port4_temp_raw_value: f64,
        eng_exhaust_gas_port3_temp_raw_value: f64,
        eng_exhaust_gas_port2_temp_raw_value: f64,
        eng_exhaust_gas_port1_temp_raw_value: f64,
    },
    Epd {
        payload_percentage_raw_value: u8,
    },
    Ep {
        data_memory_usage_raw_value: f64,
        keep_alive_battery_consumption_raw_value: u16,
    },
    Eoac {
        travel_velocity_ctrl_pos_raw_value: f64,
    },
    Eo1 {
        eng_exhst_gs_oxygn_snsr_clsd_lp_oprton_raw_value: u8,
        eng_exhst_gs_oxygn_snsr_flng_crrction_raw_value: f64,
        eng_actual_exhaust_oxygen_raw_value: f64,
        eng_desired_exhaust_oxygen_raw_value: f64,
        eng_desired_rated_exhaust_oxygen_raw_value: f64,
        eng_exhst_gs_oxygn_snsr_clsd_lp_oprton: EngExhstGsOxygnSnsrClsdLpOprton2633935358,
    },
    Ejm3 {
        jystck3_grip_x_axis_detent_pos_status_raw_value: u8,
        jystck3_grip_y_axis_detent_pos_status_raw_value: u8,
        jystck3_theta_axis_detent_pos_status_raw_value: u8,
        joystick3_theta_axis_pos_raw_value: f64,
        jystck3_tht_axs_clckws_pstv_ps_status_raw_value: u8,
        jystck3_tht_axs_cntr_clckws_ngtv_ps_stt_raw_value: u8,
        jystck3_thta_axis_neutral_pos_status_raw_value: u8,
        joystick3_grip_y_axis_pos_raw_value: f64,
        jystck3_grp_y_axs_lvr_frwrd_pstv_ps_stts_raw_value: u8,
        jystck3_grp_y_axs_lvr_bck_ngtv_ps_sttus_raw_value: u8,
        jystck3_grp_y_axis_neutral_pos_status_raw_value: u8,
        joystick3_grip_x_axis_pos_raw_value: f64,
        jystck3_grp_x_axs_lvr_rght_pstv_ps_stts_raw_value: u8,
        jystck3_grp_x_axs_lvr_lft_ngtv_ps_sttus_raw_value: u8,
        jystck3_grp_x_axis_neutral_pos_status_raw_value: u8,
        jystck3_grip_x_axis_detent_pos_status: Jystck3GripXAxisDetentPosStatus2365447166,
        jystck3_grip_y_axis_detent_pos_status: Jystck3GripYAxisDetentPosStatus2365447166,
        jystck3_theta_axis_detent_pos_status: Jystck3ThetaAxisDetentPosStatus2365447166,
        jystck3_tht_axs_clckws_pstv_ps_status: Jystck3ThtAxsClckwsPstvPsStatus2365447166,
        jystck3_tht_axs_cntr_clckws_ngtv_ps_stt: Jystck3ThtAxsCntrClckwsNgtvPsStt2365447166,
        jystck3_thta_axis_neutral_pos_status: Jystck3ThtaAxisNeutralPosStatus2365447166,
        jystck3_grp_y_axs_lvr_frwrd_pstv_ps_stts: Jystck3GrpYAxsLvrFrwrdPstvPsStts2365447166,
        jystck3_grp_y_axs_lvr_bck_ngtv_ps_sttus: Jystck3GrpYAxsLvrBckNgtvPsSttus2365447166,
        jystck3_grp_y_axis_neutral_pos_status: Jystck3GrpYAxisNeutralPosStatus2365447166,
        jystck3_grp_x_axs_lvr_rght_pstv_ps_stts: Jystck3GrpXAxsLvrRghtPstvPsStts2365447166,
        jystck3_grp_x_axs_lvr_lft_ngtv_ps_sttus: Jystck3GrpXAxsLvrLftNgtvPsSttus2365447166,
        jystck3_grp_x_axis_neutral_pos_status: Jystck3GrpXAxisNeutralPosStatus2365447166,
    },
    Ejm2 {
        jystck2_grip_x_axis_detent_pos_status_raw_value: u8,
        jystck2_grip_y_axis_detent_pos_status_raw_value: u8,
        jystck2_theta_axis_detent_pos_status_raw_value: u8,
        joystick2_theta_axis_pos_raw_value: f64,
        jystck2_tht_axs_clckws_pstv_ps_status_raw_value: u8,
        jystck2_tht_axs_cntr_clckws_ngtv_ps_stt_raw_value: u8,
        jystck2_thta_axis_neutral_pos_status_raw_value: u8,
        joystick2_grip_y_axis_pos_raw_value: f64,
        jystck2_grp_y_axs_lvr_frwrd_pstv_ps_stts_raw_value: u8,
        jystck2_grp_y_axs_lvr_bck_ngtv_ps_sttus_raw_value: u8,
        jystck2_grp_y_axis_neutral_pos_status_raw_value: u8,
        joystick2_grip_x_axis_pos_raw_value: f64,
        jystck2_grp_x_axs_lvr_rght_pstv_ps_stts_raw_value: u8,
        jystck2_grp_x_axs_lvr_lft_ngtv_ps_sttus_raw_value: u8,
        jystck2_grp_x_axis_neutral_pos_status_raw_value: u8,
        jystck2_grip_x_axis_detent_pos_status: Jystck2GripXAxisDetentPosStatus2365446654,
        jystck2_grip_y_axis_detent_pos_status: Jystck2GripYAxisDetentPosStatus2365446654,
        jystck2_theta_axis_detent_pos_status: Jystck2ThetaAxisDetentPosStatus2365446654,
        jystck2_tht_axs_clckws_pstv_ps_status: Jystck2ThtAxsClckwsPstvPsStatus2365446654,
        jystck2_tht_axs_cntr_clckws_ngtv_ps_stt: Jystck2ThtAxsCntrClckwsNgtvPsStt2365446654,
        jystck2_thta_axis_neutral_pos_status: Jystck2ThtaAxisNeutralPosStatus2365446654,
        jystck2_grp_y_axs_lvr_frwrd_pstv_ps_stts: Jystck2GrpYAxsLvrFrwrdPstvPsStts2365446654,
        jystck2_grp_y_axs_lvr_bck_ngtv_ps_sttus: Jystck2GrpYAxsLvrBckNgtvPsSttus2365446654,
        jystck2_grp_y_axis_neutral_pos_status: Jystck2GrpYAxisNeutralPosStatus2365446654,
        jystck2_grp_x_axs_lvr_rght_pstv_ps_stts: Jystck2GrpXAxsLvrRghtPstvPsStts2365446654,
        jystck2_grp_x_axs_lvr_lft_ngtv_ps_sttus: Jystck2GrpXAxsLvrLftNgtvPsSttus2365446654,
        jystck2_grp_x_axis_neutral_pos_status: Jystck2GrpXAxisNeutralPosStatus2365446654,
    },
    Ejm1 {
        jystck1_grip_x_axis_detent_pos_status_raw_value: u8,
        jystck1_grip_y_axis_detent_pos_status_raw_value: u8,
        jystck1_theta_axis_detent_pos_status_raw_value: u8,
        joystick1_theta_axis_pos_raw_value: f64,
        jystck1_tht_axs_clckws_pstv_ps_status_raw_value: u8,
        jystck1_tht_axs_cntr_clckws_ngtv_ps_stt_raw_value: u8,
        jystck1_thta_axis_neutral_pos_status_raw_value: u8,
        joystick1_grip_y_axis_pos_raw_value: f64,
        jystck1_grp_y_axs_lvr_frwrd_pstv_ps_stts_raw_value: u8,
        jystck1_grp_y_axs_lvr_bck_ngtv_ps_sttus_raw_value: u8,
        jystck1_grp_y_axis_neutral_pos_status_raw_value: u8,
        joystick1_grip_x_axis_pos_raw_value: f64,
        jystck1_grp_x_axs_lvr_rght_pstv_ps_stts_raw_value: u8,
        jystck1_grp_x_axs_lvr_lft_ngtv_ps_sttus_raw_value: u8,
        jystck1_grp_x_axis_neutral_pos_status_raw_value: u8,
        jystck1_grip_x_axis_detent_pos_status: Jystck1GripXAxisDetentPosStatus2365446142,
        jystck1_grip_y_axis_detent_pos_status: Jystck1GripYAxisDetentPosStatus2365446142,
        jystck1_theta_axis_detent_pos_status: Jystck1ThetaAxisDetentPosStatus2365446142,
        jystck1_tht_axs_clckws_pstv_ps_status: Jystck1ThtAxsClckwsPstvPsStatus2365446142,
        jystck1_tht_axs_cntr_clckws_ngtv_ps_stt: Jystck1ThtAxsCntrClckwsNgtvPsStt2365446142,
        jystck1_thta_axis_neutral_pos_status: Jystck1ThtaAxisNeutralPosStatus2365446142,
        jystck1_grp_y_axs_lvr_frwrd_pstv_ps_stts: Jystck1GrpYAxsLvrFrwrdPstvPsStts2365446142,
        jystck1_grp_y_axs_lvr_bck_ngtv_ps_sttus: Jystck1GrpYAxsLvrBckNgtvPsSttus2365446142,
        jystck1_grp_y_axis_neutral_pos_status: Jystck1GrpYAxisNeutralPosStatus2365446142,
        jystck1_grp_x_axs_lvr_rght_pstv_ps_stts: Jystck1GrpXAxsLvrRghtPstvPsStts2365446142,
        jystck1_grp_x_axs_lvr_lft_ngtv_ps_sttus: Jystck1GrpXAxsLvrLftNgtvPsSttus2365446142,
        jystck1_grp_x_axis_neutral_pos_status: Jystck1GrpXAxisNeutralPosStatus2365446142,
    },
    Ei {
        eng_fuel_rack_pos_raw_value: f64,
        instantaneous_est_brake_power_raw_value: f64,
        eng_mass_flow_raw_value: f64,
        eng_exhaust_gas_press_raw_value: f64,
        eng_prefilter_oil_press_raw_value: f64,
    },
    Eh {
        total_ecu_run_time_raw_value: f64,
        total_ecu_distance_raw_value: f64,
    },
    Egf1 {
        eng_inlet_air_mass_flow_rate_raw_value: f64,
        eng_exhst_gs_rcrcltion_mass_flow_rate_raw_value: f64,
    },
    Efs {
        eng_fuel_filter_suc_side_diff_press_raw_value: f64,
        eng_fuel_supply_pump_inlet_press_raw_value: f64,
        eng_oil_level_remote_reservoir_raw_value: f64,
        eng_waste_oil_reservoir_level_raw_value: f64,
        eng_ventilation_status_raw_value: u8,
        eng_oil_priming_state_raw_value: u8,
        eng_oil_priming_pump_switch_raw_value: u8,
        eng_oil_pre_heated_state_raw_value: u8,
        eng_oil_filter_outlet_press_raw_value: f64,
        eng_coolant_preheated_state_raw_value: u8,
        eng_waste_oil_reservoir_level: EngWasteOilReservoirLevel2566810366,
        eng_ventilation_status: EngVentilationStatus2566810366,
        eng_oil_priming_state: EngOilPrimingState2566810366,
        eng_oil_priming_pump_switch: EngOilPrimingPumpSwitch2566810366,
        eng_oil_pre_heated_state: EngOilPreHeatedState2566810366,
        eng_coolant_preheated_state: EngCoolantPreheatedState2566810366,
    },
    EflP3 {
        eng_exhst_gs_rcrculation_inlet_press_raw_value: f64,
        eng_intk_vlv_acttion_system_oil_press_raw_value: f64,
    },
    EflP2 {
        eng_injector_metering_rail2_press_raw_value: f64,
        eng_injector_timing_rail1_press_raw_value: f64,
        eng_injector_metering_rail1_press_raw_value: f64,
        eng_injection_ctrl_press_raw_value: f64,
    },
    EflP1 {
        eng_coolant_level_raw_value: f64,
        eng_coolant_press_raw_value: f64,
        eng_crankcase_press_raw_value: f64,
        eng_oil_press_raw_value: f64,
        eng_oil_level_raw_value: f64,
        eng_ex_crankcase_blowby_press_raw_value: f64,
        eng_fuel_delivery_press_raw_value: f64,
    },
    Ees {
        turning_gear_engaged_raw_value: u8,
        safety_wire_status_raw_value: u8,
        electrical_load_raw_value: f64,
        turning_gear_engaged: TurningGearEngaged2633929726,
        safety_wire_status: SafetyWireStatus2633929726,
    },
    Eec5 {
        eng_vrbl_gometry_turbo1_actuator_pos_raw_value: f64,
        eng_vrbl_gmtry_trb_ar_ctrl_shtff_valve_raw_value: u8,
        eng_exhst_gs_rcirculation_valve_ctrl_raw_value: f64,
        eng_trb1_clclted_turbine_outlet_temp_raw_value: f64,
        eng_trb1_clclated_turbine_inlet_temp_raw_value: f64,
        eng_vrbl_gmtry_trb_ar_ctrl_shtff_valve: EngVrblGmtryTrbArCtrlShtffValve2566772222,
    },
    Eec4 {
        eng_rotation_direction_raw_value: u8,
        crnk_attmpt_cnt_on_prsnt_strt_attempt_raw_value: u8,
        eng_rated_speed_raw_value: f64,
        eng_rated_power_raw_value: f64,
        eng_rotation_direction: EngRotationDirection2633940734,
    },
    Eec3 {
        exhaust_gas_mass_raw_value: f64,
        aftr_trtmnt_intake_dew_point_message_raw_value: u8,
        aftr_trtmnt_exhust_dew_point_message_raw_value: u8,
        est_eng_prstic_losses_percent_torque_raw_value: f64,
        engs_dsrd_oprtng_spd_asymmtry_adjstmn_raw_value: u8,
        engs_desired_operating_speed_raw_value: f64,
        nominal_friction_percent_torque_raw_value: f64,
    },
    Eec2 {
        act_max_avail_eng_percent_torque_raw_value: f64,
        accel_pedal_pos2_raw_value: f64,
        vhcl_acceleration_rate_limit_status_raw_value: u8,
        eng_percent_load_at_current_speed_raw_value: u8,
        accel_pedal2_low_idle_switch_raw_value: u8,
        road_speed_limit_status_raw_value: u8,
        accel_pedal_kickdown_switch_raw_value: u8,
        accel_pedal1_low_idle_switch_raw_value: u8,
        remote_accel_pedal_pos_raw_value: f64,
        accel_pedal_pos1_raw_value: f64,
        vhcl_acceleration_rate_limit_status: VhclAccelerationRateLimitStatus2364539902,
        accel_pedal2_low_idle_switch: AccelPedal2LowIdleSwitch2364539902,
        road_speed_limit_status: RoadSpeedLimitStatus2364539902,
        accel_pedal_kickdown_switch: AccelPedalKickdownSwitch2364539902,
        accel_pedal1_low_idle_switch: AccelPedal1LowIdleSwitch2364539902,
    },
    Eec1 {
        eng_demand_percent_torque_raw_value: f64,
        eng_starter_mode_raw_value: u8,
        src_addrss_of_ctrllng_dvc_for_eng_ctrl_raw_value: u8,
        eng_speed_raw_value: f64,
        actual_eng_percent_torque_raw_value: f64,
        drivers_demand_eng_percent_torque_raw_value: f64,
        eng_torque_mode_raw_value: u8,
        eng_starter_mode: EngStarterMode2364540158,
        eng_torque_mode: EngTorqueMode2364540158,
    },
    Ecuid {},
    Ect1 {
        eng_min_continuous_torque_raw_value: f64,
        eng_max_continuous_torque_raw_value: f64,
        eng_min_continuous_rpm_raw_value: f64,
        eng_max_continuous_rpm_raw_value: f64,
        eng_hgh_lmt_thrshhld_fr_mn_cntns_trq_frm_raw_value: f64,
        eng_lw_lmt_thrshld_fr_mx_trque_from_eng_raw_value: f64,
        eng_hgh_lmt_thrshhld_fr_mn_cntns_eng_rpm_raw_value: f64,
        eng_lw_lmt_thrshhld_fr_max_rpm_from_eng_raw_value: f64,
    },
    Ec1 {
        eng_speed_at_point3_raw_value: f64,
        eng_percent_torque_at_point2_raw_value: f64,
        eng_speed_at_point2_raw_value: f64,
        eng_percent_torque_at_idle_point1_raw_value: f64,
        eng_speed_at_idle_point1_raw_value: f64,
    },
    Ebc5 {
        brake_temp_warning_raw_value: u8,
        xbr_acceleration_limit_raw_value: f64,
        xbr_active_ctrl_mode_raw_value: u8,
        xbr_system_state_raw_value: u8,
        foundation_brake_use_raw_value: u8,
        hill_holder_mode_raw_value: u8,
        halt_brake_mode_raw_value: u8,
        brake_temp_warning: BrakeTempWarning2566767870,
        xbr_active_ctrl_mode: XbrActiveCtrlMode2566767870,
        xbr_system_state: XbrSystemState2566767870,
        foundation_brake_use: FoundationBrakeUse2566767870,
        hill_holder_mode: HillHolderMode2566767870,
        halt_brake_mode: HaltBrakeMode2566767870,
    },
    Ebc4 {
        brk_lnng_rmnng_rear_axle3_right_wheel_raw_value: f64,
        brk_lnng_rmning_rear_axle3_left_wheel_raw_value: f64,
        brk_lnng_rmnng_rear_axle2_right_wheel_raw_value: f64,
        brk_lnng_rmning_rear_axle2_left_wheel_raw_value: f64,
        brk_lnng_rmnng_rear_axle1_right_wheel_raw_value: f64,
        brk_lnng_rmning_rear_axle1_left_wheel_raw_value: f64,
        brk_lnng_rmnng_front_axle_right_wheel_raw_value: f64,
        brk_lnng_rmning_front_axle_left_wheel_raw_value: f64,
    },
    Ebc3 {
        brk_app_prss_hgh_rng_rr_axl3_rght_wheel_raw_value: f64,
        brk_app_prss_hgh_rng_rr_axl3_left_wheel_raw_value: f64,
        brk_app_prss_hgh_rng_rr_axl2_rght_wheel_raw_value: f64,
        brk_app_prss_hgh_rng_rr_axl2_left_wheel_raw_value: f64,
        brk_app_prss_hgh_rng_rr_axl1_rght_wheel_raw_value: f64,
        brk_app_prss_hgh_rng_rr_axl1_left_wheel_raw_value: f64,
        brk_app_prss_hgh_rng_frnt_axl_rght_whel_raw_value: f64,
        brk_app_prss_hgh_rng_frnt_axl_lft_wheel_raw_value: f64,
    },
    Ebc2 {
        rlative_speed_rear_axle2_right_wheel_raw_value: f64,
        relative_speed_rear_axle2_left_wheel_raw_value: f64,
        rlative_speed_rear_axle1_right_wheel_raw_value: f64,
        relative_speed_rear_axle1_left_wheel_raw_value: f64,
        rlative_speed_front_axle_right_wheel_raw_value: f64,
        relative_speed_front_axle_left_wheel_raw_value: f64,
        front_axle_speed_raw_value: f64,
    },
    Ebc1 {
        src_addrss_of_ctrllng_dvc_fr_brk_cntrl_raw_value: u8,
        brake_pedal_pos_raw_value: f64,
        trctr_mntd_triler_abs_warning_signal_raw_value: u8,
        trailer_abs_status_raw_value: u8,
        halt_brake_switch_raw_value: u8,
        atc_asr_information_signal_raw_value: u8,
        abs_ebs_amber_warning_signal_raw_value: u8,
        ebs_red_warning_signal_raw_value: u8,
        abs_fully_operational_raw_value: u8,
        eng_retarder_selection_raw_value: f64,
        remote_accel_enable_switch_raw_value: u8,
        eng_aux_eng_shutdown_switch_raw_value: u8,
        eng_derate_switch_raw_value: u8,
        accel_interlock_switch_raw_value: u8,
        traction_ctrl_override_switch_raw_value: u8,
        asr_hill_holder_switch_raw_value: u8,
        asr_offroad_switch_raw_value: u8,
        abs_offroad_switch_raw_value: u8,
        ebs_brake_switch_raw_value: u8,
        anti_lock_braking_active_raw_value: u8,
        asr_brake_ctrl_active_raw_value: u8,
        asr_eng_ctrl_active_raw_value: u8,
        trctr_mntd_triler_abs_warning_signal: TrctrMntdTrilerAbsWarningSignal2565865982,
        trailer_abs_status: TrailerAbsStatus2565865982,
        halt_brake_switch: HaltBrakeSwitch2565865982,
        atc_asr_information_signal: AtcAsrInformationSignal2565865982,
        abs_ebs_amber_warning_signal: AbsEbsAmberWarningSignal2565865982,
        ebs_red_warning_signal: EbsRedWarningSignal2565865982,
        abs_fully_operational: AbsFullyOperational2565865982,
        remote_accel_enable_switch: RemoteAccelEnableSwitch2565865982,
        eng_aux_eng_shutdown_switch: EngAuxEngShutdownSwitch2565865982,
        eng_derate_switch: EngDerateSwitch2565865982,
        accel_interlock_switch: AccelInterlockSwitch2565865982,
        traction_ctrl_override_switch: TractionCtrlOverrideSwitch2565865982,
        asr_hill_holder_switch: AsrHillHolderSwitch2565865982,
        asr_offroad_switch: AsrOffroadSwitch2565865982,
        abs_offroad_switch: AbsOffroadSwitch2565865982,
        ebs_brake_switch: EbsBrakeSwitch2565865982,
        anti_lock_braking_active: AntiLockBrakingActive2565865982,
        asr_brake_ctrl_active: AsrBrakeCtrlActive2565865982,
        asr_eng_ctrl_active: AsrEngCtrlActive2565865982,
    },
    Eac1 {
        rear_axle_group_engagement_status_raw_value: u8,
        front_axle_group_engagement_status_raw_value: u8,
        diff_lock_state_central_rear_raw_value: u8,
        diff_lock_state_central_front_raw_value: u8,
        diff_lock_state_central_raw_value: u8,
        diff_lock_state_rear_axle2_raw_value: u8,
        diff_lock_state_rear_axle1_raw_value: u8,
        diff_lock_state_front_axle2_raw_value: u8,
        diff_lock_state_front_axle1_raw_value: u8,
        location_raw_value: u8,
        rear_axle_group_engagement_status: RearAxleGroupEngagementStatus2565867262,
        front_axle_group_engagement_status: FrontAxleGroupEngagementStatus2565867262,
        diff_lock_state_central_rear: DiffLockStateCentralRear2565867262,
        diff_lock_state_central_front: DiffLockStateCentralFront2565867262,
        diff_lock_state_central: DiffLockStateCentral2565867262,
        diff_lock_state_rear_axle2: DiffLockStateRearAxle22565867262,
        diff_lock_state_rear_axle1: DiffLockStateRearAxle12565867262,
        diff_lock_state_front_axle2: DiffLockStateFrontAxle22565867262,
        diff_lock_state_front_axle1: DiffLockStateFrontAxle12565867262,
    },
    Eac {
        sea_water_pump_outlet_press_raw_value: f64,
        eng_aux_coolant_temp_raw_value: f64,
        eng_aux_coolant_press_raw_value: f64,
    },
    Di {},
    Dd {
        cargo_ambient_temp_raw_value: f64,
        eng_oil_filter_diff_press_raw_value: f64,
        eng_fuel_filter_diff_press_raw_value: f64,
        fuel_level_raw_value: f64,
        washer_fluid_level_raw_value: f64,
    },
    Csa {
        eng_start_enable_device2_config_raw_value: u8,
        eng_start_enable_device1_config_raw_value: u8,
        eng_start_enable_device2_raw_value: u8,
        eng_start_enable_device1_raw_value: u8,
        eng_start_enable_device2_config: EngStartEnableDevice2Config2566768382,
        eng_start_enable_device1_config: EngStartEnableDevice1Config2566768382,
        eng_start_enable_device2: EngStartEnableDevice22566768382,
        eng_start_enable_device1: EngStartEnableDevice12566768382,
    },
    Cvw {
        powered_vehicle_weight_raw_value: f64,
        gross_combination_vehicle_weight_raw_value: f64,
    },
    Ctl {
        mx_cntnuous_retarder_torque_limit_rq_raw_value: f64,
        mn_cntnuous_retarder_torque_limit_rq_raw_value: f64,
        mx_cntinuous_retarder_speed_limit_rq_raw_value: f64,
        mn_cntinuous_retarder_speed_limit_rq_raw_value: f64,
        eng_torque_limit_rq_max_continuous_raw_value: f64,
        eng_torque_limit_rq_min_continuous_raw_value: f64,
        eng_speed_limit_rq_max_continuous_raw_value: f64,
        eng_speed_limit_rq_min_continuous_raw_value: f64,
    },
    Ct6 {
        eng_average_combustion_time_raw_value: f64,
        eng_desired_combustion_time_raw_value: f64,
    },
    Ct5 {
        eng_cyl20_combustion_time_raw_value: f64,
        eng_cyl19_combustion_time_raw_value: f64,
        eng_cyl18_combustion_time_raw_value: f64,
        eng_cyl17_combustion_time_raw_value: f64,
    },
    Ct4 {
        eng_cyl16_combustion_time_raw_value: f64,
        eng_cyl15_combustion_time_raw_value: f64,
        eng_cyl14_combustion_time_raw_value: f64,
        eng_cyl13_combustion_time_raw_value: f64,
    },
    Ct3 {
        eng_cyl12_combustion_time_raw_value: f64,
        eng_cyl11_combustion_time_raw_value: f64,
        eng_cyl10_combustion_time_raw_value: f64,
        eng_cyl9_combustion_time_raw_value: f64,
    },
    Ct2 {
        eng_cyl8_combustion_time_raw_value: f64,
        eng_cyl7_combustion_time_raw_value: f64,
        eng_cyl6_combustion_time_raw_value: f64,
        eng_cyl5_combustion_time_raw_value: f64,
    },
    Ct1 {
        eng_cyl4_combustion_time_raw_value: f64,
        eng_cyl3_combustion_time_raw_value: f64,
        eng_cyl2_combustion_time_raw_value: f64,
        eng_cyl1_combustion_time_raw_value: f64,
    },
    Cmi {
        total_count_of_config_changes_made_raw_value: u16,
    },
    Cm3 {
        trans_oil_level_rq_raw_value: u8,
        fifth_wheel_release_ctrl_raw_value: u8,
        ffth_whl_rlase_ctrl_security_lockout_raw_value: u8,
        transfer_case_selector_switch_raw_value: u8,
        trans_oil_level_rq: TransOilLevelRq2566771966,
        fifth_wheel_release_ctrl: FifthWheelReleaseCtrl2566771966,
        ffth_whl_rlase_ctrl_security_lockout: FfthWhlRlaseCtrlSecurityLockout2566771966,
        transfer_case_selector_switch: TransferCaseSelectorSwitch2566771966,
    },
    Cm1 {
        selected_max_vehicle_speed_limit_raw_value: u8,
        rq_cab_zone_heating_raw_value: u8,
        rq_eng_zone_heating_raw_value: u8,
        aux_heater_mode_rq_raw_value: u8,
        eng_automatic_start_enable_switch_raw_value: u8,
        atmatic_gear_shifting_enable_switch_raw_value: u8,
        vhcl_lmtng_spd_gvernor_enable_switch_raw_value: u8,
        vhcl_lmtng_spd_gvrnr_incrment_switch_raw_value: u8,
        vhcl_lmtng_spd_gvrnr_dcrement_switch_raw_value: u8,
        seat_belt_switch_raw_value: u8,
        operator_seat_direction_switch_raw_value: u8,
        battery_main_switch_hold_rq_raw_value: u8,
        aux_heater_coolant_pump_rq_raw_value: u8,
        cab_interior_temp_cmd_raw_value: f64,
        rqed_percent_fan_speed_raw_value: f64,
        rq_cab_zone_heating: RqCabZoneHeating2564882174,
        rq_eng_zone_heating: RqEngZoneHeating2564882174,
        aux_heater_mode_rq: AuxHeaterModeRq2564882174,
        seat_belt_switch: SeatBeltSwitch2564882174,
        operator_seat_direction_switch: OperatorSeatDirectionSwitch2564882174,
        battery_main_switch_hold_rq: BatteryMainSwitchHoldRq2564882174,
        aux_heater_coolant_pump_rq: AuxHeaterCoolantPumpRq2564882174,
    },
    Cl {
        illumination_brightness_percent_raw_value: f64,
    },
    Ci {},
    Ccvs {
        park_brake_release_inhibit_rq_raw_value: u8,
        eng_shutdown_override_switch_raw_value: u8,
        eng_test_mode_switch_raw_value: u8,
        eng_idle_decrement_switch_raw_value: u8,
        eng_idle_increment_switch_raw_value: u8,
        cruise_ctrl_states_raw_value: u8,
        pto_state_raw_value: u8,
        cruise_ctrl_set_speed_raw_value: u8,
        cruise_ctrl_accelerate_switch_raw_value: u8,
        cruise_ctrl_resume_switch_raw_value: u8,
        cruise_ctrl_coast_switch_raw_value: u8,
        cruise_ctrl_set_switch_raw_value: u8,
        clutch_switch_raw_value: u8,
        brake_switch_raw_value: u8,
        cruise_ctrl_enable_switch_raw_value: u8,
        cruise_ctrl_active_raw_value: u8,
        wheel_based_vehicle_speed_raw_value: f64,
        cruise_ctrl_pause_switch_raw_value: u8,
        parking_brake_switch_raw_value: u8,
        two_speed_axle_switch_raw_value: u8,
        park_brake_release_inhibit_rq: ParkBrakeReleaseInhibitRq2566844926,
        eng_shutdown_override_switch: EngShutdownOverrideSwitch2566844926,
        eng_test_mode_switch: EngTestModeSwitch2566844926,
        eng_idle_decrement_switch: EngIdleDecrementSwitch2566844926,
        eng_idle_increment_switch: EngIdleIncrementSwitch2566844926,
        cruise_ctrl_accelerate_switch: CruiseCtrlAccelerateSwitch2566844926,
        cruise_ctrl_resume_switch: CruiseCtrlResumeSwitch2566844926,
        cruise_ctrl_coast_switch: CruiseCtrlCoastSwitch2566844926,
        cruise_ctrl_set_switch: CruiseCtrlSetSwitch2566844926,
        clutch_switch: ClutchSwitch2566844926,
        brake_switch: BrakeSwitch2566844926,
        cruise_ctrl_enable_switch: CruiseCtrlEnableSwitch2566844926,
        cruise_ctrl_active: CruiseCtrlActive2566844926,
        cruise_ctrl_pause_switch: CruiseCtrlPauseSwitch2566844926,
        parking_brake_switch: ParkingBrakeSwitch2566844926,
        two_speed_axle_switch: TwoSpeedAxleSwitch2566844926,
    },
    Ccss {
        cruise_ctrl_low_set_limit_speed_raw_value: u8,
        cruise_ctrl_high_set_limit_speed_raw_value: u8,
        max_vehicle_speed_limit_raw_value: u8,
    },
    Ccc {
        aux_heater_max_output_power_raw_value: f64,
    },
    Cbi {
        trip_compression_brake_distance_raw_value: f64,
        total_compression_brake_distance_raw_value: f64,
    },
    Caci {
        cb_a_c_rfrgrnt_cmprssor_outlet_press_raw_value: f64,
    },
    Bt1 {
        battery2_temp_raw_value: f64,
        battery1_temp_raw_value: f64,
    },
    Bm {
        battery_main_switch_hold_state_raw_value: u8,
        battery_main_switch_hold_state: BatteryMainSwitchHoldState2566809342,
    },
    Bjm3 {
        joystick3_x_axis_detent_pos_status_raw_value: u8,
        joystick3_button9_pressed_status_raw_value: u8,
        joystick3_button10_pressed_status_raw_value: u8,
        joystick3_button11_pressed_status_raw_value: u8,
        joystick3_button12_pressed_status_raw_value: u8,
        joystick3_y_axis_detent_pos_status_raw_value: u8,
        joystick3_y_axis_pos_raw_value: f64,
        jystck3_y_axs_lvr_frwrd_pstv_ps_status_raw_value: u8,
        jystck3_y_axs_lvr_bck_ngtve_pos_status_raw_value: u8,
        joystick3_y_axis_neutral_pos_status_raw_value: u8,
        joystick3_x_axis_pos_raw_value: f64,
        jystck3_x_axs_lvr_rght_pstv_pos_status_raw_value: u8,
        jystck3_x_axs_lvr_lft_ngtve_pos_status_raw_value: u8,
        joystick3_x_axis_neutral_pos_status_raw_value: u8,
        joystick3_button5_pressed_status_raw_value: u8,
        joystick3_button6_pressed_status_raw_value: u8,
        joystick3_button7_pressed_status_raw_value: u8,
        joystick3_button8_pressed_status_raw_value: u8,
        joystick3_button1_pressed_status_raw_value: u8,
        joystick3_button2_pressed_status_raw_value: u8,
        joystick3_button3_pressed_status_raw_value: u8,
        joystick3_button4_pressed_status_raw_value: u8,
        joystick3_x_axis_detent_pos_status: Joystick3XAxisDetentPosStatus2365446910,
        joystick3_button9_pressed_status: Joystick3Button9PressedStatus2365446910,
        joystick3_button10_pressed_status: Joystick3Button10PressedStatus2365446910,
        joystick3_button11_pressed_status: Joystick3Button11PressedStatus2365446910,
        joystick3_button12_pressed_status: Joystick3Button12PressedStatus2365446910,
        joystick3_y_axis_detent_pos_status: Joystick3YAxisDetentPosStatus2365446910,
        jystck3_y_axs_lvr_frwrd_pstv_ps_status: Jystck3YAxsLvrFrwrdPstvPsStatus2365446910,
        jystck3_y_axs_lvr_bck_ngtve_pos_status: Jystck3YAxsLvrBckNgtvePosStatus2365446910,
        joystick3_y_axis_neutral_pos_status: Joystick3YAxisNeutralPosStatus2365446910,
        jystck3_x_axs_lvr_rght_pstv_pos_status: Jystck3XAxsLvrRghtPstvPosStatus2365446910,
        jystck3_x_axs_lvr_lft_ngtve_pos_status: Jystck3XAxsLvrLftNgtvePosStatus2365446910,
        joystick3_x_axis_neutral_pos_status: Joystick3XAxisNeutralPosStatus2365446910,
        joystick3_button5_pressed_status: Joystick3Button5PressedStatus2365446910,
        joystick3_button6_pressed_status: Joystick3Button6PressedStatus2365446910,
        joystick3_button7_pressed_status: Joystick3Button7PressedStatus2365446910,
        joystick3_button8_pressed_status: Joystick3Button8PressedStatus2365446910,
        joystick3_button1_pressed_status: Joystick3Button1PressedStatus2365446910,
        joystick3_button2_pressed_status: Joystick3Button2PressedStatus2365446910,
        joystick3_button3_pressed_status: Joystick3Button3PressedStatus2365446910,
        joystick3_button4_pressed_status: Joystick3Button4PressedStatus2365446910,
    },
    Bjm2 {
        joystick2_x_axis_detent_pos_status_raw_value: u8,
        joystick2_y_axis_detent_pos_status_raw_value: u8,
        joystick2_y_axis_pos_raw_value: f64,
        jystck2_y_axs_lvr_frwrd_pstv_ps_status_raw_value: u8,
        jystck2_y_axs_lvr_bck_ngtve_pos_status_raw_value: u8,
        joystick2_y_axis_neutral_pos_status_raw_value: u8,
        joystick2_x_axis_pos_raw_value: f64,
        jystck2_x_axs_lvr_rght_pstv_pos_status_raw_value: u8,
        jystck2_x_axs_lvr_lft_ngtve_pos_status_raw_value: u8,
        joystick2_x_axis_neutral_pos_status_raw_value: u8,
        joystick2_button9_pressed_status_raw_value: u8,
        joystick2_button10_pressed_status_raw_value: u8,
        joystick2_button11_pressed_status_raw_value: u8,
        joystick2_button12_pressed_status_raw_value: u8,
        joystick2_button5_pressed_status_raw_value: u8,
        joystick2_button6_pressed_status_raw_value: u8,
        joystick2_button7_pressed_status_raw_value: u8,
        joystick2_button8_pressed_status_raw_value: u8,
        joystick2_button1_pressed_status_raw_value: u8,
        joystick2_button2_pressed_status_raw_value: u8,
        joystick2_button3_pressed_status_raw_value: u8,
        joystick2_button4_pressed_status_raw_value: u8,
        joystick2_x_axis_detent_pos_status: Joystick2XAxisDetentPosStatus2365446398,
        joystick2_y_axis_detent_pos_status: Joystick2YAxisDetentPosStatus2365446398,
        jystck2_y_axs_lvr_frwrd_pstv_ps_status: Jystck2YAxsLvrFrwrdPstvPsStatus2365446398,
        jystck2_y_axs_lvr_bck_ngtve_pos_status: Jystck2YAxsLvrBckNgtvePosStatus2365446398,
        joystick2_y_axis_neutral_pos_status: Joystick2YAxisNeutralPosStatus2365446398,
        jystck2_x_axs_lvr_rght_pstv_pos_status: Jystck2XAxsLvrRghtPstvPosStatus2365446398,
        jystck2_x_axs_lvr_lft_ngtve_pos_status: Jystck2XAxsLvrLftNgtvePosStatus2365446398,
        joystick2_x_axis_neutral_pos_status: Joystick2XAxisNeutralPosStatus2365446398,
        joystick2_button9_pressed_status: Joystick2Button9PressedStatus2365446398,
        joystick2_button10_pressed_status: Joystick2Button10PressedStatus2365446398,
        joystick2_button11_pressed_status: Joystick2Button11PressedStatus2365446398,
        joystick2_button12_pressed_status: Joystick2Button12PressedStatus2365446398,
        joystick2_button5_pressed_status: Joystick2Button5PressedStatus2365446398,
        joystick2_button6_pressed_status: Joystick2Button6PressedStatus2365446398,
        joystick2_button7_pressed_status: Joystick2Button7PressedStatus2365446398,
        joystick2_button8_pressed_status: Joystick2Button8PressedStatus2365446398,
        joystick2_button1_pressed_status: Joystick2Button1PressedStatus2365446398,
        joystick2_button2_pressed_status: Joystick2Button2PressedStatus2365446398,
        joystick2_button3_pressed_status: Joystick2Button3PressedStatus2365446398,
        joystick2_button4_pressed_status: Joystick2Button4PressedStatus2365446398,
    },
    Bjm1 {
        joystick1_x_axis_detent_pos_status_raw_value: u8,
        joystick1_y_axis_detent_pos_status_raw_value: u8,
        joystick1_y_axis_pos_raw_value: f64,
        jystck1_y_axs_lvr_frwrd_pstv_ps_status_raw_value: u8,
        jystck1_y_axs_lvr_bck_ngtve_pos_status_raw_value: u8,
        joystick1_y_axis_neutral_pos_status_raw_value: u8,
        joystick1_x_axis_pos_raw_value: f64,
        joystick1_button9_pressed_status_raw_value: u8,
        joystick1_button10_pressed_status_raw_value: u8,
        joystick1_button11_pressed_status_raw_value: u8,
        joystick1_button12_pressed_status_raw_value: u8,
        joystick1_button5_pressed_status_raw_value: u8,
        joystick1_button6_pressed_status_raw_value: u8,
        joystick1_button7_pressed_status_raw_value: u8,
        joystick1_button8_pressed_status_raw_value: u8,
        joystick1_button1_pressed_status_raw_value: u8,
        joystick1_button2_pressed_status_raw_value: u8,
        joystick1_button3_pressed_status_raw_value: u8,
        joystick1_button4_pressed_status_raw_value: u8,
        jystck1_x_axs_lvr_rght_pstv_pos_status_raw_value: u8,
        jystck1_x_axs_lvr_lft_ngtve_pos_status_raw_value: u8,
        joystick1_x_axis_neutral_pos_status_raw_value: u8,
        joystick1_x_axis_detent_pos_status: Joystick1XAxisDetentPosStatus2365445886,
        joystick1_y_axis_detent_pos_status: Joystick1YAxisDetentPosStatus2365445886,
        jystck1_y_axs_lvr_frwrd_pstv_ps_status: Jystck1YAxsLvrFrwrdPstvPsStatus2365445886,
        jystck1_y_axs_lvr_bck_ngtve_pos_status: Jystck1YAxsLvrBckNgtvePosStatus2365445886,
        joystick1_y_axis_neutral_pos_status: Joystick1YAxisNeutralPosStatus2365445886,
        joystick1_button9_pressed_status: Joystick1Button9PressedStatus2365445886,
        joystick1_button10_pressed_status: Joystick1Button10PressedStatus2365445886,
        joystick1_button11_pressed_status: Joystick1Button11PressedStatus2365445886,
        joystick1_button12_pressed_status: Joystick1Button12PressedStatus2365445886,
        joystick1_button5_pressed_status: Joystick1Button5PressedStatus2365445886,
        joystick1_button6_pressed_status: Joystick1Button6PressedStatus2365445886,
        joystick1_button7_pressed_status: Joystick1Button7PressedStatus2365445886,
        joystick1_button8_pressed_status: Joystick1Button8PressedStatus2365445886,
        joystick1_button1_pressed_status: Joystick1Button1PressedStatus2365445886,
        joystick1_button2_pressed_status: Joystick1Button2PressedStatus2365445886,
        joystick1_button3_pressed_status: Joystick1Button3PressedStatus2365445886,
        joystick1_button4_pressed_status: Joystick1Button4PressedStatus2365445886,
        jystck1_x_axs_lvr_rght_pstv_pos_status: Jystck1XAxsLvrRghtPstvPosStatus2365445886,
        jystck1_x_axs_lvr_lft_ngtve_pos_status: Jystck1XAxsLvrLftNgtvePosStatus2365445886,
        joystick1_x_axis_neutral_pos_status: Joystick1XAxisNeutralPosStatus2365445886,
    },
    B {
        parking_brake_red_warning_signal_raw_value: u8,
        park_brake_release_inhibit_status_raw_value: u8,
        parking_brake_actuator_raw_value: u8,
        brake_second_press_raw_value: f64,
        brake_primary_press_raw_value: f64,
        brake_app_press_raw_value: f64,
        parking_brake_red_warning_signal: ParkingBrakeRedWarningSignal2566847230,
        park_brake_release_inhibit_status: ParkBrakeReleaseInhibitStatus2566847230,
        parking_brake_actuator: ParkingBrakeActuator2566847230,
    },
    Awpp {
        aux_pump_press_raw_value: f64,
    },
    Ats {
        antitheft_random_number_raw_value: u64,
        antitheft_component_status_states_raw_value: u8,
        antthft_encryptn_sd_prsnt_indicator_raw_value: u8,
        antitheft_modify_pwd_states_raw_value: u8,
        antitheft_pwd_valid_indicator_raw_value: u8,
        antitheft_component_status_states: AntitheftComponentStatusStates2631728894,
        antthft_encryptn_sd_prsnt_indicator: AntthftEncryptnSdPrsntIndicator2631728894,
        antitheft_modify_pwd_states: AntitheftModifyPwdStates2631728894,
        antitheft_pwd_valid_indicator: AntitheftPwdValidIndicator2631728894,
    },
    Atr {
        antitheft_password_representation_raw_value: u64,
        antitheft_cmd_states_raw_value: u8,
        antitheft_desired_exit_mode_states_raw_value: u8,
        antthft_encrypton_indicator_states_raw_value: u8,
        antitheft_cmd_states: AntitheftCmdStates2631794430,
        antitheft_desired_exit_mode_states: AntitheftDesiredExitModeStates2631794430,
        antthft_encrypton_indicator_states: AntthftEncryptonIndicatorStates2631794430,
    },
    At {
        eng_alt_winding3_temp_raw_value: f64,
        eng_alt_winding2_temp_raw_value: f64,
        eng_alt_winding1_temp_raw_value: f64,
        eng_alt_bearing2_temp_raw_value: f64,
        eng_alt_bearing1_temp_raw_value: f64,
    },
    Asc6 {
        level_preset_rear_axle_right_raw_value: f64,
        level_preset_rear_axle_left_raw_value: f64,
        level_preset_front_axle_right_raw_value: f64,
        level_preset_front_axle_left_raw_value: f64,
    },
    Asc5 {
        elctrnc_shck_absrbr_ctrl_md_lft_tg_axl_raw_value: u8,
        elctrnc_shck_absrbr_ctrl_md_rear_axle_raw_value: u8,
        elctrnc_shck_absrbr_ctrl_md_frnt_axle_raw_value: u8,
        damper_stiffness_lift_tag_axle_raw_value: f64,
        damper_stiffness_rear_axle_raw_value: f64,
        damper_stiffness_front_axle_raw_value: f64,
        elctrnc_shck_absrbr_ctrl_md_lft_tg_axl: ElctrncShckAbsrbrCtrlMdLftTgAxl2365478910,
        elctrnc_shck_absrbr_ctrl_md_rear_axle: ElctrncShckAbsrbrCtrlMdRearAxle2365478910,
        elctrnc_shck_absrbr_ctrl_md_frnt_axle: ElctrncShckAbsrbrCtrlMdFrntAxle2365478910,
    },
    Asc4 {
        bellow_press_rear_axle_right_raw_value: f64,
        bellow_press_rear_axle_left_raw_value: f64,
        bellow_press_front_axle_right_raw_value: f64,
        bellow_press_front_axle_left_raw_value: f64,
    },
    Asc3 {
        relative_level_rear_axle_right_raw_value: f64,
        relative_level_rear_axle_left_raw_value: f64,
        relative_level_front_axle_right_raw_value: f64,
        relative_level_front_axle_left_raw_value: f64,
    },
    Asc2 {
        prohibit_air_suspension_ctrl_raw_value: u8,
        kneeling_cmd_rear_axle_raw_value: u8,
        kneeling_cmd_front_axle_raw_value: u8,
        damper_stiffness_rq_lift_tag_axle_raw_value: f64,
        damper_stiffness_rq_rear_axle_raw_value: f64,
        damper_stiffness_rq_front_axle_raw_value: f64,
        level_ctrl_mode_rq_raw_value: u8,
        nominal_level_rq_rear_axle_raw_value: u8,
        nominal_level_rq_front_axle_raw_value: u8,
        kneeling_ctrl_mode_rq_raw_value: u8,
        kneeling_rq_right_side_raw_value: u8,
        kneeling_rq_left_side_raw_value: u8,
        automatic_traction_help_raw_value: u8,
        lift_axle2_pos_cmd_raw_value: u8,
        lift_axle1_pos_cmd_raw_value: u8,
        prohibit_air_suspension_ctrl: ProhibitAirSuspensionCtrl2362638078,
        kneeling_cmd_rear_axle: KneelingCmdRearAxle2362638078,
        kneeling_cmd_front_axle: KneelingCmdFrontAxle2362638078,
        level_ctrl_mode_rq: LevelCtrlModeRq2362638078,
        nominal_level_rq_rear_axle: NominalLevelRqRearAxle2362638078,
        nominal_level_rq_front_axle: NominalLevelRqFrontAxle2362638078,
        kneeling_ctrl_mode_rq: KneelingCtrlModeRq2362638078,
        kneeling_rq_right_side: KneelingRqRightSide2362638078,
        kneeling_rq_left_side: KneelingRqLeftSide2362638078,
        automatic_traction_help: AutomaticTractionHelp2362638078,
        lift_axle2_pos_cmd: LiftAxle2PosCmd2362638078,
        lift_axle1_pos_cmd: LiftAxle1PosCmd2362638078,
    },
    Asc1 {
        sspension_ctrl_refusal_information_raw_value: u8,
        suspension_remote_ctrl2_raw_value: u8,
        suspension_remote_ctrl1_raw_value: u8,
        rear_axle_in_bumper_range_raw_value: u8,
        front_axle_in_bumper_range_raw_value: u8,
        door_release_raw_value: u8,
        vehicle_motion_inhibit_raw_value: u8,
        security_device_raw_value: u8,
        level_ctrl_mode_raw_value: u8,
        kneeling_information_raw_value: u8,
        lifting_ctrl_mode_rear_axle_raw_value: u8,
        lifting_ctrl_mode_front_axle_raw_value: u8,
        lowering_ctrl_mode_rear_axle_raw_value: u8,
        lowering_ctrl_mode_front_axle_raw_value: u8,
        above_nominal_level_rear_axle_raw_value: u8,
        above_nominal_level_front_axle_raw_value: u8,
        below_nominal_level_rear_axle_raw_value: u8,
        below_nominal_level_front_axle_raw_value: u8,
        nominal_level_rear_axle_raw_value: u8,
        nominal_level_front_axle_raw_value: u8,
        lift_axle2_pos_raw_value: u8,
        lift_axle1_pos_raw_value: u8,
        sspension_ctrl_refusal_information: SspensionCtrlRefusalInformation2365479678,
        suspension_remote_ctrl2: SuspensionRemoteCtrl22365479678,
        suspension_remote_ctrl1: SuspensionRemoteCtrl12365479678,
        rear_axle_in_bumper_range: RearAxleInBumperRange2365479678,
        front_axle_in_bumper_range: FrontAxleInBumperRange2365479678,
        door_release: DoorRelease2365479678,
        vehicle_motion_inhibit: VehicleMotionInhibit2365479678,
        security_device: SecurityDevice2365479678,
        level_ctrl_mode: LevelCtrlMode2365479678,
        kneeling_information: KneelingInformation2365479678,
        lifting_ctrl_mode_rear_axle: LiftingCtrlModeRearAxle2365479678,
        lifting_ctrl_mode_front_axle: LiftingCtrlModeFrontAxle2365479678,
        lowering_ctrl_mode_rear_axle: LoweringCtrlModeRearAxle2365479678,
        lowering_ctrl_mode_front_axle: LoweringCtrlModeFrontAxle2365479678,
        above_nominal_level_rear_axle: AboveNominalLevelRearAxle2365479678,
        above_nominal_level_front_axle: AboveNominalLevelFrontAxle2365479678,
        below_nominal_level_rear_axle: BelowNominalLevelRearAxle2365479678,
        below_nominal_level_front_axle: BelowNominalLevelFrontAxle2365479678,
        nominal_level_rear_axle: NominalLevelRearAxle2365479678,
        nominal_level_front_axle: NominalLevelFrontAxle2365479678,
        lift_axle2_pos: LiftAxle2Pos2365479678,
        lift_axle1_pos: LiftAxle1Pos2365479678,
    },
    As {
        alt4_status_raw_value: u8,
        alt3_status_raw_value: u8,
        alt2_status_raw_value: u8,
        alt1_status_raw_value: u8,
        alt_speed_raw_value: f64,
        alt4_status: Alt4Status2566837758,
        alt3_status: Alt3Status2566837758,
        alt2_status: Alt2Status2566837758,
        alt1_status: Alt1Status2566837758,
    },
    Ap {
        aux_abs_press_reading_raw_value: f64,
        aux_gage_press_reading1_raw_value: f64,
        aux_vacuum_press_reading_raw_value: f64,
    },
    Amb2 {
        solar_sensor_max_raw_value: f64,
        solar_intensity_percent_raw_value: f64,
    },
    Wsmem {
        arbitrary_address_capable_raw_value: bool,
        industry_group_raw_value: u8,
        vehicle_system_instance_raw_value: u8,
        vehicle_system_raw_value: u8,
        function_raw_value: u8,
        function_instance_raw_value: u8,
        ecu_instance_raw_value: u8,
        manufacturer_code_raw_value: u16,
        identity_number_raw_value: u32,
        industry_group: IndustryGroup2633895166,
    },
    Dm8 {
        test_limit_minimum_raw_value: u16,
        test_limit_maximum_raw_value: u16,
        test_value_raw_value: u16,
        test_type_raw_value: u8,
        test_identifier_raw_value: u8,
    },
    Dm7 {
        test_identifier_raw_value: u8,
    },
    Dm6 {
        spn2_raw_value: u16,
        flash_red_stop_lamp_raw_value: u8,
        flash_protect_lamp_raw_value: u8,
        flash_malfunc_indicator_lamp_raw_value: u8,
        flash_amber_warning_lamp_raw_value: u8,
        occurence_count1_raw_value: u8,
        spn_conversion_method1_raw_value: bool,
        failure_mode_identifier1_raw_value: u8,
        spn1_raw_value: u16,
        malfunction_indicator_lamp_status_raw_value: u8,
        red_stop_lamp_state_raw_value: u8,
        amber_warning_lamp_status_raw_value: u8,
        protect_lamp_status_raw_value: u8,
        spn1_high_raw_value: u8,
        flash_red_stop_lamp: FlashRedStopLamp2566836222,
        flash_protect_lamp: FlashProtectLamp2566836222,
        flash_malfunc_indicator_lamp: FlashMalfuncIndicatorLamp2566836222,
        flash_amber_warning_lamp: FlashAmberWarningLamp2566836222,
        failure_mode_identifier1: FailureModeIdentifier12566836222,
        malfunction_indicator_lamp_status: MalfunctionIndicatorLampStatus2566836222,
        red_stop_lamp_state: RedStopLampState2566836222,
        amber_warning_lamp_status: AmberWarningLampStatus2566836222,
        protect_lamp_status: ProtectLampStatus2566836222,
    },
    Dm5 {
        misfire_monitoring_support_raw_value: bool,
        obd_compliance_raw_value: u8,
        previously_active_trouble_codes_raw_value: u8,
        active_trouble_codes_raw_value: u8,
        second_air_system_mon_status_raw_value: bool,
        evaporative_system_mon_status_raw_value: bool,
        ac_system_refrigerant_mon_status_raw_value: bool,
        oxygen_sensor_heater_mon_status_raw_value: bool,
        oxygen_sensor_mon_status_raw_value: bool,
        egr_system_monitoring_status_raw_value: bool,
        catalyst_mon_status_raw_value: bool,
        cold_start_aid_system_mon_status_raw_value: bool,
        heated_catalyst_mon_status_raw_value: bool,
        catalyst_mon_supp_raw_value: bool,
        cold_start_aid_system_mon_supp_raw_value: bool,
        heated_catalyst_mon_supp_raw_value: bool,
        evaporative_system_mon_supp_raw_value: bool,
        second_air_system_mon_supp_raw_value: bool,
        ac_system_refrigerant_mon_supp_raw_value: bool,
        oxygen_sensor_mon_supp_raw_value: bool,
        oxygen_sensor_heater_mon_supp_raw_value: bool,
        egr_system_monitoring_supp_raw_value: bool,
        misfire_monitoring_status_raw_value: bool,
        comprehensive_comp_mon_status_raw_value: bool,
        fuel_system_monitoring_status_raw_value: bool,
        comprehensive_component_mon_supp_raw_value: bool,
        fuel_system_monitoring_support_raw_value: bool,
        misfire_monitoring_support: MisfireMonitoringSupport2566835966,
        obd_compliance: ObdCompliance2566835966,
        second_air_system_mon_status: SecondAirSystemMonStatus2566835966,
        evaporative_system_mon_status: EvaporativeSystemMonStatus2566835966,
        ac_system_refrigerant_mon_status: AcSystemRefrigerantMonStatus2566835966,
        oxygen_sensor_heater_mon_status: OxygenSensorHeaterMonStatus2566835966,
        oxygen_sensor_mon_status: OxygenSensorMonStatus2566835966,
        egr_system_monitoring_status: EgrSystemMonitoringStatus2566835966,
        catalyst_mon_status: CatalystMonStatus2566835966,
        cold_start_aid_system_mon_status: ColdStartAidSystemMonStatus2566835966,
        heated_catalyst_mon_status: HeatedCatalystMonStatus2566835966,
        catalyst_mon_supp: CatalystMonSupp2566835966,
        cold_start_aid_system_mon_supp: ColdStartAidSystemMonSupp2566835966,
        heated_catalyst_mon_supp: HeatedCatalystMonSupp2566835966,
        evaporative_system_mon_supp: EvaporativeSystemMonSupp2566835966,
        second_air_system_mon_supp: SecondAirSystemMonSupp2566835966,
        ac_system_refrigerant_mon_supp: AcSystemRefrigerantMonSupp2566835966,
        oxygen_sensor_mon_supp: OxygenSensorMonSupp2566835966,
        oxygen_sensor_heater_mon_supp: OxygenSensorHeaterMonSupp2566835966,
        egr_system_monitoring_supp: EgrSystemMonitoringSupp2566835966,
        misfire_monitoring_status: MisfireMonitoringStatus2566835966,
        comprehensive_comp_mon_status: ComprehensiveCompMonStatus2566835966,
        fuel_system_monitoring_status: FuelSystemMonitoringStatus2566835966,
        comprehensive_component_mon_supp: ComprehensiveComponentMonSupp2566835966,
        fuel_system_monitoring_support: FuelSystemMonitoringSupport2566835966,
    },
    Dm4 {
        occurence_count1_raw_value: u8,
        spn_conversion_method1_raw_value: bool,
        failure_mode_identifier1_raw_value: u8,
        spn1_raw_value: u16,
        freeze_frame_length_raw_value: u8,
        eng_speed_raw_value: f64,
        eng_torque_mode_raw_value: u8,
        eng_turbo_boost_press_raw_value: f64,
        spn1_high_raw_value: u8,
        failure_mode_identifier1: FailureModeIdentifier12566835710,
        eng_torque_mode: EngTorqueMode2566835710,
    },
    Dm3 {},
    Dm25 {
        occurence_count1_raw_value: u8,
        spn_conversion_method1_raw_value: bool,
        failure_mode_identifier1_raw_value: u8,
        spn1_raw_value: u16,
        expanded_freeze_frame_length_raw_value: u8,
        spn1_high_raw_value: u8,
        failure_mode_identifier1: FailureModeIdentifier12566764542,
    },
    Dm24 {
        spn_supported1_high_raw_value: u8,
        spn_support_type_eff2_raw_value: bool,
        spn_support_type_ds3_raw_value: bool,
        spn_support_type_ds2_raw_value: bool,
        spn_supported2_high_raw_value: u8,
        spn_supported2_raw_value: u16,
        spn_support_type_str1_raw_value: bool,
        spn_support_type_ds1_raw_value: bool,
        spn_support_type_eff1_raw_value: bool,
        spn_data_length2_raw_value: u8,
        spn_data_length1_raw_value: u8,
        spn_supported1_raw_value: u16,
        spn_support_type_eff2: SpnSupportTypeEff22566764286,
        spn_support_type_ds3: SpnSupportTypeDs32566764286,
        spn_support_type_ds2: SpnSupportTypeDs22566764286,
        spn_support_type_str1: SpnSupportTypeStr12566764286,
        spn_support_type_ds1: SpnSupportTypeDs12566764286,
        spn_support_type_eff1: SpnSupportTypeEff12566764286,
    },
    Dm23 {
        flash_red_stop_lamp_raw_value: u8,
        flash_protect_lamp_raw_value: u8,
        flash_malfunc_indicator_lamp_raw_value: u8,
        spn2_raw_value: u16,
        flash_amber_warning_lamp_raw_value: u8,
        occurence_count1_raw_value: u8,
        spn_conversion_method1_raw_value: bool,
        failure_mode_identifier1_raw_value: u8,
        spn1_raw_value: u16,
        malfunction_indicator_lamp_status_raw_value: u8,
        red_stop_lamp_state_raw_value: u8,
        amber_warning_lamp_status_raw_value: u8,
        protect_lamp_status_raw_value: u8,
        spn1_high_raw_value: u8,
        flash_red_stop_lamp: FlashRedStopLamp2555576062,
        flash_protect_lamp: FlashProtectLamp2555576062,
        flash_malfunc_indicator_lamp: FlashMalfuncIndicatorLamp2555576062,
        flash_amber_warning_lamp: FlashAmberWarningLamp2555576062,
        failure_mode_identifier1: FailureModeIdentifier12555576062,
        malfunction_indicator_lamp_status: MalfunctionIndicatorLampStatus2555576062,
        red_stop_lamp_state: RedStopLampState2555576062,
        amber_warning_lamp_status: AmberWarningLampStatus2555576062,
        protect_lamp_status: ProtectLampStatus2555576062,
    },
    Dm22 {
        individual_dtc_clear_control_byte_raw_value: u8,
        ctrl_byte_indic_individual_dtc_clear_raw_value: u8,
        spn1_raw_value: u16,
        spn1_high_raw_value: u8,
        failure_mode_identifier1_raw_value: u8,
        failure_mode_identifier1: FailureModeIdentifier12562981630,
    },
    Dm21 {
        time_since_dt_cs_cleared_raw_value: u16,
        minutes_run_by_engine_mil_activated_raw_value: u16,
        distance_since_dt_cs_cleared_raw_value: u16,
        distance_while_mi_lis_activated_raw_value: u16,
    },
    Dm20 {
        appl_sys_monitor_numerator_raw_value: u16,
        sp_nof_appl_sys_monitor_raw_value: u32,
        obd_monitoring_cond_encountered_raw_value: u16,
        ignition_cycle_counter_raw_value: u16,
    },
    Dm2 {
        spn2_raw_value: u16,
        occurence_count1_raw_value: u8,
        spn_conversion_method1_raw_value: bool,
        failure_mode_identifier1_raw_value: u8,
        spn1_raw_value: u16,
        malfunction_indicator_lamp_status_raw_value: u8,
        red_stop_lamp_state_raw_value: u8,
        amber_warning_lamp_status_raw_value: u8,
        protect_lamp_status_raw_value: u8,
        flash_red_stop_lamp_raw_value: u8,
        flash_protect_lamp_raw_value: u8,
        flash_malfunc_indicator_lamp_raw_value: u8,
        flash_amber_warning_lamp_raw_value: u8,
        spn1_high_raw_value: u8,
        failure_mode_identifier1: FailureModeIdentifier12566835198,
        malfunction_indicator_lamp_status: MalfunctionIndicatorLampStatus2566835198,
        red_stop_lamp_state: RedStopLampState2566835198,
        amber_warning_lamp_status: AmberWarningLampStatus2566835198,
        protect_lamp_status: ProtectLampStatus2566835198,
        flash_red_stop_lamp: FlashRedStopLamp2566835198,
        flash_protect_lamp: FlashProtectLamp2566835198,
        flash_malfunc_indicator_lamp: FlashMalfuncIndicatorLamp2566835198,
        flash_amber_warning_lamp: FlashAmberWarningLamp2566835198,
    },
    Dm19 {
        calibration_id1_raw_value: u32,
        calibration_verification_number_raw_value: u32,
    },
    Dm17 {},
    Dm16 {
        number_of_occurance_raw_value: u8,
    },
    Dm15 {
        number_allowed_raw_value: u8,
        seed_raw_value: u16,
        edcp_extension_raw_value: u8,
        error_indicator_raw_value: u32,
        status_raw_value: u8,
        number_allowed_high_raw_value: u8,
        seed: Seed2564357886,
        edcp_extension: EdcpExtension2564357886,
        error_indicator: ErrorIndicator2564357886,
        status: Status2564357886,
    },
    Dm14 {
        key_or_user_level_raw_value: u16,
        pointer_extension_raw_value: u8,
        pointer_raw_value: u32,
        command_raw_value: u8,
        pointer_type_raw_value: bool,
        number_requested_raw_value: u8,
        number_requested_high_raw_value: u8,
        key_or_user_level: KeyOrUserLevel2564423422,
        pointer_extension: PointerExtension2564423422,
        command: Command2564423422,
        pointer_type: PointerType2564423422,
    },
    Dm13 {
        hold_signal_raw_value: u8,
        j1939_network3_raw_value: u8,
        j1939_network2_raw_value: u8,
        iso9141_raw_value: u8,
        sae_j1850_raw_value: u8,
        manufacturer_specific_port_raw_value: u8,
        current_data_link_raw_value: u8,
        sae_j1587_raw_value: u8,
        sae_j1922_raw_value: u8,
        j1939_network1_raw_value: u8,
        suspend_signal_raw_value: u8,
        suspend_duration_raw_value: u16,
        hold_signal: HoldSignal2564816638,
        j1939_network3: J1939Network32564816638,
        j1939_network2: J1939Network22564816638,
        iso9141: Iso91412564816638,
        sae_j1850: SaeJ18502564816638,
        manufacturer_specific_port: ManufacturerSpecificPort2564816638,
        current_data_link: CurrentDataLink2564816638,
        sae_j1587: SaeJ15872564816638,
        sae_j1922: SaeJ19222564816638,
        j1939_network1: J1939Network12564816638,
        suspend_signal: SuspendSignal2564816638,
    },
    Dm12 {
        spn2_raw_value: u16,
        flash_red_stop_lamp_raw_value: u8,
        flash_protect_lamp_raw_value: u8,
        occurence_count1_raw_value: u8,
        spn_conversion_method1_raw_value: bool,
        failure_mode_identifier1_raw_value: u8,
        spn1_raw_value: u16,
        malfunction_indicator_lamp_status_raw_value: u8,
        red_stop_lamp_state_raw_value: u8,
        amber_warning_lamp_status_raw_value: u8,
        protect_lamp_status_raw_value: u8,
        flash_malfunc_indicator_lamp_raw_value: u8,
        flash_amber_warning_lamp_raw_value: u8,
        spn1_high_raw_value: u8,
        flash_red_stop_lamp: FlashRedStopLamp2566837502,
        flash_protect_lamp: FlashProtectLamp2566837502,
        failure_mode_identifier1: FailureModeIdentifier12566837502,
        malfunction_indicator_lamp_status: MalfunctionIndicatorLampStatus2566837502,
        red_stop_lamp_state: RedStopLampState2566837502,
        amber_warning_lamp_status: AmberWarningLampStatus2566837502,
        protect_lamp_status: ProtectLampStatus2566837502,
        flash_malfunc_indicator_lamp: FlashMalfuncIndicatorLamp2566837502,
        flash_amber_warning_lamp: FlashAmberWarningLamp2566837502,
    },
    Dm11 {},
    Dm10 {
        test_identifier_supported_raw_value: u64,
    },
    Dm1 {
        spn2_raw_value: u16,
        flash_red_stop_lamp_raw_value: u8,
        flash_protect_lamp_raw_value: u8,
        flash_malfunc_indicator_lamp_raw_value: u8,
        flash_amber_warning_lamp_raw_value: u8,
        malfunction_indicator_lamp_status_raw_value: u8,
        amber_warning_lamp_status_raw_value: u8,
        occurence_count1_raw_value: u8,
        spn_conversion_method1_raw_value: bool,
        failure_mode_identifier1_raw_value: u8,
        spn1_raw_value: u16,
        red_stop_lamp_state_raw_value: u8,
        protect_lamp_status_raw_value: u8,
        spn1_high_raw_value: u8,
        flash_red_stop_lamp: FlashRedStopLamp2566834942,
        flash_protect_lamp: FlashProtectLamp2566834942,
        flash_malfunc_indicator_lamp: FlashMalfuncIndicatorLamp2566834942,
        flash_amber_warning_lamp: FlashAmberWarningLamp2566834942,
        malfunction_indicator_lamp_status: MalfunctionIndicatorLampStatus2566834942,
        amber_warning_lamp_status: AmberWarningLampStatus2566834942,
        failure_mode_identifier1: FailureModeIdentifier12566834942,
        red_stop_lamp_state: RedStopLampState2566834942,
        protect_lamp_status: ProtectLampStatus2566834942,
    },
    Utacr {
        utlity_overall_power_factor_lagging_raw_value: u8,
        utility_overall_power_factor_raw_value: f64,
        utility_total_reactive_power_raw_value: f64,
    },
    Utacp {
        utility_total_apparent_power_raw_value: f64,
        utility_total_real_power_raw_value: f64,
    },
    Utace {
        utility_total_kw_hours_import_raw_value: u32,
        utility_total_kw_hours_export_raw_value: u32,
    },
    Upcacr {
        utility_phase_c_power_factor_lagging_raw_value: u8,
        utility_phase_c_power_factor_raw_value: f64,
        utility_phase_c_reactive_power_raw_value: f64,
    },
    Upcacp {
        utility_phase_c_apparent_power_raw_value: f64,
        utility_phase_c_real_power_raw_value: f64,
    },
    Upcac {
        utility_phase_cacrms_current_raw_value: u16,
        utility_phase_cac_frequency_raw_value: u16,
        utlty_phs_c_lne_neutral_acrms_voltage_raw_value: u16,
        utlty_phse_ca_line_line_acrms_voltage_raw_value: u16,
    },
    Upbacr {
        utility_phase_b_power_factor_lagging_raw_value: u8,
        utility_phase_b_power_factor_raw_value: f64,
        utility_phase_b_reactive_power_raw_value: f64,
    },
    Upbacp {
        utility_phase_b_apparent_power_raw_value: f64,
        utility_phase_b_real_power_raw_value: f64,
    },
    Upbac {
        utility_phase_bacrms_current_raw_value: u16,
        utility_phase_bac_frequency_raw_value: u16,
        utlty_phs_b_lne_neutral_acrms_voltage_raw_value: u16,
        utlty_phse_bc_line_line_acrms_voltage_raw_value: u16,
    },
    Upaccr {
        utility_phase_a_power_factor_lagging_raw_value: u8,
        utility_phase_a_power_factor_raw_value: f64,
        utility_phase_a_reactive_power_raw_value: f64,
    },
    Upaacp {
        utility_phase_a_apparent_power_raw_value: f64,
        utility_phase_a_real_power_raw_value: f64,
    },
    Upaac {
        utility_phase_aacrms_current_raw_value: u16,
        utility_phase_aac_frequency_raw_value: u16,
        utlty_phs_a_lne_neutral_acrms_voltage_raw_value: u16,
        utlty_phse_ab_line_line_acrms_voltage_raw_value: u16,
    },
    Uaac {
        utility_average_acrms_current_raw_value: u16,
        utility_average_ac_frequency_raw_value: u16,
        utlty_avrg_lne_neutral_acrms_voltage_raw_value: u16,
        utlty_avrage_line_line_acrms_voltage_raw_value: u16,
    },
    Gtacr {
        gnrtor_overall_power_factor_lagging_raw_value: u8,
        generator_overall_power_factor_raw_value: f64,
        generator_total_reactive_power_raw_value: f64,
    },
    Gtacp {
        generator_total_apparent_power_raw_value: f64,
        generator_total_real_power_raw_value: f64,
    },
    Gtace {
        generator_total_kw_hours_import_raw_value: u32,
        generator_total_kw_hours_export_raw_value: u32,
    },
    Gpcacr {
        gnrator_phase_c_power_factor_lagging_raw_value: u8,
        generator_phase_c_power_factor_raw_value: f64,
        generator_phase_c_reactive_power_raw_value: f64,
    },
    Gpcacp {
        generator_phase_c_apparent_power_raw_value: f64,
        generator_phase_c_real_power_raw_value: f64,
    },
    Gpcac {
        generator_phase_cacrms_current_raw_value: u16,
        generator_phase_cac_frequency_raw_value: u16,
        gnrtr_phs_c_lne_neutral_acrms_voltage_raw_value: u16,
        gnrtr_phse_ca_line_line_acrms_voltage_raw_value: u16,
    },
    Gpbacrp {
        gnrator_phase_b_power_factor_lagging_raw_value: u8,
        generator_phase_b_power_factor_raw_value: f64,
        generator_phase_b_reactive_power_raw_value: f64,
    },
    Gpbacp {
        generator_phase_b_apparent_power_raw_value: f64,
        generator_phase_b_real_power_raw_value: f64,
    },
    Gpbac {
        generator_phase_bacrms_current_raw_value: u16,
        generator_phase_bac_frequency_raw_value: u16,
        gnrtr_phs_b_lne_neutral_acrms_voltage_raw_value: u16,
        gnrtr_phse_bc_line_line_acrms_voltage_raw_value: u16,
    },
    Gpaacr {
        gnrator_phase_a_power_factor_lagging_raw_value: u8,
        generator_phase_a_power_factor_raw_value: f64,
        generator_phase_a_reactive_power_raw_value: f64,
    },
    Gpaacp {
        generator_phase_a_apparent_power_raw_value: f64,
        generator_phase_a_real_power_raw_value: f64,
    },
    Gpaac {
        generator_phase_aacrms_current_raw_value: u16,
        generator_phase_aac_frequency_raw_value: u16,
        gnrtr_phs_a_lne_neutral_acrms_voltage_raw_value: u16,
        gnrtr_phse_ab_line_line_acrms_voltage_raw_value: u16,
    },
    Gaac {
        generator_average_acrms_current_raw_value: u16,
        generator_average_ac_frequency_raw_value: u16,
        gnrtr_avrg_lne_neutral_acrms_voltage_raw_value: u16,
        gnrtr_avrage_line_line_acrms_voltage_raw_value: u16,
    },
    Busc {
        bus1_utility_ac_phase_difference_raw_value: f64,
        bus1_utility_in_sync_raw_value: u8,
        bus1_utility_voltage_match_raw_value: u8,
        bus1_utility_frequency_match_raw_value: u8,
        bus1_utility_phase_match_raw_value: u8,
        bus1_utility_dead_bus_raw_value: u8,
    },
    Bpcac {
        bus1_phase_cac_frequency_raw_value: u16,
        bs1_phse_c_line_neutral_acrms_voltage_raw_value: u16,
        bus1_phase_ca_line_line_acrms_voltage_raw_value: u16,
    },
    Bpbac {
        bus1_phase_bac_frequency_raw_value: u16,
        bs1_phse_b_line_neutral_acrms_voltage_raw_value: u16,
        bus1_phase_bc_line_line_acrms_voltage_raw_value: u16,
    },
    Bpaac {
        bus1_phase_aac_frequency_raw_value: u16,
        bs1_phse_a_line_neutral_acrms_voltage_raw_value: u16,
        bus1_phase_ab_line_line_acrms_voltage_raw_value: u16,
    },
    Bgsc {
        bus1_generator_ac_phase_difference_raw_value: f64,
        bus1_generator_in_sync_raw_value: u8,
        bus1_generator_voltage_match_raw_value: u8,
        bus1_generator_frequency_match_raw_value: u8,
        bus1_generator_phase_match_raw_value: u8,
        bus1_generator_dead_bus_raw_value: u8,
    },
    Baac {
        bus1_average_ac_frequency_raw_value: u16,
        bs1_avrge_line_neutral_acrms_voltage_raw_value: u16,
        bus1_average_line_line_acrms_voltage_raw_value: u16,
    },
    Wsmstr {
        number_of_members_raw_value: u8,
    },
    Ca {
        arbitrary_address_capable_raw_value: bool,
        industry_group_raw_value: u8,
        vehicle_system_instance_raw_value: u8,
        vehicle_system_raw_value: u8,
        function_raw_value: u8,
        function_instance_raw_value: u8,
        ecu_instance_raw_value: u8,
        manufacturer_code_raw_value: u16,
        identity_number_raw_value: u32,
        industry_group: IndustryGroup2566838526,
    },
    Acl {
        arbitrary_address_capable_raw_value: bool,
        industry_group_raw_value: u8,
        vehicle_system_instance_raw_value: u8,
        vehicle_system_raw_value: u8,
        function_raw_value: u8,
        function_instance_raw_value: u8,
        ecu_instance_raw_value: u8,
        manufacturer_code_raw_value: u16,
        identity_number_raw_value: u32,
        industry_group: IndustryGroup2565799678,
    },
    Xfer {
        shrt_name_of_actual_reporting_device_raw_value: u32,
        length_of_data_for_the_reported_pgn_raw_value: u8,
        pg_nof_requsted_information_raw_value: u32,
    },
    Tpdt {
        sequence_number_raw_value: u8,
    },
    Tpcm {
        total_number_of_packets_eo_ma_raw_value: Option<u8>,
        total_message_size_eo_ma_raw_value: Option<u16>,
        total_message_size_bam_raw_value: Option<u16>,
        total_number_of_packets_bam_raw_value: Option<u8>,
        connection_abort_reason_raw_value: Option<u8>,
        next_packet_number_to_be_sent_raw_value: Option<u8>,
        number_of_packets_that_can_be_sent_raw_value: Option<u8>,
        pg_number_raw_value: u32,
        maximum_number_of_packets_raw_value: Option<u8>,
        total_number_of_packets_raw_value: Option<u8>,
        total_message_size_raw_value: Option<u16>,
        control_byte_raw_value: u8,
        pg_number: PgNumber2565668606,
        control_byte: ControlByte2565668606,
    },
    Rqst2 {
        use_transfer_mode_raw_value: u8,
        parameter_group_number_raw_value: u32,
        use_transfer_mode: UseTransferMode2563374846,
    },
    Rqst {
        parameter_group_number_raw_value: u32,
    },
    Dm29 {
        permanent_dt_cs_raw_value: u8,
        previously_mil_on_dt_cs_raw_value: u8,
        mil_on_dt_cs_raw_value: u8,
        all_pending_dt_cs_raw_value: u8,
        pending_dt_cs_raw_value: u8,
    },
    Dm28 {
        spn2_raw_value: u16,
        flash_red_stop_lamp_raw_value: u8,
        flash_protect_lamp_raw_value: u8,
        flash_malfunc_indicator_lamp_raw_value: u8,
        flash_amber_warning_lamp_raw_value: u8,
        malfunction_indicator_lamp_status_raw_value: u8,
        amber_warning_lamp_status_raw_value: u8,
        occurence_count1_raw_value: u8,
        spn_conversion_method1_raw_value: bool,
        failure_mode_identifier1_raw_value: u8,
        spn1_raw_value: u16,
        red_stop_lamp_state_raw_value: u8,
        protect_lamp_status_raw_value: u8,
        spn1_high_raw_value: u8,
        flash_red_stop_lamp: FlashRedStopLamp2566750462,
        flash_protect_lamp: FlashProtectLamp2566750462,
        flash_malfunc_indicator_lamp: FlashMalfuncIndicatorLamp2566750462,
        flash_amber_warning_lamp: FlashAmberWarningLamp2566750462,
        malfunction_indicator_lamp_status: MalfunctionIndicatorLampStatus2566750462,
        amber_warning_lamp_status: AmberWarningLampStatus2566750462,
        failure_mode_identifier1: FailureModeIdentifier12566750462,
        red_stop_lamp_state: RedStopLampState2566750462,
        protect_lamp_status: ProtectLampStatus2566750462,
    },
    Dm27 {
        spn2_raw_value: u16,
        flash_red_stop_lamp_raw_value: u8,
        flash_protect_lamp_raw_value: u8,
        flash_malfunc_indicator_lamp_raw_value: u8,
        flash_amber_warning_lamp_raw_value: u8,
        malfunction_indicator_lamp_status_raw_value: u8,
        amber_warning_lamp_status_raw_value: u8,
        occurence_count1_raw_value: u8,
        spn_conversion_method1_raw_value: bool,
        failure_mode_identifier1_raw_value: u8,
        spn1_raw_value: u16,
        red_stop_lamp_state_raw_value: u8,
        protect_lamp_status_raw_value: u8,
        spn1_high_raw_value: u8,
        flash_red_stop_lamp: FlashRedStopLamp2566750974,
        flash_protect_lamp: FlashProtectLamp2566750974,
        flash_malfunc_indicator_lamp: FlashMalfuncIndicatorLamp2566750974,
        flash_amber_warning_lamp: FlashAmberWarningLamp2566750974,
        malfunction_indicator_lamp_status: MalfunctionIndicatorLampStatus2566750974,
        amber_warning_lamp_status: AmberWarningLampStatus2566750974,
        failure_mode_identifier1: FailureModeIdentifier12566750974,
        red_stop_lamp_state: RedStopLampState2566750974,
        protect_lamp_status: ProtectLampStatus2566750974,
    },
    Ati2 {
        aftrtrtmnt2_trp_actv_rgnration_time_raw_value: u32,
        aftertreatment2_trip_fuel_used_raw_value: f64,
    },
    Ati1 {
        aftrtrtmnt1_trp_actv_rgnration_time_raw_value: u32,
        aftertreatment1_trip_fuel_used_raw_value: f64,
    },
    Aac3 {
        aftertreatment1_second_air_press_raw_value: f64,
        aftrtreatment1_second_air_mass_flow_raw_value: f64,
        aftertreatment1_second_air_temp_raw_value: f64,
        aftrtratment1_second_air_diff_press_raw_value: f64,
    },
    Aac4 {
        aftertreatment2_second_air_press_raw_value: f64,
        aftrtreatment2_second_air_mass_flow_raw_value: f64,
        aftertreatment2_second_air_temp_raw_value: f64,
        aftrtratment2_second_air_diff_press_raw_value: f64,
    },
    Aetc {
        number_of_aetc_data_points_raw_value: u8,
        aetc_data_collection_standard_raw_value: u8,
        aetc_data_collection_standard: AetcDataCollectionStandard2566754558,
    },
    Afss {
        right_headlamp_light_distribution_raw_value: u8,
        left_headlamp_light_distribution_raw_value: u8,
        rght_headlamp_dynamic_bending_light_raw_value: u8,
        left_headlamp_dynamic_bending_light_raw_value: u8,
        right_headlamp_light_distribution: RightHeadlampLightDistribution2566749950,
        left_headlamp_light_distribution: LeftHeadlampLightDistribution2566749950,
        rght_headlamp_dynamic_bending_light: RghtHeadlampDynamicBendingLight2566749950,
        left_headlamp_dynamic_bending_light: LeftHeadlampDynamicBendingLight2566749950,
    },
    At1i1 {
        aftrtrtmnt1_intk_oxygn_snsr_prlmnry_f_raw_value: u8,
        aftrtrtmnt1_intk_n_ox_snsr_prlmnry_fmi_raw_value: u8,
        aftrtrtmnt1_intk_gs_snsr_heater_ctrl_raw_value: u8,
        aftrtrtmnt1_intk_gs_snsr_htr_prlmnry_f_raw_value: u8,
        aftrtrtmnt1_intk_wd_rng_o2_rdng_stble_raw_value: u8,
        aftrtrtmnt1_intk_n_ox_reading_stable_raw_value: u8,
        aftrtrtmnt1_intke_gas_sensor_at_temp_raw_value: u8,
        aftrtrtmnt1_intk_gs_snsr_pwr_in_range_raw_value: u8,
        aftertreatment1_intake_o2_raw_value: f64,
        aftertreatment1_intake_n_ox_raw_value: f64,
        aftrtrtmnt1_intk_gs_snsr_heater_ctrl: Aftrtrtmnt1IntkGsSnsrHeaterCtrl2565869310,
        aftrtrtmnt1_intk_wd_rng_o2_rdng_stble: Aftrtrtmnt1IntkWdRngO2RdngStble2565869310,
        aftrtrtmnt1_intk_n_ox_reading_stable: Aftrtrtmnt1IntkNOxReadingStable2565869310,
        aftrtrtmnt1_intk_gs_snsr_pwr_in_range: Aftrtrtmnt1IntkGsSnsrPwrInRange2565869310,
    },
    At1i2 {
        aftrtrtmnt1_prtclt_trp_intk_gs_tmp_prl_raw_value: u8,
        aftrtrtmnt1_exhst_gs_tmp1_prlmnry_fmi_raw_value: u8,
        aftrtrtmnt1_prtclt_trp_intk_gas_temp_raw_value: f64,
        aftertreatment1_exhaust_gas_temp1_raw_value: f64,
    },
    At1o1 {
        aftrtrtmnt1_otlt_oxygn_snsr_prlmnry_f_raw_value: u8,
        aftrtrtmnt1_otlt_n_ox_snsr_prlmnry_fmi_raw_value: u8,
        aftrtrtmnt1_otlt_gs_snsr_heater_ctrl_raw_value: u8,
        aftrtrtmnt1_otlt_gs_snsr_htr_prlmnry_f_raw_value: u8,
        aftrtrtmnt1_otlt_wd_rng_o2_rdng_stble_raw_value: u8,
        aftrtrtmnt1_otlt_n_ox_reading_stable_raw_value: u8,
        aftrtrtmnt1_otlet_gas_sensor_at_temp_raw_value: u8,
        aftrtrtmnt1_otlt_gs_snsr_pwr_in_range_raw_value: u8,
        aftertreatment1_outlet_o2_raw_value: f64,
        aftertreatment1_outlet_n_ox_raw_value: f64,
        aftrtrtmnt1_otlt_gs_snsr_heater_ctrl: Aftrtrtmnt1OtltGsSnsrHeaterCtrl2565869566,
        aftrtrtmnt1_otlt_wd_rng_o2_rdng_stble: Aftrtrtmnt1OtltWdRngO2RdngStble2565869566,
        aftrtrtmnt1_otlt_n_ox_reading_stable: Aftrtrtmnt1OtltNOxReadingStable2565869566,
        aftrtrtmnt1_otlet_gas_sensor_at_temp: Aftrtrtmnt1OtletGasSensorAtTemp2565869566,
        aftrtrtmnt1_otlt_gs_snsr_pwr_in_range: Aftrtrtmnt1OtltGsSnsrPwrInRange2565869566,
    },
    At1o2 {
        aftrtrtmnt1_prtclt_trp_otlt_exhst_gs_t_raw_value: u8,
        aftrtrtmnt1_exhst_gs_tmp3_prlmnry_fmi_raw_value: u8,
        aftrtrtmnt1_prtclt_trp_otlt_gas_temp_raw_value: f64,
        aftertreatment1_exhaust_gas_temp3_raw_value: f64,
    },
    At2i1 {
        aftrtrtmnt2_intk_oxygn_snsr_prlmnry_f_raw_value: u8,
        aftrtrtmnt2_intk_n_ox_snsr_prlmnry_fmi_raw_value: u8,
        aftrtrtmnt2_intk_gs_snsr_heater_ctrl_raw_value: u8,
        aftrtrtmnt2_intk_gs_snsr_htr_prlmnry_f_raw_value: u8,
        aftrtrtmnt2_intk_wd_rng_o2_rdng_stble_raw_value: u8,
        aftrtrtmnt2_intk_n_ox_reading_stable_raw_value: u8,
        aftrtrtmnt2_intke_gas_sensor_at_temp_raw_value: u8,
        aftrtrtmnt2_intk_gs_snsr_pwr_in_range_raw_value: u8,
        aftertreatment2_intake_o2_raw_value: f64,
        aftertreatment2_intake_n_ox_raw_value: f64,
        aftrtrtmnt2_intk_gs_snsr_heater_ctrl: Aftrtrtmnt2IntkGsSnsrHeaterCtrl2565869822,
        aftrtrtmnt2_intk_wd_rng_o2_rdng_stble: Aftrtrtmnt2IntkWdRngO2RdngStble2565869822,
        aftrtrtmnt2_intk_n_ox_reading_stable: Aftrtrtmnt2IntkNOxReadingStable2565869822,
        aftrtrtmnt2_intke_gas_sensor_at_temp: Aftrtrtmnt2IntkeGasSensorAtTemp2565869822,
        aftrtrtmnt2_intk_gs_snsr_pwr_in_range: Aftrtrtmnt2IntkGsSnsrPwrInRange2565869822,
    },
    At2i2 {
        aftrtrtmnt2_prtclt_trp_intk_gs_tmp_prl_raw_value: u8,
        aftrtrtmnt2_exhst_gs_tmp1_prlmnry_fmi_raw_value: u8,
        aftrtrtmnt2_prtclt_trp_intk_gas_temp_raw_value: f64,
        aftertreatment2_exhaust_gas_temp1_raw_value: f64,
    },
    At2o1 {
        aftrtrtmnt2_otlt_oxygn_snsr_prlmnry_f_raw_value: u8,
        aftrtrtmnt2_otlt_n_ox_snsr_prlmnry_fmi_raw_value: u8,
        aftrtrtmnt2_otlt_gs_snsr_heater_ctrl_raw_value: u8,
        aftrtrtmnt2_otlt_gs_snsr_htr_prlmnry_f_raw_value: u8,
        aftrtrtmnt2_otlt_wd_rng_o2_rdng_stble_raw_value: u8,
        aftrtrtmnt2_otlt_n_ox_reading_stable_raw_value: u8,
        aftrtrtmnt2_otlet_gas_sensor_at_temp_raw_value: u8,
        aftrtrtmnt2_otlt_gs_snsr_pwr_in_range_raw_value: u8,
        aftertreatment2_outlet_o2_raw_value: f64,
        aftertreatment2_outlet_n_ox_raw_value: f64,
        aftrtrtmnt2_otlt_gs_snsr_heater_ctrl: Aftrtrtmnt2OtltGsSnsrHeaterCtrl2565870078,
        aftrtrtmnt2_otlt_wd_rng_o2_rdng_stble: Aftrtrtmnt2OtltWdRngO2RdngStble2565870078,
        aftrtrtmnt2_otlt_n_ox_reading_stable: Aftrtrtmnt2OtltNOxReadingStable2565870078,
        aftrtrtmnt2_otlet_gas_sensor_at_temp: Aftrtrtmnt2OtletGasSensorAtTemp2565870078,
        aftrtrtmnt2_otlt_gs_snsr_pwr_in_range: Aftrtrtmnt2OtltGsSnsrPwrInRange2565870078,
    },
    At2o2 {
        aftrtrtmnt2_prtclt_trp_exhst_gs_tmp_pr_raw_value: u8,
        aftrtrtmnt2_exhst_gs_tmp3_prlmnry_fmi_raw_value: u8,
        aftrtrtmnt2_prtclt_trp_otlt_gas_temp_raw_value: f64,
        aftertreatment2_exhaust_gas_temp3_raw_value: f64,
    },
    Atgp1 {
        particulate_trap_outlet_press1_raw_value: f64,
        particulate_trap_intake_press1_raw_value: f64,
    },
    Atgp2 {
        particulate_trap_outlet_press2_raw_value: f64,
        particulate_trap_intake_press2_raw_value: f64,
    },
    Atm2 {
        aftrtrtmnt2_prtclt_trp_dlt_prss_prlmn_raw_value: u8,
        aftrtrtmnt2_exhst_gs_tmp2_prlmnry_fmi_raw_value: u8,
        aftrtrtmnt2_prtclte_trap_diff_press_raw_value: f64,
        aftrtrtmnt2_prtclt_trp_intrmdt_gs_tmp_raw_value: f64,
        aftertreatment2_exhaust_gas_temp2_raw_value: f64,
    },
    Ats1 {
        prtclt_trp1_tm_snc_lst_actv_rgnration_raw_value: u32,
        particulate_trap1_ash_load_percent_raw_value: u8,
        particulate_trap1_soot_load_percent_raw_value: u8,
        particulate_trap1_ash_load_percent: ParticulateTrap1AshLoadPercent2566749182,
        particulate_trap1_soot_load_percent: ParticulateTrap1SootLoadPercent2566749182,
    },
    Ats2 {
        prtclt_trp2_tm_snc_lst_actv_rgnration_raw_value: u32,
        particulate_trap2_ash_load_percent_raw_value: u8,
        particulate_trap2_soot_load_percent_raw_value: u8,
        particulate_trap2_ash_load_percent: ParticulateTrap2AshLoadPercent2566748926,
        particulate_trap2_soot_load_percent: ParticulateTrap2SootLoadPercent2566748926,
    },
    Auxio1 {
        aux_i_o_channel2_raw_value: u16,
        aux_i_o_channel1_raw_value: u16,
    },
    Auxio2 {
        aux_i_o45_raw_value: u8,
        aux_i_o46_raw_value: u8,
        aux_i_o47_raw_value: u8,
        aux_i_o48_raw_value: u8,
        aux_i_o41_raw_value: u8,
        aux_i_o42_raw_value: u8,
        aux_i_o43_raw_value: u8,
        aux_i_o44_raw_value: u8,
        aux_i_o37_raw_value: u8,
        aux_i_o38_raw_value: u8,
        aux_i_o39_raw_value: u8,
        aux_i_o40_raw_value: u8,
        aux_i_o33_raw_value: u8,
        aux_i_o34_raw_value: u8,
        aux_i_o35_raw_value: u8,
        aux_i_o36_raw_value: u8,
        aux_i_o29_raw_value: u8,
        aux_i_o30_raw_value: u8,
        aux_i_o31_raw_value: u8,
        aux_i_o32_raw_value: u8,
        aux_i_o25_raw_value: u8,
        aux_i_o26_raw_value: u8,
        aux_i_o27_raw_value: u8,
        aux_i_o28_raw_value: u8,
        aux_i_o21_raw_value: u8,
        aux_i_o22_raw_value: u8,
        aux_i_o23_raw_value: u8,
        aux_i_o24_raw_value: u8,
        aux_i_o17_raw_value: u8,
        aux_i_o18_raw_value: u8,
        aux_i_o19_raw_value: u8,
        aux_i_o20_raw_value: u8,
        aux_i_o45: AuxIO452561146622,
        aux_i_o46: AuxIO462561146622,
        aux_i_o47: AuxIO472561146622,
        aux_i_o48: AuxIO482561146622,
        aux_i_o41: AuxIO412561146622,
        aux_i_o42: AuxIO422561146622,
        aux_i_o43: AuxIO432561146622,
        aux_i_o44: AuxIO442561146622,
        aux_i_o37: AuxIO372561146622,
        aux_i_o38: AuxIO382561146622,
        aux_i_o39: AuxIO392561146622,
        aux_i_o40: AuxIO402561146622,
        aux_i_o33: AuxIO332561146622,
        aux_i_o34: AuxIO342561146622,
        aux_i_o35: AuxIO352561146622,
        aux_i_o36: AuxIO362561146622,
        aux_i_o29: AuxIO292561146622,
        aux_i_o30: AuxIO302561146622,
        aux_i_o31: AuxIO312561146622,
        aux_i_o32: AuxIO322561146622,
        aux_i_o25: AuxIO252561146622,
        aux_i_o26: AuxIO262561146622,
        aux_i_o27: AuxIO272561146622,
        aux_i_o28: AuxIO282561146622,
        aux_i_o21: AuxIO212561146622,
        aux_i_o22: AuxIO222561146622,
        aux_i_o23: AuxIO232561146622,
        aux_i_o24: AuxIO242561146622,
        aux_i_o17: AuxIO172561146622,
        aux_i_o18: AuxIO182561146622,
        aux_i_o19: AuxIO192561146622,
        aux_i_o20: AuxIO202561146622,
    },
    Auxio3 {
        aux_i_o77_raw_value: u8,
        aux_i_o78_raw_value: u8,
        aux_i_o79_raw_value: u8,
        aux_i_o80_raw_value: u8,
        aux_i_o73_raw_value: u8,
        aux_i_o74_raw_value: u8,
        aux_i_o75_raw_value: u8,
        aux_i_o76_raw_value: u8,
        aux_i_o69_raw_value: u8,
        aux_i_o70_raw_value: u8,
        aux_i_o71_raw_value: u8,
        aux_i_o72_raw_value: u8,
        aux_i_o65_raw_value: u8,
        aux_i_o66_raw_value: u8,
        aux_i_o67_raw_value: u8,
        aux_i_o68_raw_value: u8,
        aux_i_o61_raw_value: u8,
        aux_i_o62_raw_value: u8,
        aux_i_o63_raw_value: u8,
        aux_i_o64_raw_value: u8,
        aux_i_o57_raw_value: u8,
        aux_i_o58_raw_value: u8,
        aux_i_o59_raw_value: u8,
        aux_i_o60_raw_value: u8,
        aux_i_o53_raw_value: u8,
        aux_i_o54_raw_value: u8,
        aux_i_o55_raw_value: u8,
        aux_i_o56_raw_value: u8,
        aux_i_o49_raw_value: u8,
        aux_i_o50_raw_value: u8,
        aux_i_o51_raw_value: u8,
        aux_i_o52_raw_value: u8,
        aux_i_o77: AuxIO772561081086,
        aux_i_o78: AuxIO782561081086,
        aux_i_o79: AuxIO792561081086,
        aux_i_o80: AuxIO802561081086,
        aux_i_o73: AuxIO732561081086,
        aux_i_o74: AuxIO742561081086,
        aux_i_o75: AuxIO752561081086,
        aux_i_o76: AuxIO762561081086,
        aux_i_o69: AuxIO692561081086,
        aux_i_o70: AuxIO702561081086,
        aux_i_o71: AuxIO712561081086,
        aux_i_o72: AuxIO722561081086,
        aux_i_o65: AuxIO652561081086,
        aux_i_o66: AuxIO662561081086,
        aux_i_o67: AuxIO672561081086,
        aux_i_o68: AuxIO682561081086,
        aux_i_o61: AuxIO612561081086,
        aux_i_o62: AuxIO622561081086,
        aux_i_o63: AuxIO632561081086,
        aux_i_o64: AuxIO642561081086,
        aux_i_o57: AuxIO572561081086,
        aux_i_o58: AuxIO582561081086,
        aux_i_o59: AuxIO592561081086,
        aux_i_o60: AuxIO602561081086,
        aux_i_o53: AuxIO532561081086,
        aux_i_o54: AuxIO542561081086,
        aux_i_o55: AuxIO552561081086,
        aux_i_o56: AuxIO562561081086,
        aux_i_o49: AuxIO492561081086,
        aux_i_o50: AuxIO502561081086,
        aux_i_o51: AuxIO512561081086,
        aux_i_o52: AuxIO522561081086,
    },
    Auxio4 {
        aux_i_o92_raw_value: u8,
        aux_i_o85_raw_value: u8,
        aux_i_o86_raw_value: u8,
        aux_i_o87_raw_value: u8,
        aux_i_o88_raw_value: u8,
        aux_i_o81_raw_value: u8,
        aux_i_o82_raw_value: u8,
        aux_i_o83_raw_value: u8,
        aux_i_o84_raw_value: u8,
        aux_i_o109_raw_value: u8,
        aux_i_o110_raw_value: u8,
        aux_i_o111_raw_value: u8,
        aux_i_o112_raw_value: u8,
        aux_i_o105_raw_value: u8,
        aux_i_o106_raw_value: u8,
        aux_i_o107_raw_value: u8,
        aux_i_o108_raw_value: u8,
        aux_i_o101_raw_value: u8,
        aux_i_o102_raw_value: u8,
        aux_i_o103_raw_value: u8,
        aux_i_o104_raw_value: u8,
        aux_i_o97_raw_value: u8,
        aux_i_o98_raw_value: u8,
        aux_i_o99_raw_value: u8,
        aux_i_o100_raw_value: u8,
        aux_i_o93_raw_value: u8,
        aux_i_o94_raw_value: u8,
        aux_i_o95_raw_value: u8,
        aux_i_o96_raw_value: u8,
        aux_i_o89_raw_value: u8,
        aux_i_o90_raw_value: u8,
        aux_i_o91_raw_value: u8,
        aux_i_o92: AuxIO922561015550,
        aux_i_o85: AuxIO852561015550,
        aux_i_o86: AuxIO862561015550,
        aux_i_o87: AuxIO872561015550,
        aux_i_o88: AuxIO882561015550,
        aux_i_o81: AuxIO812561015550,
        aux_i_o82: AuxIO822561015550,
        aux_i_o83: AuxIO832561015550,
        aux_i_o84: AuxIO842561015550,
        aux_i_o109: AuxIO1092561015550,
        aux_i_o110: AuxIO1102561015550,
        aux_i_o111: AuxIO1112561015550,
        aux_i_o112: AuxIO1122561015550,
        aux_i_o105: AuxIO1052561015550,
        aux_i_o106: AuxIO1062561015550,
        aux_i_o107: AuxIO1072561015550,
        aux_i_o108: AuxIO1082561015550,
        aux_i_o101: AuxIO1012561015550,
        aux_i_o102: AuxIO1022561015550,
        aux_i_o103: AuxIO1032561015550,
        aux_i_o104: AuxIO1042561015550,
        aux_i_o97: AuxIO972561015550,
        aux_i_o98: AuxIO982561015550,
        aux_i_o99: AuxIO992561015550,
        aux_i_o100: AuxIO1002561015550,
        aux_i_o93: AuxIO932561015550,
        aux_i_o94: AuxIO942561015550,
        aux_i_o95: AuxIO952561015550,
        aux_i_o96: AuxIO962561015550,
        aux_i_o89: AuxIO892561015550,
        aux_i_o90: AuxIO902561015550,
        aux_i_o91: AuxIO912561015550,
    },
    Bsa {
        trailer_brake_stroke_axle5_right_raw_value: u8,
        trailer_brake_stroke_axle5_left_raw_value: u8,
        trailer_brake_stroke_axle4_right_raw_value: u8,
        trailer_brake_stroke_axle4_left_raw_value: u8,
        trailer_brake_stroke_axle3_right_raw_value: u8,
        trailer_brake_stroke_axle3_left_raw_value: u8,
        trailer_brake_stroke_axle2_right_raw_value: u8,
        trailer_brake_stroke_axle2_left_raw_value: u8,
        trailer_brake_stroke_axle1_right_raw_value: u8,
        trailer_brake_stroke_axle1_left_raw_value: u8,
        tractor_brake_stroke_axle5_right_raw_value: u8,
        tractor_brake_stroke_axle5_left_raw_value: u8,
        tractor_brake_stroke_axle4_right_raw_value: u8,
        tractor_brake_stroke_axle4_left_raw_value: u8,
        tractor_brake_stroke_axle3_right_raw_value: u8,
        tractor_brake_stroke_axle3_left_raw_value: u8,
        tractor_brake_stroke_axle2_right_raw_value: u8,
        tractor_brake_stroke_axle2_left_raw_value: u8,
        tractor_brake_stroke_axle1_right_raw_value: u8,
        tractor_brake_stroke_axle1_left_raw_value: u8,
        trailer_brake_stroke_axle5_right: TrailerBrakeStrokeAxle5Right2566746622,
        trailer_brake_stroke_axle5_left: TrailerBrakeStrokeAxle5Left2566746622,
        trailer_brake_stroke_axle4_right: TrailerBrakeStrokeAxle4Right2566746622,
        trailer_brake_stroke_axle4_left: TrailerBrakeStrokeAxle4Left2566746622,
        trailer_brake_stroke_axle3_right: TrailerBrakeStrokeAxle3Right2566746622,
        trailer_brake_stroke_axle3_left: TrailerBrakeStrokeAxle3Left2566746622,
        trailer_brake_stroke_axle2_right: TrailerBrakeStrokeAxle2Right2566746622,
        trailer_brake_stroke_axle2_left: TrailerBrakeStrokeAxle2Left2566746622,
        trailer_brake_stroke_axle1_right: TrailerBrakeStrokeAxle1Right2566746622,
        trailer_brake_stroke_axle1_left: TrailerBrakeStrokeAxle1Left2566746622,
        tractor_brake_stroke_axle5_right: TractorBrakeStrokeAxle5Right2566746622,
        tractor_brake_stroke_axle5_left: TractorBrakeStrokeAxle5Left2566746622,
        tractor_brake_stroke_axle4_right: TractorBrakeStrokeAxle4Right2566746622,
        tractor_brake_stroke_axle4_left: TractorBrakeStrokeAxle4Left2566746622,
        tractor_brake_stroke_axle3_right: TractorBrakeStrokeAxle3Right2566746622,
        tractor_brake_stroke_axle3_left: TractorBrakeStrokeAxle3Left2566746622,
        tractor_brake_stroke_axle2_right: TractorBrakeStrokeAxle2Right2566746622,
        tractor_brake_stroke_axle2_left: TractorBrakeStrokeAxle2Left2566746622,
        tractor_brake_stroke_axle1_right: TractorBrakeStrokeAxle1Right2566746622,
        tractor_brake_stroke_axle1_left: TractorBrakeStrokeAxle1Left2566746622,
    },
    Amb {
        road_surface_temp_raw_value: f64,
        eng_air_inlet_temp_raw_value: f64,
        ambient_air_temp_raw_value: f64,
        cab_interior_temp_raw_value: f64,
        barometric_press_raw_value: f64,
    },
    Air2 {
        eng_air_start_press_raw_value: f64,
    },
    Air1 {
        air_compressor_status_raw_value: u8,
        air_suspension_supply_press_raw_value: f64,
        aux_equipment_supply_press_raw_value: f64,
        service_brake_air_press_circuit2_raw_value: f64,
        service_brake_air_press_circuit1_raw_value: f64,
        parking_and_or_trailer_air_press_raw_value: f64,
        pneumatic_supply_press_raw_value: f64,
        air_compressor_status: AirCompressorStatus2566827774,
    },
    Ai {
        steer_axle_lube_press_raw_value: f64,
        steer_axle_temp_raw_value: f64,
        drive_axle_lube_press_raw_value: f64,
        drive_axle_temp_raw_value: f64,
        drive_axle_lift_air_press_raw_value: f64,
        drive_axle_location_raw_value: u8,
    },
    Af2 {
        eng_turbo_wastegate_valve_pos_raw_value: f64,
        eng_gs_mss_flw_snsr_feling_correction_raw_value: f64,
        eng_dsired_abs_intake_manifold_press_raw_value: f64,
        eng_gas_fuel_correction_factor_raw_value: u8,
    },
    Acc2 {
        rqed_acc_distance_mode_raw_value: u8,
        rqed_acc_distance_mode: RqedAccDistanceMode2566803966,
    },
    Acc1 {
        acc_distance_alert_signal_raw_value: u8,
        acc_system_shutoff_warning_raw_value: u8,
        acc_target_detected_raw_value: u8,
        road_curvature_raw_value: f64,
        adptve_cruise_ctrl_set_distance_mode_raw_value: u8,
        adaptive_cruise_ctrl_mode_raw_value: u8,
        adaptive_cruise_ctrl_set_speed_raw_value: u8,
        distance_to_forward_vehicle_raw_value: u8,
        speed_of_forward_vehicle_raw_value: u8,
        acc_distance_alert_signal: AccDistanceAlertSignal2432593918,
        acc_system_shutoff_warning: AccSystemShutoffWarning2432593918,
        acc_target_detected: AccTargetDetected2432593918,
        adptve_cruise_ctrl_set_distance_mode: AdptveCruiseCtrlSetDistanceMode2432593918,
        adaptive_cruise_ctrl_mode: AdaptiveCruiseCtrlMode2432593918,
    },
    Ac {
        articulation_angle_raw_value: f64,
    },
    Aai {
        aux_level_raw_value: f64,
        aux_press2_raw_value: f64,
        aux_press1_raw_value: f64,
        aux_temp2_raw_value: f64,
        aux_temp1_raw_value: f64,
    },
    A1 {
        eng_blower_bypass_valve_pos_raw_value: f64,
        eng_gas_supply_press_raw_value: f64,
    },
    Ackm {
        address_busy_raw_value: Option<u8>,
        control_byte_raw_value: u8,
        parameter_group_number_raw_value: u32,
        group_function_value_raw_value: u8,
        address_access_denied_raw_value: Option<u8>,
        address_negative_acknowledgement_raw_value: Option<u8>,
        address_acknowledged_raw_value: Option<u8>,
        control_byte: ControlByte2565406462,
    },
    Atm1 {
        prtclt_trp_intrmdt_gs_tmp_prlmnry_fmi_raw_value: u8,
        prtclt_trp_dlt_press_preliminary_fmi_raw_value: u8,
        exhaust_gas_temp2_preliminary_fmi_raw_value: u8,
        particulate_trap_diff_press_raw_value: f64,
        prtclate_trap_intermediate_gas_temp_raw_value: f64,
        exhaust_gas_temp2_raw_value: f64,
    },
    Dc1 {
        status2_of_doors_raw_value: u8,
        ramp_wheel_chair_lift_pos_raw_value: u8,
        pos_of_doors_raw_value: u8,
        status2_of_doors: Status2OfDoors2566803198,
        ramp_wheel_chair_lift_pos: RampWheelChairLiftPos2566803198,
        pos_of_doors: PosOfDoors2566803198,
    },
    Fwss1 {
        fifth_wheel_roll_warning_indicator_raw_value: u8,
        fifth_wheel_roll_moment_raw_value: f64,
        fifth_wheel_drawbar_force_raw_value: f64,
        fifth_wheel_vertical_force_raw_value: f64,
        fifth_wheel_roll_warning_indicator: FifthWheelRollWarningIndicator2565870334,
    },
    Fwss2 {
        fifth_wheel_slider_lock_indicator_raw_value: u8,
        fifth_wheel_slider_pos_raw_value: f64,
        ffth_whl_lck_couple_status_indicator_raw_value: u8,
        ffth_whl_lck_rady_to_couple_indicator_raw_value: u8,
        fifth_wheel_error_status_raw_value: u8,
        fifth_wheel_slider_lock_indicator: FifthWheelSliderLockIndicator2566762238,
        ffth_whl_lck_couple_status_indicator: FfthWhlLckCoupleStatusIndicator2566762238,
        ffth_whl_lck_rady_to_couple_indicator: FfthWhlLckRadyToCoupleIndicator2566762238,
        fifth_wheel_error_status: FifthWheelErrorStatus2566762238,
    },
    Ssi {
        roll_and_pitch_measurement_latency_raw_value: f64,
        pitch_and_roll_compensated_raw_value: u8,
        pitch_rate_figure_of_merit_raw_value: u8,
        roll_angle_figure_of_merit_raw_value: u8,
        pitch_angle_figure_of_merit_raw_value: u8,
        pitch_rate_raw_value: f64,
        roll_angle_raw_value: f64,
        pitch_angle_raw_value: f64,
        pitch_and_roll_compensated: PitchAndRollCompensated2364543998,
        pitch_rate_figure_of_merit: PitchRateFigureOfMerit2364543998,
        roll_angle_figure_of_merit: RollAngleFigureOfMerit2364543998,
        pitch_angle_figure_of_merit: PitchAngleFigureOfMerit2364543998,
    },
    Trf1 {
        trans_oil_level_measurement_status_raw_value: u8,
        trans_oil_level_countdown_timer_raw_value: u8,
        trans_oil_level_high_low_raw_value: f64,
        trans_oil_temp_raw_value: f64,
        trans_oil_press_raw_value: f64,
        trans_filter_diff_press_raw_value: f64,
        trans_oil_level_raw_value: f64,
        clutch_press_raw_value: f64,
        trans_oil_level_measurement_status: TransOilLevelMeasurementStatus2566846718,
        trans_oil_level_countdown_timer: TransOilLevelCountdownTimer2566846718,
    },
    Vep1 {
        battery_potential_switched_raw_value: f64,
        electrical_potential_raw_value: f64,
        charging_system_potential_raw_value: f64,
        alt_current_raw_value: u8,
        net_battery_current_raw_value: f64,
    },
    Wcm2 {
        wrless_communication_network_type2_raw_value: u8,
        network_signal_strength2_raw_value: f64,
        network_antenna_status2_raw_value: u8,
        network_service_status2_raw_value: u8,
        network_transceiver_status2_raw_value: u8,
        wrless_communication_network_type2: WrlessCommunicationNetworkType22566760702,
        network_antenna_status2: NetworkAntennaStatus22566760702,
        network_service_status2: NetworkServiceStatus22566760702,
        network_transceiver_status2: NetworkTransceiverStatus22566760702,
    },
    Wcm1 {
        wrless_communication_network_type1_raw_value: u8,
        network_signal_strength1_raw_value: f64,
        network_antenna_status1_raw_value: u8,
        network_service_status1_raw_value: u8,
        network_transceiver_status1_raw_value: u8,
        wrless_communication_network_type1: WrlessCommunicationNetworkType12566760958,
        network_antenna_status1: NetworkAntennaStatus12566760958,
        network_service_status1: NetworkServiceStatus12566760958,
        network_transceiver_status1: NetworkTransceiverStatus12566760958,
    },
    Vrom {
        voltage_regulator_enabled_raw_value: u8,
        voltage_regulator_soft_start_state_raw_value: u8,
        vltg_rgltr_undrfrqncy_cmpnstn_enbld_raw_value: u8,
        vltg_rgltr_v_ar_pwr_fctr_oprting_mode_raw_value: u8,
        vltg_rglator_load_compensation_mode_raw_value: u8,
        voltage_regulator_enabled: VoltageRegulatorEnabled2633869310,
        voltage_regulator_soft_start_state: VoltageRegulatorSoftStartState2633869310,
        vltg_rgltr_undrfrqncy_cmpnstn_enbld: VltgRgltrUndrfrqncyCmpnstnEnbld2633869310,
        vltg_rgltr_v_ar_pwr_fctr_oprting_mode: VltgRgltrVArPwrFctrOprtingMode2633869310,
        vltg_rglator_load_compensation_mode: VltgRglatorLoadCompensationMode2633869310,
    },
    Vrep {
        gnrtr_otput_voltage_bias_percentage_raw_value: f64,
        generator_excitation_field_current_raw_value: f64,
        generator_excitation_field_voltage_raw_value: f64,
    },
}
pub struct DecodedFrameStream {
    can_socket: tokio_socketcan::CANSocket,
}
impl DecodedFrameStream {
    pub fn new(can_socket: tokio_socketcan::CANSocket) -> Self {
        Self { can_socket }
    }
    pub fn stream(self) -> impl futures::Stream<Item = Result<DecodedFrame, std::io::Error>> {
        self.can_socket.map_ok(|frame| match frame.id() {
            2561212158u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let text_display_index_raw_value: u8 = ((frame_payload >> 16) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let text_display_instructions_raw_value: u8 = (frame_payload & 15) as u8;
                let text_display_instructions =
                    TextDisplayInstructions2561212158::from(text_display_instructions_raw_value);
                DecodedFrame::Disp1 {
                    text_display_index_raw_value,
                    text_display_instructions_raw_value,
                    text_display_instructions,
                }
            }
            2566746366u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let movement_status_of_ramp3_raw_value: u8 = ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let enable_status_of_ramp3_raw_value: u8 = ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let retract_status_of_ramp3_raw_value: u8 = ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let movement_status_of_ramp2_raw_value: u8 = ((frame_payload >> 12) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let enable_status_of_ramp2_raw_value: u8 = ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let retract_status_of_ramp2_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let movement_status_of_ramp1_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let enable_status_of_ramp1_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let retract_status_of_ramp1_raw_value: u8 = (frame_payload & 3) as u8;
                let movement_status_of_ramp3 =
                    MovementStatusOfRamp32566746366::from(movement_status_of_ramp3_raw_value);
                let enable_status_of_ramp3 =
                    EnableStatusOfRamp32566746366::from(enable_status_of_ramp3_raw_value);
                let retract_status_of_ramp3 =
                    RetractStatusOfRamp32566746366::from(retract_status_of_ramp3_raw_value);
                let movement_status_of_ramp2 =
                    MovementStatusOfRamp22566746366::from(movement_status_of_ramp2_raw_value);
                let enable_status_of_ramp2 =
                    EnableStatusOfRamp22566746366::from(enable_status_of_ramp2_raw_value);
                let retract_status_of_ramp2 =
                    RetractStatusOfRamp22566746366::from(retract_status_of_ramp2_raw_value);
                let movement_status_of_ramp1 =
                    MovementStatusOfRamp12566746366::from(movement_status_of_ramp1_raw_value);
                let enable_status_of_ramp1 =
                    EnableStatusOfRamp12566746366::from(enable_status_of_ramp1_raw_value);
                let retract_status_of_ramp1 =
                    RetractStatusOfRamp12566746366::from(retract_status_of_ramp1_raw_value);
                DecodedFrame::Drc {
                    movement_status_of_ramp3_raw_value,
                    enable_status_of_ramp3_raw_value,
                    retract_status_of_ramp3_raw_value,
                    movement_status_of_ramp2_raw_value,
                    enable_status_of_ramp2_raw_value,
                    retract_status_of_ramp2_raw_value,
                    movement_status_of_ramp1_raw_value,
                    enable_status_of_ramp1_raw_value,
                    retract_status_of_ramp1_raw_value,
                    movement_status_of_ramp3,
                    enable_status_of_ramp3,
                    retract_status_of_ramp3,
                    movement_status_of_ramp2,
                    enable_status_of_ramp2,
                    retract_status_of_ramp2,
                    movement_status_of_ramp1,
                    enable_status_of_ramp1,
                    retract_status_of_ramp1,
                }
            }
            2566750206u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let max_crank_attempts_per_start_attempt_raw_value: u8 =
                    (frame_payload & 255) as u8;
                DecodedFrame::Ec2 {
                    max_crank_attempts_per_start_attempt_raw_value,
                }
            }
            2566755582u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhst_gs_rcirculation_valve2_pos_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.0025;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhst_gs_recirculation_valve_pos_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.0025;
                DecodedFrame::Eec7 {
                    eng_exhst_gs_rcirculation_valve2_pos_raw_value,
                    eng_exhst_gs_recirculation_valve_pos_raw_value,
                }
            }
            2566746110u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhst_gs_rcrculation_valve2_ctrl_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.0025;
                DecodedFrame::Eec8 {
                    eng_exhst_gs_rcrculation_valve2_ctrl_raw_value,
                }
            }
            2566752510u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intk_vlv_actton_oil_press_for_cyl4_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intk_vlv_actton_oil_press_for_cyl3_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intk_vlv_actton_oil_press_for_cyl2_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intk_vlv_actton_oil_press_for_cyl1_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.1;
                DecodedFrame::EflP5 {
                    eng_intk_vlv_actton_oil_press_for_cyl4_raw_value,
                    eng_intk_vlv_actton_oil_press_for_cyl3_raw_value,
                    eng_intk_vlv_actton_oil_press_for_cyl2_raw_value,
                    eng_intk_vlv_actton_oil_press_for_cyl1_raw_value,
                }
            }
            2566752254u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intk_vlv_actton_oil_press_for_cyl8_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intk_vlv_actton_oil_press_for_cyl7_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intk_vlv_actton_oil_press_for_cyl6_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intk_vlv_actton_oil_press_for_cyl5_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.1;
                DecodedFrame::EflP6 {
                    eng_intk_vlv_actton_oil_press_for_cyl8_raw_value,
                    eng_intk_vlv_actton_oil_press_for_cyl7_raw_value,
                    eng_intk_vlv_actton_oil_press_for_cyl6_raw_value,
                    eng_intk_vlv_actton_oil_press_for_cyl5_raw_value,
                }
            }
            2566751998u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intk_vlv_acttn_oil_press_for_cyl12_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intk_vlv_acttn_oil_press_for_cyl11_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intk_vlv_acttn_oil_press_for_cyl10_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intk_vlv_actton_oil_press_for_cyl9_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.1;
                DecodedFrame::EflP7 {
                    eng_intk_vlv_acttn_oil_press_for_cyl12_raw_value,
                    eng_intk_vlv_acttn_oil_press_for_cyl11_raw_value,
                    eng_intk_vlv_acttn_oil_press_for_cyl10_raw_value,
                    eng_intk_vlv_actton_oil_press_for_cyl9_raw_value,
                }
            }
            2566751742u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intk_vlv_acttn_oil_press_for_cyl16_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intk_vlv_acttn_oil_press_for_cyl15_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intk_vlv_acttn_oil_press_for_cyl14_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intk_vlv_acttn_oil_press_for_cyl13_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.1;
                DecodedFrame::EflP8 {
                    eng_intk_vlv_acttn_oil_press_for_cyl16_raw_value,
                    eng_intk_vlv_acttn_oil_press_for_cyl15_raw_value,
                    eng_intk_vlv_acttn_oil_press_for_cyl14_raw_value,
                    eng_intk_vlv_acttn_oil_press_for_cyl13_raw_value,
                }
            }
            2566751486u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intk_vlv_acttn_oil_press_for_cyl20_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intk_vlv_acttn_oil_press_for_cyl19_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intk_vlv_acttn_oil_press_for_cyl18_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intk_vlv_acttn_oil_press_for_cyl17_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.1;
                DecodedFrame::EflP9 {
                    eng_intk_vlv_acttn_oil_press_for_cyl20_raw_value,
                    eng_intk_vlv_acttn_oil_press_for_cyl19_raw_value,
                    eng_intk_vlv_acttn_oil_press_for_cyl18_raw_value,
                    eng_intk_vlv_acttn_oil_press_for_cyl17_raw_value,
                }
            }
            2499641854u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let egr_cooler_bypass_actuator_postion_raw_value: f64 =
                    (frame_payload & 255) as f64 * 0.4;
                DecodedFrame::Egrbv {
                    egr_cooler_bypass_actuator_postion_raw_value,
                }
            }
            2566748158u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_spark_plug4_raw_value: u16 = ((frame_payload >> 48) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_spark_plug3_raw_value: u16 = ((frame_payload >> 32) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_spark_plug2_raw_value: u16 = ((frame_payload >> 16) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_spark_plug1_raw_value: u16 = (frame_payload & 65535) as u16;
                DecodedFrame::Esv1 {
                    eng_spark_plug4_raw_value,
                    eng_spark_plug3_raw_value,
                    eng_spark_plug2_raw_value,
                    eng_spark_plug1_raw_value,
                }
            }
            2566747902u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_spark_plug8_raw_value: u16 = ((frame_payload >> 48) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_spark_plug7_raw_value: u16 = ((frame_payload >> 32) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_spark_plug6_raw_value: u16 = ((frame_payload >> 16) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_spark_plug5_raw_value: u16 = (frame_payload & 65535) as u16;
                DecodedFrame::Esv2 {
                    eng_spark_plug8_raw_value,
                    eng_spark_plug7_raw_value,
                    eng_spark_plug6_raw_value,
                    eng_spark_plug5_raw_value,
                }
            }
            2566747646u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_spark_plug12_raw_value: u16 = ((frame_payload >> 48) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_spark_plug11_raw_value: u16 = ((frame_payload >> 32) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_spark_plug10_raw_value: u16 = ((frame_payload >> 16) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_spark_plug9_raw_value: u16 = (frame_payload & 65535) as u16;
                DecodedFrame::Esv3 {
                    eng_spark_plug12_raw_value,
                    eng_spark_plug11_raw_value,
                    eng_spark_plug10_raw_value,
                    eng_spark_plug9_raw_value,
                }
            }
            2566747390u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_spark_plug16_raw_value: u16 = ((frame_payload >> 48) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_spark_plug15_raw_value: u16 = ((frame_payload >> 32) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_spark_plug14_raw_value: u16 = ((frame_payload >> 16) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_spark_plug13_raw_value: u16 = (frame_payload & 65535) as u16;
                DecodedFrame::Esv4 {
                    eng_spark_plug16_raw_value,
                    eng_spark_plug15_raw_value,
                    eng_spark_plug14_raw_value,
                    eng_spark_plug13_raw_value,
                }
            }
            2566747134u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_spark_plug20_raw_value: u16 = ((frame_payload >> 48) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_spark_plug19_raw_value: u16 = ((frame_payload >> 32) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_spark_plug18_raw_value: u16 = ((frame_payload >> 16) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_spark_plug17_raw_value: u16 = (frame_payload & 65535) as u16;
                DecodedFrame::Esv5 {
                    eng_spark_plug20_raw_value,
                    eng_spark_plug19_raw_value,
                    eng_spark_plug18_raw_value,
                    eng_spark_plug17_raw_value,
                }
            }
            2566746878u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_spark_plug24_raw_value: u16 = ((frame_payload >> 48) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_spark_plug23_raw_value: u16 = ((frame_payload >> 32) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_spark_plug22_raw_value: u16 = ((frame_payload >> 16) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_spark_plug21_raw_value: u16 = (frame_payload & 65535) as u16;
                DecodedFrame::Esv6 {
                    eng_spark_plug24_raw_value,
                    eng_spark_plug23_raw_value,
                    eng_spark_plug22_raw_value,
                    eng_spark_plug21_raw_value,
                }
            }
            2561277694u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lane_departure_warning_enable_cmd_raw_value: u8 = (frame_payload & 3) as u8;
                let lane_departure_warning_enable_cmd =
                    LaneDepartureWarningEnableCmd2561277694::from(
                        lane_departure_warning_enable_cmd_raw_value,
                    );
                DecodedFrame::Flic {
                    lane_departure_warning_enable_cmd_raw_value,
                    lane_departure_warning_enable_cmd,
                }
            }
            2633861886u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let j2012dtc_occurrence_count_raw_value: u8 = ((frame_payload >> 49) & 127) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let j2012dtc_status_raw_value: bool = ((frame_payload >> 48) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let number_of_j2012dt_cs_raw_value: u8 = (frame_payload & 255) as u8;
                let j2012dtc_status = J2012dtcStatus2633861886::from(j2012dtc_status_raw_value);
                DecodedFrame::J2012 {
                    j2012dtc_occurrence_count_raw_value,
                    j2012dtc_status_raw_value,
                    number_of_j2012dt_cs_raw_value,
                    j2012dtc_status,
                }
            }
            2566749438u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let prtclt_trp_actv_rgnrtn_inhbtd_dt_vhcl_s_raw_value: u8 =
                    ((frame_payload >> 30) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let prtclt_trp_actv_rgnrtn_inhbtd_dt_ot_of_n_raw_value: u8 =
                    ((frame_payload >> 28) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let prtclt_trp_actv_rgnrtn_inhbtd_dt_accl_p_raw_value: u8 =
                    ((frame_payload >> 26) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let prtclt_trp_actv_rgnrtn_inhbtd_dtpto_ac_raw_value: u8 =
                    ((frame_payload >> 24) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let prtclt_trp_actv_rgnrtn_inhbtd_dt_srvc_b_raw_value: u8 =
                    ((frame_payload >> 22) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let prtclt_trp_actv_rgnrtn_inhbtd_dt_cltch_raw_value: u8 =
                    ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let prtclt_trp_actv_rgnrtn_inhbtd_dt_inhbt_raw_value: u8 =
                    ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let prtclt_trp_actv_rgnrtn_inhbtd_status_raw_value: u8 =
                    ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let particulate_trap_status_raw_value: u8 = ((frame_payload >> 12) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let prtclt_trp_actv_regeneration_status_raw_value: u8 =
                    ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let prtclt_trp_pssv_regeneration_status_raw_value: u8 =
                    ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let particulate_trap_lamp_cmd_raw_value: u8 = (frame_payload & 7) as u8;
                let prtclt_trp_actv_rgnrtn_inhbtd_dt_vhcl_s =
                    PrtcltTrpActvRgnrtnInhbtdDtVhclS2566749438::from(
                        prtclt_trp_actv_rgnrtn_inhbtd_dt_vhcl_s_raw_value,
                    );
                let prtclt_trp_actv_rgnrtn_inhbtd_dt_ot_of_n =
                    PrtcltTrpActvRgnrtnInhbtdDtOtOfN2566749438::from(
                        prtclt_trp_actv_rgnrtn_inhbtd_dt_ot_of_n_raw_value,
                    );
                let prtclt_trp_actv_rgnrtn_inhbtd_dt_accl_p =
                    PrtcltTrpActvRgnrtnInhbtdDtAcclP2566749438::from(
                        prtclt_trp_actv_rgnrtn_inhbtd_dt_accl_p_raw_value,
                    );
                let prtclt_trp_actv_rgnrtn_inhbtd_dtpto_ac =
                    PrtcltTrpActvRgnrtnInhbtdDtptoAc2566749438::from(
                        prtclt_trp_actv_rgnrtn_inhbtd_dtpto_ac_raw_value,
                    );
                let prtclt_trp_actv_rgnrtn_inhbtd_dt_srvc_b =
                    PrtcltTrpActvRgnrtnInhbtdDtSrvcB2566749438::from(
                        prtclt_trp_actv_rgnrtn_inhbtd_dt_srvc_b_raw_value,
                    );
                let prtclt_trp_actv_rgnrtn_inhbtd_dt_cltch =
                    PrtcltTrpActvRgnrtnInhbtdDtCltch2566749438::from(
                        prtclt_trp_actv_rgnrtn_inhbtd_dt_cltch_raw_value,
                    );
                let prtclt_trp_actv_rgnrtn_inhbtd_dt_inhbt =
                    PrtcltTrpActvRgnrtnInhbtdDtInhbt2566749438::from(
                        prtclt_trp_actv_rgnrtn_inhbtd_dt_inhbt_raw_value,
                    );
                let prtclt_trp_actv_rgnrtn_inhbtd_status =
                    PrtcltTrpActvRgnrtnInhbtdStatus2566749438::from(
                        prtclt_trp_actv_rgnrtn_inhbtd_status_raw_value,
                    );
                let particulate_trap_status =
                    ParticulateTrapStatus2566749438::from(particulate_trap_status_raw_value);
                let prtclt_trp_actv_regeneration_status =
                    PrtcltTrpActvRegenerationStatus2566749438::from(
                        prtclt_trp_actv_regeneration_status_raw_value,
                    );
                let prtclt_trp_pssv_regeneration_status =
                    PrtcltTrpPssvRegenerationStatus2566749438::from(
                        prtclt_trp_pssv_regeneration_status_raw_value,
                    );
                let particulate_trap_lamp_cmd =
                    ParticulateTrapLampCmd2566749438::from(particulate_trap_lamp_cmd_raw_value);
                DecodedFrame::Ptc1 {
                    prtclt_trp_actv_rgnrtn_inhbtd_dt_vhcl_s_raw_value,
                    prtclt_trp_actv_rgnrtn_inhbtd_dt_ot_of_n_raw_value,
                    prtclt_trp_actv_rgnrtn_inhbtd_dt_accl_p_raw_value,
                    prtclt_trp_actv_rgnrtn_inhbtd_dtpto_ac_raw_value,
                    prtclt_trp_actv_rgnrtn_inhbtd_dt_srvc_b_raw_value,
                    prtclt_trp_actv_rgnrtn_inhbtd_dt_cltch_raw_value,
                    prtclt_trp_actv_rgnrtn_inhbtd_dt_inhbt_raw_value,
                    prtclt_trp_actv_rgnrtn_inhbtd_status_raw_value,
                    particulate_trap_status_raw_value,
                    prtclt_trp_actv_regeneration_status_raw_value,
                    prtclt_trp_pssv_regeneration_status_raw_value,
                    particulate_trap_lamp_cmd_raw_value,
                    prtclt_trp_actv_rgnrtn_inhbtd_dt_vhcl_s,
                    prtclt_trp_actv_rgnrtn_inhbtd_dt_ot_of_n,
                    prtclt_trp_actv_rgnrtn_inhbtd_dt_accl_p,
                    prtclt_trp_actv_rgnrtn_inhbtd_dtpto_ac,
                    prtclt_trp_actv_rgnrtn_inhbtd_dt_srvc_b,
                    prtclt_trp_actv_rgnrtn_inhbtd_dt_cltch,
                    prtclt_trp_actv_rgnrtn_inhbtd_dt_inhbt,
                    prtclt_trp_actv_rgnrtn_inhbtd_status,
                    particulate_trap_status,
                    prtclt_trp_actv_regeneration_status,
                    prtclt_trp_pssv_regeneration_status,
                    particulate_trap_lamp_cmd,
                }
            }
            2565873150u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let message_checksum_raw_value: u8 = ((frame_payload >> 60) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let message_counter_raw_value: u8 = ((frame_payload >> 56) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let steer_angle_sensor_calibrated_raw_value: u8 = ((frame_payload >> 50) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let steer_angle_sensor_active_mode_raw_value: u8 =
                    ((frame_payload >> 48) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let steer_wheel_angle_range_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.0009765625 + -31.374;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let steer_wheel_angle_range_counter_type_raw_value: u8 =
                    ((frame_payload >> 22) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let steer_wheel_angle_range_counter_raw_value: f64 =
                    ((frame_payload >> 16) & 63) as f64 + -32.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let steer_wheel_angle_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.000976563 + -31.374;
                let steer_angle_sensor_calibrated = SteerAngleSensorCalibrated2565873150::from(
                    steer_angle_sensor_calibrated_raw_value,
                );
                let steer_angle_sensor_active_mode = SteerAngleSensorActiveMode2565873150::from(
                    steer_angle_sensor_active_mode_raw_value,
                );
                let steer_wheel_angle_range_counter_type =
                    SteerWheelAngleRangeCounterType2565873150::from(
                        steer_wheel_angle_range_counter_type_raw_value,
                    );
                DecodedFrame::Sas {
                    message_checksum_raw_value,
                    message_counter_raw_value,
                    steer_angle_sensor_calibrated_raw_value,
                    steer_angle_sensor_active_mode_raw_value,
                    steer_wheel_angle_range_raw_value,
                    steer_wheel_angle_range_counter_type_raw_value,
                    steer_wheel_angle_range_counter_raw_value,
                    steer_wheel_angle_raw_value,
                    steer_angle_sensor_calibrated,
                    steer_angle_sensor_active_mode,
                    steer_wheel_angle_range_counter_type,
                }
            }
            2566745854u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let cmded_catalyst_reagent_consumption_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let avrge_catalyst_reagent_consumption_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.05;
                DecodedFrame::Scr1 {
                    cmded_catalyst_reagent_consumption_raw_value,
                    avrge_catalyst_reagent_consumption_raw_value,
                }
            }
            2566751230u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let transfer_case_status_raw_value: u8 = (frame_payload & 7) as u8;
                let transfer_case_status =
                    TransferCaseStatus2566751230::from(transfer_case_status_raw_value);
                DecodedFrame::Tci {
                    transfer_case_status_raw_value,
                    transfer_case_status,
                }
            }
            2566755838u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_oil_level_switch_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_oil_filter_restriction_switch_raw_value: u8 = (frame_payload & 3) as u8;
                let trans_oil_level_switch =
                    TransOilLevelSwitch2566755838::from(trans_oil_level_switch_raw_value);
                let trans_oil_filter_restriction_switch =
                    TransOilFilterRestrictionSwitch2566755838::from(
                        trans_oil_filter_restriction_switch_raw_value,
                    );
                DecodedFrame::Trf2 {
                    trans_oil_level_switch_raw_value,
                    trans_oil_filter_restriction_switch_raw_value,
                    trans_oil_level_switch,
                    trans_oil_filter_restriction_switch,
                }
            }
            2566752766u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vehicle_roll_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.0078125 + -200.0;
                DecodedFrame::Vds2 {
                    vehicle_roll_raw_value,
                }
            }
            2633938942u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let total_eng_cruise_time_raw_value: f64 =
                    ((frame_payload >> 48) & 4294967295) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let total_drive_average_load_factor_raw_value: f64 =
                    ((frame_payload >> 40) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trip_drive_average_load_factor_raw_value: f64 =
                    ((frame_payload >> 32) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trip_average_eng_speed_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trip_max_eng_speed_raw_value: f64 = (frame_payload & 65535) as f64 * 0.125;
                DecodedFrame::Lf {
                    total_eng_cruise_time_raw_value,
                    total_drive_average_load_factor_raw_value,
                    trip_drive_average_load_factor_raw_value,
                    trip_average_eng_speed_raw_value,
                    trip_max_eng_speed_raw_value,
                }
            }
            2566799614u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let implement_rear_work_light_raw_value: u8 = ((frame_payload >> 62) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let implement_left_forward_work_light_raw_value: u8 =
                    ((frame_payload >> 60) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let implement_right_forward_work_light_raw_value: u8 =
                    ((frame_payload >> 58) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let implement_left_facing_work_light_raw_value: u8 =
                    ((frame_payload >> 54) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let implement_right_facing_work_light_raw_value: u8 =
                    ((frame_payload >> 52) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let implement_oem_option1_light_raw_value: u8 = ((frame_payload >> 50) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let implement_oem_option2_light_raw_value: u8 = ((frame_payload >> 48) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trctr_front_high_mounted_work_lights_raw_value: u8 =
                    ((frame_payload >> 46) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trctor_front_low_mounted_work_lights_raw_value: u8 =
                    ((frame_payload >> 44) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trctor_side_high_mounted_work_lights_raw_value: u8 =
                    ((frame_payload >> 42) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tractor_side_low_mounted_work_lights_raw_value: u8 =
                    ((frame_payload >> 40) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trctor_rear_high_mounted_work_lights_raw_value: u8 =
                    ((frame_payload >> 38) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tractor_rear_low_mounted_work_lights_raw_value: u8 =
                    ((frame_payload >> 36) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trctr_underside_mounted_work_lights_raw_value: u8 =
                    ((frame_payload >> 34) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rear_fog_lights_raw_value: u8 = ((frame_payload >> 32) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tractor_marker_light_raw_value: u8 = ((frame_payload >> 30) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let implement_marker_light_raw_value: u8 = ((frame_payload >> 28) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tractor_clearance_light_raw_value: u8 = ((frame_payload >> 26) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let implement_clearance_light_raw_value: u8 = ((frame_payload >> 24) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let left_stop_light_raw_value: u8 = ((frame_payload >> 22) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let right_stop_light_raw_value: u8 = ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let center_stop_light_raw_value: u8 = ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let back_up_light_and_alarm_horn_raw_value: u8 = ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let left_turn_signal_lights_raw_value: u8 = ((frame_payload >> 14) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let right_turn_signal_lights_raw_value: u8 = ((frame_payload >> 12) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rotating_beacon_light_raw_value: u8 = ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tractor_front_fog_lights_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let high_beam_head_light_data_raw_value: u8 = ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let low_beam_head_light_data_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let alt_beam_head_light_data_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let running_light_raw_value: u8 = (frame_payload & 3) as u8;
                let implement_rear_work_light =
                    ImplementRearWorkLight2566799614::from(implement_rear_work_light_raw_value);
                let implement_left_forward_work_light =
                    ImplementLeftForwardWorkLight2566799614::from(
                        implement_left_forward_work_light_raw_value,
                    );
                let implement_right_forward_work_light =
                    ImplementRightForwardWorkLight2566799614::from(
                        implement_right_forward_work_light_raw_value,
                    );
                let implement_left_facing_work_light = ImplementLeftFacingWorkLight2566799614::from(
                    implement_left_facing_work_light_raw_value,
                );
                let implement_right_facing_work_light =
                    ImplementRightFacingWorkLight2566799614::from(
                        implement_right_facing_work_light_raw_value,
                    );
                let implement_oem_option1_light =
                    ImplementOemOption1Light2566799614::from(implement_oem_option1_light_raw_value);
                let implement_oem_option2_light =
                    ImplementOemOption2Light2566799614::from(implement_oem_option2_light_raw_value);
                let trctr_front_high_mounted_work_lights =
                    TrctrFrontHighMountedWorkLights2566799614::from(
                        trctr_front_high_mounted_work_lights_raw_value,
                    );
                let trctor_front_low_mounted_work_lights =
                    TrctorFrontLowMountedWorkLights2566799614::from(
                        trctor_front_low_mounted_work_lights_raw_value,
                    );
                let trctor_side_high_mounted_work_lights =
                    TrctorSideHighMountedWorkLights2566799614::from(
                        trctor_side_high_mounted_work_lights_raw_value,
                    );
                let tractor_side_low_mounted_work_lights =
                    TractorSideLowMountedWorkLights2566799614::from(
                        tractor_side_low_mounted_work_lights_raw_value,
                    );
                let trctor_rear_high_mounted_work_lights =
                    TrctorRearHighMountedWorkLights2566799614::from(
                        trctor_rear_high_mounted_work_lights_raw_value,
                    );
                let tractor_rear_low_mounted_work_lights =
                    TractorRearLowMountedWorkLights2566799614::from(
                        tractor_rear_low_mounted_work_lights_raw_value,
                    );
                let trctr_underside_mounted_work_lights =
                    TrctrUndersideMountedWorkLights2566799614::from(
                        trctr_underside_mounted_work_lights_raw_value,
                    );
                let rear_fog_lights = RearFogLights2566799614::from(rear_fog_lights_raw_value);
                let tractor_marker_light =
                    TractorMarkerLight2566799614::from(tractor_marker_light_raw_value);
                let implement_marker_light =
                    ImplementMarkerLight2566799614::from(implement_marker_light_raw_value);
                let tractor_clearance_light =
                    TractorClearanceLight2566799614::from(tractor_clearance_light_raw_value);
                let implement_clearance_light =
                    ImplementClearanceLight2566799614::from(implement_clearance_light_raw_value);
                let left_stop_light = LeftStopLight2566799614::from(left_stop_light_raw_value);
                let right_stop_light = RightStopLight2566799614::from(right_stop_light_raw_value);
                let center_stop_light =
                    CenterStopLight2566799614::from(center_stop_light_raw_value);
                let back_up_light_and_alarm_horn =
                    BackUpLightAndAlarmHorn2566799614::from(back_up_light_and_alarm_horn_raw_value);
                let left_turn_signal_lights =
                    LeftTurnSignalLights2566799614::from(left_turn_signal_lights_raw_value);
                let right_turn_signal_lights =
                    RightTurnSignalLights2566799614::from(right_turn_signal_lights_raw_value);
                let rotating_beacon_light =
                    RotatingBeaconLight2566799614::from(rotating_beacon_light_raw_value);
                let tractor_front_fog_lights =
                    TractorFrontFogLights2566799614::from(tractor_front_fog_lights_raw_value);
                let high_beam_head_light_data =
                    HighBeamHeadLightData2566799614::from(high_beam_head_light_data_raw_value);
                let low_beam_head_light_data =
                    LowBeamHeadLightData2566799614::from(low_beam_head_light_data_raw_value);
                let alt_beam_head_light_data =
                    AltBeamHeadLightData2566799614::from(alt_beam_head_light_data_raw_value);
                let running_light = RunningLight2566799614::from(running_light_raw_value);
                DecodedFrame::Ld {
                    implement_rear_work_light_raw_value,
                    implement_left_forward_work_light_raw_value,
                    implement_right_forward_work_light_raw_value,
                    implement_left_facing_work_light_raw_value,
                    implement_right_facing_work_light_raw_value,
                    implement_oem_option1_light_raw_value,
                    implement_oem_option2_light_raw_value,
                    trctr_front_high_mounted_work_lights_raw_value,
                    trctor_front_low_mounted_work_lights_raw_value,
                    trctor_side_high_mounted_work_lights_raw_value,
                    tractor_side_low_mounted_work_lights_raw_value,
                    trctor_rear_high_mounted_work_lights_raw_value,
                    tractor_rear_low_mounted_work_lights_raw_value,
                    trctr_underside_mounted_work_lights_raw_value,
                    rear_fog_lights_raw_value,
                    tractor_marker_light_raw_value,
                    implement_marker_light_raw_value,
                    tractor_clearance_light_raw_value,
                    implement_clearance_light_raw_value,
                    left_stop_light_raw_value,
                    right_stop_light_raw_value,
                    center_stop_light_raw_value,
                    back_up_light_and_alarm_horn_raw_value,
                    left_turn_signal_lights_raw_value,
                    right_turn_signal_lights_raw_value,
                    rotating_beacon_light_raw_value,
                    tractor_front_fog_lights_raw_value,
                    high_beam_head_light_data_raw_value,
                    low_beam_head_light_data_raw_value,
                    alt_beam_head_light_data_raw_value,
                    running_light_raw_value,
                    implement_rear_work_light,
                    implement_left_forward_work_light,
                    implement_right_forward_work_light,
                    implement_left_facing_work_light,
                    implement_right_facing_work_light,
                    implement_oem_option1_light,
                    implement_oem_option2_light,
                    trctr_front_high_mounted_work_lights,
                    trctor_front_low_mounted_work_lights,
                    trctor_side_high_mounted_work_lights,
                    tractor_side_low_mounted_work_lights,
                    trctor_rear_high_mounted_work_lights,
                    tractor_rear_low_mounted_work_lights,
                    trctr_underside_mounted_work_lights,
                    rear_fog_lights,
                    tractor_marker_light,
                    implement_marker_light,
                    tractor_clearance_light,
                    implement_clearance_light,
                    left_stop_light,
                    right_stop_light,
                    center_stop_light,
                    back_up_light_and_alarm_horn,
                    left_turn_signal_lights,
                    right_turn_signal_lights,
                    rotating_beacon_light,
                    tractor_front_fog_lights,
                    high_beam_head_light_data,
                    low_beam_head_light_data,
                    alt_beam_head_light_data,
                    running_light,
                }
            }
            2365473278u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let implement_rear_work_light_cmd_raw_value: u8 = ((frame_payload >> 62) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let implment_left_forward_work_light_cmd_raw_value: u8 =
                    ((frame_payload >> 60) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let implmnt_right_forward_work_light_cmd_raw_value: u8 =
                    ((frame_payload >> 58) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lighting_data_rq_cmd_raw_value: u8 = ((frame_payload >> 56) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let implement_left_facing_work_light_cmd_raw_value: u8 =
                    ((frame_payload >> 54) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let implment_right_facing_work_light_cmd_raw_value: u8 =
                    ((frame_payload >> 52) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let implement_oem_option1_light_cmd_raw_value: u8 =
                    ((frame_payload >> 50) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let implement_oem_option2_light_cmd_raw_value: u8 =
                    ((frame_payload >> 48) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trctr_frnt_hgh_munted_work_lights_cmd_raw_value: u8 =
                    ((frame_payload >> 46) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trctr_frnt_lw_mounted_work_lights_cmd_raw_value: u8 =
                    ((frame_payload >> 44) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trctr_sd_high_mounted_work_lights_cmd_raw_value: u8 =
                    ((frame_payload >> 42) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trctr_sde_low_mounted_work_lights_cmd_raw_value: u8 =
                    ((frame_payload >> 40) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trctr_rr_high_mounted_work_lights_cmd_raw_value: u8 =
                    ((frame_payload >> 38) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trctr_rar_low_mounted_work_lights_cmd_raw_value: u8 =
                    ((frame_payload >> 36) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trctr_undrsd_mounted_work_lights_cmd_raw_value: u8 =
                    ((frame_payload >> 34) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rear_fog_light_cmd_raw_value: u8 = ((frame_payload >> 32) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tractor_marker_light_cmd_raw_value: u8 = ((frame_payload >> 30) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let implement_marker_light_cmd_raw_value: u8 = ((frame_payload >> 28) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tractor_clearance_light_cmd_raw_value: u8 = ((frame_payload >> 26) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let implement_clearance_light_cmd_raw_value: u8 = ((frame_payload >> 24) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let left_stop_light_cmd_raw_value: u8 = ((frame_payload >> 22) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let right_stop_light_cmd_raw_value: u8 = ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let center_stop_light_cmd_raw_value: u8 = ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let back_up_light_and_alarm_horn_cmd_raw_value: u8 =
                    ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let left_turn_signal_lights_cmd_raw_value: u8 = ((frame_payload >> 14) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let right_turn_signal_lights_cmd_raw_value: u8 = ((frame_payload >> 12) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rotating_beacon_light_cmd_raw_value: u8 = ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tractor_front_fog_lights_cmd_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let high_beam_head_light_cmd_raw_value: u8 = ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let low_beam_head_light_cmd_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let alt_beam_head_light_cmd_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let running_light_cmd_raw_value: u8 = (frame_payload & 3) as u8;
                let implement_rear_work_light_cmd = ImplementRearWorkLightCmd2365473278::from(
                    implement_rear_work_light_cmd_raw_value,
                );
                let implment_left_forward_work_light_cmd =
                    ImplmentLeftForwardWorkLightCmd2365473278::from(
                        implment_left_forward_work_light_cmd_raw_value,
                    );
                let implmnt_right_forward_work_light_cmd =
                    ImplmntRightForwardWorkLightCmd2365473278::from(
                        implmnt_right_forward_work_light_cmd_raw_value,
                    );
                let lighting_data_rq_cmd =
                    LightingDataRqCmd2365473278::from(lighting_data_rq_cmd_raw_value);
                let implement_left_facing_work_light_cmd =
                    ImplementLeftFacingWorkLightCmd2365473278::from(
                        implement_left_facing_work_light_cmd_raw_value,
                    );
                let implment_right_facing_work_light_cmd =
                    ImplmentRightFacingWorkLightCmd2365473278::from(
                        implment_right_facing_work_light_cmd_raw_value,
                    );
                let implement_oem_option1_light_cmd = ImplementOemOption1LightCmd2365473278::from(
                    implement_oem_option1_light_cmd_raw_value,
                );
                let implement_oem_option2_light_cmd = ImplementOemOption2LightCmd2365473278::from(
                    implement_oem_option2_light_cmd_raw_value,
                );
                let trctr_frnt_hgh_munted_work_lights_cmd =
                    TrctrFrntHghMuntedWorkLightsCmd2365473278::from(
                        trctr_frnt_hgh_munted_work_lights_cmd_raw_value,
                    );
                let trctr_frnt_lw_mounted_work_lights_cmd =
                    TrctrFrntLwMountedWorkLightsCmd2365473278::from(
                        trctr_frnt_lw_mounted_work_lights_cmd_raw_value,
                    );
                let trctr_sd_high_mounted_work_lights_cmd =
                    TrctrSdHighMountedWorkLightsCmd2365473278::from(
                        trctr_sd_high_mounted_work_lights_cmd_raw_value,
                    );
                let trctr_sde_low_mounted_work_lights_cmd =
                    TrctrSdeLowMountedWorkLightsCmd2365473278::from(
                        trctr_sde_low_mounted_work_lights_cmd_raw_value,
                    );
                let trctr_rr_high_mounted_work_lights_cmd =
                    TrctrRrHighMountedWorkLightsCmd2365473278::from(
                        trctr_rr_high_mounted_work_lights_cmd_raw_value,
                    );
                let trctr_rar_low_mounted_work_lights_cmd =
                    TrctrRarLowMountedWorkLightsCmd2365473278::from(
                        trctr_rar_low_mounted_work_lights_cmd_raw_value,
                    );
                let trctr_undrsd_mounted_work_lights_cmd =
                    TrctrUndrsdMountedWorkLightsCmd2365473278::from(
                        trctr_undrsd_mounted_work_lights_cmd_raw_value,
                    );
                let rear_fog_light_cmd =
                    RearFogLightCmd2365473278::from(rear_fog_light_cmd_raw_value);
                let tractor_marker_light_cmd =
                    TractorMarkerLightCmd2365473278::from(tractor_marker_light_cmd_raw_value);
                let implement_marker_light_cmd =
                    ImplementMarkerLightCmd2365473278::from(implement_marker_light_cmd_raw_value);
                let tractor_clearance_light_cmd =
                    TractorClearanceLightCmd2365473278::from(tractor_clearance_light_cmd_raw_value);
                let implement_clearance_light_cmd = ImplementClearanceLightCmd2365473278::from(
                    implement_clearance_light_cmd_raw_value,
                );
                let left_stop_light_cmd =
                    LeftStopLightCmd2365473278::from(left_stop_light_cmd_raw_value);
                let right_stop_light_cmd =
                    RightStopLightCmd2365473278::from(right_stop_light_cmd_raw_value);
                let center_stop_light_cmd =
                    CenterStopLightCmd2365473278::from(center_stop_light_cmd_raw_value);
                let back_up_light_and_alarm_horn_cmd = BackUpLightAndAlarmHornCmd2365473278::from(
                    back_up_light_and_alarm_horn_cmd_raw_value,
                );
                let left_turn_signal_lights_cmd =
                    LeftTurnSignalLightsCmd2365473278::from(left_turn_signal_lights_cmd_raw_value);
                let right_turn_signal_lights_cmd = RightTurnSignalLightsCmd2365473278::from(
                    right_turn_signal_lights_cmd_raw_value,
                );
                let rotating_beacon_light_cmd =
                    RotatingBeaconLightCmd2365473278::from(rotating_beacon_light_cmd_raw_value);
                let tractor_front_fog_lights_cmd = TractorFrontFogLightsCmd2365473278::from(
                    tractor_front_fog_lights_cmd_raw_value,
                );
                let high_beam_head_light_cmd =
                    HighBeamHeadLightCmd2365473278::from(high_beam_head_light_cmd_raw_value);
                let low_beam_head_light_cmd =
                    LowBeamHeadLightCmd2365473278::from(low_beam_head_light_cmd_raw_value);
                let alt_beam_head_light_cmd =
                    AltBeamHeadLightCmd2365473278::from(alt_beam_head_light_cmd_raw_value);
                let running_light_cmd =
                    RunningLightCmd2365473278::from(running_light_cmd_raw_value);
                DecodedFrame::Lc {
                    implement_rear_work_light_cmd_raw_value,
                    implment_left_forward_work_light_cmd_raw_value,
                    implmnt_right_forward_work_light_cmd_raw_value,
                    lighting_data_rq_cmd_raw_value,
                    implement_left_facing_work_light_cmd_raw_value,
                    implment_right_facing_work_light_cmd_raw_value,
                    implement_oem_option1_light_cmd_raw_value,
                    implement_oem_option2_light_cmd_raw_value,
                    trctr_frnt_hgh_munted_work_lights_cmd_raw_value,
                    trctr_frnt_lw_mounted_work_lights_cmd_raw_value,
                    trctr_sd_high_mounted_work_lights_cmd_raw_value,
                    trctr_sde_low_mounted_work_lights_cmd_raw_value,
                    trctr_rr_high_mounted_work_lights_cmd_raw_value,
                    trctr_rar_low_mounted_work_lights_cmd_raw_value,
                    trctr_undrsd_mounted_work_lights_cmd_raw_value,
                    rear_fog_light_cmd_raw_value,
                    tractor_marker_light_cmd_raw_value,
                    implement_marker_light_cmd_raw_value,
                    tractor_clearance_light_cmd_raw_value,
                    implement_clearance_light_cmd_raw_value,
                    left_stop_light_cmd_raw_value,
                    right_stop_light_cmd_raw_value,
                    center_stop_light_cmd_raw_value,
                    back_up_light_and_alarm_horn_cmd_raw_value,
                    left_turn_signal_lights_cmd_raw_value,
                    right_turn_signal_lights_cmd_raw_value,
                    rotating_beacon_light_cmd_raw_value,
                    tractor_front_fog_lights_cmd_raw_value,
                    high_beam_head_light_cmd_raw_value,
                    low_beam_head_light_cmd_raw_value,
                    alt_beam_head_light_cmd_raw_value,
                    running_light_cmd_raw_value,
                    implement_rear_work_light_cmd,
                    implment_left_forward_work_light_cmd,
                    implmnt_right_forward_work_light_cmd,
                    lighting_data_rq_cmd,
                    implement_left_facing_work_light_cmd,
                    implment_right_facing_work_light_cmd,
                    implement_oem_option1_light_cmd,
                    implement_oem_option2_light_cmd,
                    trctr_frnt_hgh_munted_work_lights_cmd,
                    trctr_frnt_lw_mounted_work_lights_cmd,
                    trctr_sd_high_mounted_work_lights_cmd,
                    trctr_sde_low_mounted_work_lights_cmd,
                    trctr_rr_high_mounted_work_lights_cmd,
                    trctr_rar_low_mounted_work_lights_cmd,
                    trctr_undrsd_mounted_work_lights_cmd,
                    rear_fog_light_cmd,
                    tractor_marker_light_cmd,
                    implement_marker_light_cmd,
                    tractor_clearance_light_cmd,
                    implement_clearance_light_cmd,
                    left_stop_light_cmd,
                    right_stop_light_cmd,
                    center_stop_light_cmd,
                    back_up_light_and_alarm_horn_cmd,
                    left_turn_signal_lights_cmd,
                    right_turn_signal_lights_cmd,
                    rotating_beacon_light_cmd,
                    tractor_front_fog_lights_cmd,
                    high_beam_head_light_cmd,
                    low_beam_head_light_cmd,
                    alt_beam_head_light_cmd,
                    running_light_cmd,
                }
            }
            2365485822u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let blade_ctrl_mode_raw_value: u8 = ((frame_payload >> 16) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let blade_duration_and_direction_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.1 + -3276.8;
                let blade_ctrl_mode = BladeCtrlMode2365485822::from(blade_ctrl_mode_raw_value);
                DecodedFrame::Lbc {
                    blade_ctrl_mode_raw_value,
                    blade_duration_and_direction_raw_value,
                    blade_ctrl_mode,
                }
            }
            2633926654u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_actual_ignt_timing_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.0078125 + -200.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_desired_ignt_timing3_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.0078125 + -200.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_desired_ignt_timing2_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.0078125 + -200.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_desired_ignt_timing1_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.0078125 + -200.0;
                DecodedFrame::It6 {
                    eng_actual_ignt_timing_raw_value,
                    eng_desired_ignt_timing3_raw_value,
                    eng_desired_ignt_timing2_raw_value,
                    eng_desired_ignt_timing1_raw_value,
                }
            }
            2633926398u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl20_ignt_timing_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.0078125 + -200.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl19_ignt_timing_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.0078125 + -200.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl18_ignt_timing_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.0078125 + -200.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl17_ignt_timing_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.0078125 + -200.0;
                DecodedFrame::It5 {
                    eng_cyl20_ignt_timing_raw_value,
                    eng_cyl19_ignt_timing_raw_value,
                    eng_cyl18_ignt_timing_raw_value,
                    eng_cyl17_ignt_timing_raw_value,
                }
            }
            2633926142u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl16_ignt_timing_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.0078125 + -200.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl15_ignt_timing_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.0078125 + -200.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl14_ignt_timing_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.0078125 + -200.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl13_ignt_timing_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.0078125 + -200.0;
                DecodedFrame::It4 {
                    eng_cyl16_ignt_timing_raw_value,
                    eng_cyl15_ignt_timing_raw_value,
                    eng_cyl14_ignt_timing_raw_value,
                    eng_cyl13_ignt_timing_raw_value,
                }
            }
            2633925886u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl12_ignt_timing_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.0078125 + -200.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl11_ignt_timing_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.0078125 + -200.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl10_ignt_timing_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.0078125 + -200.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl9_ignt_timing_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.0078125 + -200.0;
                DecodedFrame::It3 {
                    eng_cyl12_ignt_timing_raw_value,
                    eng_cyl11_ignt_timing_raw_value,
                    eng_cyl10_ignt_timing_raw_value,
                    eng_cyl9_ignt_timing_raw_value,
                }
            }
            2633925630u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl8_ignt_timing_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.0078125 + -200.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl7_ignt_timing_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.0078125 + -200.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl6_ignt_timing_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.0078125 + -200.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl5_ignt_timing_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.0078125 + -200.0;
                DecodedFrame::It2 {
                    eng_cyl8_ignt_timing_raw_value,
                    eng_cyl7_ignt_timing_raw_value,
                    eng_cyl6_ignt_timing_raw_value,
                    eng_cyl5_ignt_timing_raw_value,
                }
            }
            2633925374u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl4_ignt_timing_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.0078125 + -200.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl3_ignt_timing_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.0078125 + -200.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl2_ignt_timing_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.0078125 + -200.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl1_ignt_timing_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.0078125 + -200.0;
                DecodedFrame::It1 {
                    eng_cyl4_ignt_timing_raw_value,
                    eng_cyl3_ignt_timing_raw_value,
                    eng_cyl2_ignt_timing_raw_value,
                    eng_cyl1_ignt_timing_raw_value,
                }
            }
            2633927422u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl20_ignt_trans_second_output_raw_value: f64 =
                    ((frame_payload >> 24) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl19_ignt_trans_second_output_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl18_ignt_trans_second_output_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl17_ignt_trans_second_output_raw_value: f64 =
                    (frame_payload & 255) as f64 + -125.0;
                DecodedFrame::Iso3 {
                    eng_cyl20_ignt_trans_second_output_raw_value,
                    eng_cyl19_ignt_trans_second_output_raw_value,
                    eng_cyl18_ignt_trans_second_output_raw_value,
                    eng_cyl17_ignt_trans_second_output_raw_value,
                }
            }
            2633927166u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl16_ignt_trans_second_output_raw_value: f64 =
                    ((frame_payload >> 56) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl15_ignt_trans_second_output_raw_value: f64 =
                    ((frame_payload >> 48) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl14_ignt_trans_second_output_raw_value: f64 =
                    ((frame_payload >> 40) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl13_ignt_trans_second_output_raw_value: f64 =
                    ((frame_payload >> 32) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl12_ignt_trans_second_output_raw_value: f64 =
                    ((frame_payload >> 24) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl11_ignt_trans_second_output_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl10_ignt_trans_second_output_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl9_ignt_trans_second_output_raw_value: f64 =
                    (frame_payload & 255) as f64 + -125.0;
                DecodedFrame::Iso2 {
                    eng_cyl16_ignt_trans_second_output_raw_value,
                    eng_cyl15_ignt_trans_second_output_raw_value,
                    eng_cyl14_ignt_trans_second_output_raw_value,
                    eng_cyl13_ignt_trans_second_output_raw_value,
                    eng_cyl12_ignt_trans_second_output_raw_value,
                    eng_cyl11_ignt_trans_second_output_raw_value,
                    eng_cyl10_ignt_trans_second_output_raw_value,
                    eng_cyl9_ignt_trans_second_output_raw_value,
                }
            }
            2633926910u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl8_ignt_trans_second_output_raw_value: f64 =
                    ((frame_payload >> 56) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl7_ignt_trans_second_output_raw_value: f64 =
                    ((frame_payload >> 48) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl6_ignt_trans_second_output_raw_value: f64 =
                    ((frame_payload >> 40) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl5_ignt_trans_second_output_raw_value: f64 =
                    ((frame_payload >> 32) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl4_ignt_trans_second_output_raw_value: f64 =
                    ((frame_payload >> 24) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl3_ignt_trans_second_output_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl2_ignt_trans_second_output_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl1_ignt_trans_second_output_raw_value: f64 =
                    (frame_payload & 255) as f64 + -125.0;
                DecodedFrame::Iso1 {
                    eng_cyl8_ignt_trans_second_output_raw_value,
                    eng_cyl7_ignt_trans_second_output_raw_value,
                    eng_cyl6_ignt_trans_second_output_raw_value,
                    eng_cyl5_ignt_trans_second_output_raw_value,
                    eng_cyl4_ignt_trans_second_output_raw_value,
                    eng_cyl3_ignt_trans_second_output_raw_value,
                    eng_cyl2_ignt_trans_second_output_raw_value,
                    eng_cyl1_ignt_trans_second_output_raw_value,
                }
            }
            2566768894u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_oprtr_prmry_intrmdt_spd_slct_stte_raw_value: u8 =
                    (frame_payload & 15) as u8;
                let eng_oprtr_prmry_intrmdt_spd_slct_stte =
                    EngOprtrPrmryIntrmdtSpdSlctStte2566768894::from(
                        eng_oprtr_prmry_intrmdt_spd_slct_stte_raw_value,
                    );
                DecodedFrame::Iscs {
                    eng_oprtr_prmry_intrmdt_spd_slct_stte_raw_value,
                    eng_oprtr_prmry_intrmdt_spd_slct_stte,
                }
            }
            2566769406u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_oprtr_prmry_intrmdt_speed_select_raw_value: u8 = (frame_payload & 15) as u8;
                let eng_oprtr_prmry_intrmdt_speed_select =
                    EngOprtrPrmryIntrmdtSpeedSelect2566769406::from(
                        eng_oprtr_prmry_intrmdt_speed_select_raw_value,
                    );
                DecodedFrame::Isc {
                    eng_oprtr_prmry_intrmdt_speed_select_raw_value,
                    eng_oprtr_prmry_intrmdt_speed_select,
                }
            }
            2566839550u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_total_idle_hours_raw_value: f64 =
                    ((frame_payload >> 32) & 4294967295) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_total_idle_fuel_used_raw_value: f64 =
                    (frame_payload & 4294967295) as f64 * 0.5;
                DecodedFrame::Io {
                    eng_total_idle_hours_raw_value,
                    eng_total_idle_fuel_used_raw_value,
                }
            }
            2633934334u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intake_manifold6_temp_raw_value: f64 =
                    ((frame_payload >> 32) & 255) as f64 + -40.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intake_manifold5_temp_raw_value: f64 =
                    ((frame_payload >> 24) & 255) as f64 + -40.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intake_manifold4_temp_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 + -40.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intake_manifold3_temp_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 + -40.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intake_manifold2_temp_raw_value: f64 = (frame_payload & 255) as f64 + -40.0;
                DecodedFrame::Imt2 {
                    eng_intake_manifold6_temp_raw_value,
                    eng_intake_manifold5_temp_raw_value,
                    eng_intake_manifold4_temp_raw_value,
                    eng_intake_manifold3_temp_raw_value,
                    eng_intake_manifold2_temp_raw_value,
                }
            }
            2566825726u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo4_boost_press_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo3_boost_press_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo2_boost_press_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo1_boost_press_raw_value: f64 = (frame_payload & 65535) as f64 * 0.125;
                DecodedFrame::Imt1 {
                    eng_turbo4_boost_press_raw_value,
                    eng_turbo3_boost_press_raw_value,
                    eng_turbo2_boost_press_raw_value,
                    eng_turbo1_boost_press_raw_value,
                }
            }
            2566770942u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_air_filter4_diff_press_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_air_filter3_diff_press_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_air_filter2_diff_press_raw_value: f64 = (frame_payload & 255) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intake_manifold2_press_raw_value: f64 =
                    ((frame_payload >> 24) & 255) as f64 * 2.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intake_manifold1_abs_press_raw_value: f64 =
                    ((frame_payload >> 32) & 255) as f64 * 2.0;
                DecodedFrame::Ic2 {
                    eng_air_filter4_diff_press_raw_value,
                    eng_air_filter3_diff_press_raw_value,
                    eng_air_filter2_diff_press_raw_value,
                    eng_intake_manifold2_press_raw_value,
                    eng_intake_manifold1_abs_press_raw_value,
                }
            }
            2566846206u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_coolant_filter_diff_press_raw_value: f64 =
                    ((frame_payload >> 56) & 255) as f64 * 0.5;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhaust_gas_temp_raw_value: f64 =
                    ((frame_payload >> 40) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_air_filter1_diff_press_raw_value: f64 =
                    ((frame_payload >> 32) & 255) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_air_inlet_press_raw_value: f64 = ((frame_payload >> 24) & 255) as f64 * 2.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intake_manifold1_temp_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 + -40.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo_boost_press_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 * 2.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_particulate_trap_inlet_press_raw_value: f64 =
                    (frame_payload & 255) as f64 * 0.5;
                DecodedFrame::Ic1 {
                    eng_coolant_filter_diff_press_raw_value,
                    eng_exhaust_gas_temp_raw_value,
                    eng_air_filter1_diff_press_raw_value,
                    eng_air_inlet_press_raw_value,
                    eng_intake_manifold1_temp_raw_value,
                    eng_turbo_boost_press_raw_value,
                    eng_particulate_trap_inlet_press_raw_value,
                }
            }
            2566811134u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let cab_heating_zone_raw_value: u8 = ((frame_payload >> 38) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_heating_zone_raw_value: u8 = ((frame_payload >> 36) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let cab_ventilation_raw_value: u8 = ((frame_payload >> 34) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let auxilary_heater_water_pump_status_raw_value: u8 =
                    ((frame_payload >> 32) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_heater_mode_raw_value: u8 = ((frame_payload >> 24) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_heater_output_power_percent_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_heater_input_air_temp_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 + -40.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_heater_output_coolant_temp_raw_value: f64 =
                    (frame_payload & 255) as f64 + -40.0;
                let cab_heating_zone = CabHeatingZone2566811134::from(cab_heating_zone_raw_value);
                let eng_heating_zone = EngHeatingZone2566811134::from(eng_heating_zone_raw_value);
                let cab_ventilation = CabVentilation2566811134::from(cab_ventilation_raw_value);
                let auxilary_heater_water_pump_status =
                    AuxilaryHeaterWaterPumpStatus2566811134::from(
                        auxilary_heater_water_pump_status_raw_value,
                    );
                let aux_heater_mode = AuxHeaterMode2566811134::from(aux_heater_mode_raw_value);
                DecodedFrame::Htr {
                    cab_heating_zone_raw_value,
                    eng_heating_zone_raw_value,
                    cab_ventilation_raw_value,
                    auxilary_heater_water_pump_status_raw_value,
                    aux_heater_mode_raw_value,
                    aux_heater_output_power_percent_raw_value,
                    aux_heater_input_air_temp_raw_value,
                    aux_heater_output_coolant_temp_raw_value,
                    cab_heating_zone,
                    eng_heating_zone,
                    cab_ventilation,
                    auxilary_heater_water_pump_status,
                    aux_heater_mode,
                }
            }
            2298375934u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rear_axle_right_wheel_speed_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.00390625;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rear_axle_left_wheel_speed_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.00390625;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let front_axle_right_wheel_speed_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.00390625;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let front_axle_left_wheel_speed_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.00390625;
                DecodedFrame::Hrw {
                    rear_axle_right_wheel_speed_raw_value,
                    rear_axle_left_wheel_speed_raw_value,
                    front_axle_right_wheel_speed_raw_value,
                    front_axle_left_wheel_speed_raw_value,
                }
            }
            2565867774u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let fire_apparatus_pump_engagement_raw_value: u8 =
                    ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_hyd_press_governor_switch_raw_value: u8 = ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_hyd_prss_governor_mode_indicator_raw_value: u8 =
                    ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let hyd_press_raw_value: f64 = (frame_payload & 65535) as f64 * 2.0;
                let fire_apparatus_pump_engagement = FireApparatusPumpEngagement2565867774::from(
                    fire_apparatus_pump_engagement_raw_value,
                );
                let eng_hyd_press_governor_switch = EngHydPressGovernorSwitch2565867774::from(
                    eng_hyd_press_governor_switch_raw_value,
                );
                let eng_hyd_prss_governor_mode_indicator =
                    EngHydPrssGovernorModeIndicator2565867774::from(
                        eng_hyd_prss_governor_mode_indicator_raw_value,
                    );
                DecodedFrame::Hpg {
                    fire_apparatus_pump_engagement_raw_value,
                    eng_hyd_press_governor_switch_raw_value,
                    eng_hyd_prss_governor_mode_indicator_raw_value,
                    hyd_press_raw_value,
                    fire_apparatus_pump_engagement,
                    eng_hyd_press_governor_switch,
                    eng_hyd_prss_governor_mode_indicator,
                }
            }
            2566841854u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_total_revolutions_raw_value: f64 =
                    ((frame_payload >> 32) & 4294967295) as f64 * 1000.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_total_hours_of_operation_raw_value: f64 =
                    (frame_payload & 4294967295) as f64 * 0.05;
                DecodedFrame::Hours {
                    eng_total_revolutions_raw_value,
                    eng_total_hours_of_operation_raw_value,
                }
            }
            2365449982u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let hyd_brake_fluid_level_switch_raw_value: u8 = ((frame_payload >> 26) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let hyd_brake_system_audible_warning_cmd_raw_value: u8 =
                    ((frame_payload >> 24) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let hyd_brke_press_supply_state_circuit2_raw_value: u8 =
                    ((frame_payload >> 22) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let hyd_brke_press_supply_state_circuit1_raw_value: u8 =
                    ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let hyd_brk_press_warning_state_circuit2_raw_value: u8 =
                    ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let hyd_brk_press_warning_state_circuit1_raw_value: u8 =
                    ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let hyd_brake_press_circuit2_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 * 100.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let hyd_brake_press_circuit1_raw_value: f64 = (frame_payload & 255) as f64 * 100.0;
                let hyd_brake_fluid_level_switch = HydBrakeFluidLevelSwitch2365449982::from(
                    hyd_brake_fluid_level_switch_raw_value,
                );
                let hyd_brake_system_audible_warning_cmd =
                    HydBrakeSystemAudibleWarningCmd2365449982::from(
                        hyd_brake_system_audible_warning_cmd_raw_value,
                    );
                let hyd_brke_press_supply_state_circuit2 =
                    HydBrkePressSupplyStateCircuit22365449982::from(
                        hyd_brke_press_supply_state_circuit2_raw_value,
                    );
                let hyd_brke_press_supply_state_circuit1 =
                    HydBrkePressSupplyStateCircuit12365449982::from(
                        hyd_brke_press_supply_state_circuit1_raw_value,
                    );
                let hyd_brk_press_warning_state_circuit2 =
                    HydBrkPressWarningStateCircuit22365449982::from(
                        hyd_brk_press_warning_state_circuit2_raw_value,
                    );
                let hyd_brk_press_warning_state_circuit1 =
                    HydBrkPressWarningStateCircuit12365449982::from(
                        hyd_brk_press_warning_state_circuit1_raw_value,
                    );
                DecodedFrame::Hbs {
                    hyd_brake_fluid_level_switch_raw_value,
                    hyd_brake_system_audible_warning_cmd_raw_value,
                    hyd_brke_press_supply_state_circuit2_raw_value,
                    hyd_brke_press_supply_state_circuit1_raw_value,
                    hyd_brk_press_warning_state_circuit2_raw_value,
                    hyd_brk_press_warning_state_circuit1_raw_value,
                    hyd_brake_press_circuit2_raw_value,
                    hyd_brake_press_circuit1_raw_value,
                    hyd_brake_fluid_level_switch,
                    hyd_brake_system_audible_warning_cmd,
                    hyd_brke_press_supply_state_circuit2,
                    hyd_brke_press_supply_state_circuit1,
                    hyd_brk_press_warning_state_circuit2,
                    hyd_brk_press_warning_state_circuit1,
                }
            }
            2633939198u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trip_pto_moving_fuel_used_raw_value: f64 =
                    ((frame_payload >> 32) & 4294967295) as f64 * 0.5;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trip_drive_fuel_used_raw_value: f64 = (frame_payload & 4294967295) as f64 * 0.5;
                DecodedFrame::Gtfi {
                    trip_pto_moving_fuel_used_raw_value,
                    trip_drive_fuel_used_raw_value,
                }
            }
            2633927678u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_fuel_valve1_outlet_abs_press_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_air_to_fuel_diff_press_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_fuel_valve_diff_press_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_fuel_valve_inlet_abs_press_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.1;
                DecodedFrame::Gfp {
                    eng_fuel_valve1_outlet_abs_press_raw_value,
                    eng_air_to_fuel_diff_press_raw_value,
                    eng_fuel_valve_diff_press_raw_value,
                    eng_fuel_valve_inlet_abs_press_raw_value,
                }
            }
            2633925118u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_fuel_flow_rate2_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_fuel_flow_rate1_raw_value: f64 = (frame_payload & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_rqed_fuel_valve2_pos_raw_value: f64 =
                    ((frame_payload >> 56) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_rqed_fuel_valve1_pos_raw_value: f64 =
                    ((frame_payload >> 48) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_fuel_valve2_pos_raw_value: f64 = ((frame_payload >> 40) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_fuel_valve1_pos_raw_value: f64 = ((frame_payload >> 32) & 255) as f64 * 0.4;
                DecodedFrame::Gfi2 {
                    eng_fuel_flow_rate2_raw_value,
                    eng_fuel_flow_rate1_raw_value,
                    eng_rqed_fuel_valve2_pos_raw_value,
                    eng_rqed_fuel_valve1_pos_raw_value,
                    eng_fuel_valve2_pos_raw_value,
                    eng_fuel_valve1_pos_raw_value,
                }
            }
            2633937662u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_fuel_specific_gravity_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.0001;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trip_average_fuel_rate_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let total_eng_pto_fuel_used_raw_value: f64 =
                    (frame_payload & 4294967295) as f64 * 0.5;
                DecodedFrame::Gfi1 {
                    eng_fuel_specific_gravity_raw_value,
                    trip_average_fuel_rate_raw_value,
                    total_eng_pto_fuel_used_raw_value,
                }
            }
            2566804990u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let specific_heat_ratio_raw_value: f64 = (frame_payload & 65535) as f64 * 0.001;
                DecodedFrame::Gfd {
                    specific_heat_ratio_raw_value,
                }
            }
            2633936894u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let total_fuel_used_raw_value: f64 =
                    ((frame_payload >> 32) & 4294967295) as f64 * 0.5;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trip_fuel_raw_value: f64 = (frame_payload & 4294967295) as f64 * 0.5;
                DecodedFrame::Gfc {
                    total_fuel_used_raw_value,
                    trip_fuel_raw_value,
                }
            }
            2566757630u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let sensor_supply_voltage6_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let sensor_supply_voltage5_raw_value: f64 = (frame_payload & 65535) as f64 * 0.05;
                DecodedFrame::Sep2 {
                    sensor_supply_voltage6_raw_value,
                    sensor_supply_voltage5_raw_value,
                }
            }
            2566757886u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let sensor_supply_voltage4_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let sensor_supply_voltage3_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let sensor_supply_voltage2_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let sensor_supply_voltage1_raw_value: f64 = (frame_payload & 65535) as f64 * 0.05;
                DecodedFrame::Sep1 {
                    sensor_supply_voltage4_raw_value,
                    sensor_supply_voltage3_raw_value,
                    sensor_supply_voltage2_raw_value,
                    sensor_supply_voltage1_raw_value,
                }
            }
            2566759678u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let enggmnt_sttus_trans_input_shaft_pto1_raw_value: u8 =
                    ((frame_payload >> 38) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let enggmnt_sttus_trans_input_shaft_pto2_raw_value: u8 =
                    ((frame_payload >> 36) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let enggmnt_sttus_trans_output_shaft_pto_raw_value: u8 =
                    ((frame_payload >> 34) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let enggmnt_stts_trnsfr_cs_otpt_shaft_pto_raw_value: u8 =
                    ((frame_payload >> 32) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let enggmnt_cnsnt_trans_input_shaft_pto1_raw_value: u8 =
                    ((frame_payload >> 22) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let enggmnt_cnsnt_trans_input_shaft_pto2_raw_value: u8 =
                    ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let enggmnt_cnsnt_trans_output_shaft_pto_raw_value: u8 =
                    ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let enggmnt_cnsnt_trnsfr_cs_otpt_shft_pto_raw_value: u8 =
                    ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let enable_switch_trans_input_shaft_pto1_raw_value: u8 =
                    ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let enable_switch_trans_input_shaft_pto2_raw_value: u8 =
                    ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let enable_switch_trans_output_shaft_pto_raw_value: u8 =
                    ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let enbl_swtch_trnsfr_cs_output_shaft_pto_raw_value: u8 = (frame_payload & 3) as u8;
                let enggmnt_sttus_trans_input_shaft_pto1 =
                    EnggmntSttusTransInputShaftPto12566759678::from(
                        enggmnt_sttus_trans_input_shaft_pto1_raw_value,
                    );
                let enggmnt_sttus_trans_input_shaft_pto2 =
                    EnggmntSttusTransInputShaftPto22566759678::from(
                        enggmnt_sttus_trans_input_shaft_pto2_raw_value,
                    );
                let enggmnt_sttus_trans_output_shaft_pto =
                    EnggmntSttusTransOutputShaftPto2566759678::from(
                        enggmnt_sttus_trans_output_shaft_pto_raw_value,
                    );
                let enggmnt_stts_trnsfr_cs_otpt_shaft_pto =
                    EnggmntSttsTrnsfrCsOtptShaftPto2566759678::from(
                        enggmnt_stts_trnsfr_cs_otpt_shaft_pto_raw_value,
                    );
                let enggmnt_cnsnt_trans_input_shaft_pto1 =
                    EnggmntCnsntTransInputShaftPto12566759678::from(
                        enggmnt_cnsnt_trans_input_shaft_pto1_raw_value,
                    );
                let enggmnt_cnsnt_trans_input_shaft_pto2 =
                    EnggmntCnsntTransInputShaftPto22566759678::from(
                        enggmnt_cnsnt_trans_input_shaft_pto2_raw_value,
                    );
                let enggmnt_cnsnt_trans_output_shaft_pto =
                    EnggmntCnsntTransOutputShaftPto2566759678::from(
                        enggmnt_cnsnt_trans_output_shaft_pto_raw_value,
                    );
                let enggmnt_cnsnt_trnsfr_cs_otpt_shft_pto =
                    EnggmntCnsntTrnsfrCsOtptShftPto2566759678::from(
                        enggmnt_cnsnt_trnsfr_cs_otpt_shft_pto_raw_value,
                    );
                let enable_switch_trans_input_shaft_pto1 =
                    EnableSwitchTransInputShaftPto12566759678::from(
                        enable_switch_trans_input_shaft_pto1_raw_value,
                    );
                let enable_switch_trans_input_shaft_pto2 =
                    EnableSwitchTransInputShaftPto22566759678::from(
                        enable_switch_trans_input_shaft_pto2_raw_value,
                    );
                let enable_switch_trans_output_shaft_pto =
                    EnableSwitchTransOutputShaftPto2566759678::from(
                        enable_switch_trans_output_shaft_pto_raw_value,
                    );
                let enbl_swtch_trnsfr_cs_output_shaft_pto =
                    EnblSwtchTrnsfrCsOutputShaftPto2566759678::from(
                        enbl_swtch_trnsfr_cs_output_shaft_pto_raw_value,
                    );
                DecodedFrame::Ptode {
                    enggmnt_sttus_trans_input_shaft_pto1_raw_value,
                    enggmnt_sttus_trans_input_shaft_pto2_raw_value,
                    enggmnt_sttus_trans_output_shaft_pto_raw_value,
                    enggmnt_stts_trnsfr_cs_otpt_shaft_pto_raw_value,
                    enggmnt_cnsnt_trans_input_shaft_pto1_raw_value,
                    enggmnt_cnsnt_trans_input_shaft_pto2_raw_value,
                    enggmnt_cnsnt_trans_output_shaft_pto_raw_value,
                    enggmnt_cnsnt_trnsfr_cs_otpt_shft_pto_raw_value,
                    enable_switch_trans_input_shaft_pto1_raw_value,
                    enable_switch_trans_input_shaft_pto2_raw_value,
                    enable_switch_trans_output_shaft_pto_raw_value,
                    enbl_swtch_trnsfr_cs_output_shaft_pto_raw_value,
                    enggmnt_sttus_trans_input_shaft_pto1,
                    enggmnt_sttus_trans_input_shaft_pto2,
                    enggmnt_sttus_trans_output_shaft_pto,
                    enggmnt_stts_trnsfr_cs_otpt_shaft_pto,
                    enggmnt_cnsnt_trans_input_shaft_pto1,
                    enggmnt_cnsnt_trans_input_shaft_pto2,
                    enggmnt_cnsnt_trans_output_shaft_pto,
                    enggmnt_cnsnt_trnsfr_cs_otpt_shft_pto,
                    enable_switch_trans_input_shaft_pto1,
                    enable_switch_trans_input_shaft_pto2,
                    enable_switch_trans_output_shaft_pto,
                    enbl_swtch_trnsfr_cs_output_shaft_pto,
                }
            }
            2432541438u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_fuel_valve2_outlet_abs_press_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_fuel_temp2_raw_value: f64 = ((frame_payload >> 32) & 255) as f64 + -40.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_gas_mass_flow_rate2_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_fuel_valve2_inlet_abs_press_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.1;
                DecodedFrame::Gfi3 {
                    eng_fuel_valve2_outlet_abs_press_raw_value,
                    eng_fuel_temp2_raw_value,
                    eng_gas_mass_flow_rate2_raw_value,
                    eng_fuel_valve2_inlet_abs_press_raw_value,
                }
            }
            2566761214u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_centrifugal_oil_filter_speed_raw_value: f64 =
                    ((frame_payload >> 24) & 65535) as f64 * 4.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_coolant_pump_diff_press_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 * 1.64 + -7.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_charge_air_cooler2_inlet_press_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 * 2.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_charge_air_cooler1_inlet_press_raw_value: f64 =
                    (frame_payload & 255) as f64 * 2.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intercooler_coolant_level_raw_value: f64 =
                    ((frame_payload >> 40) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_charge_air_cooler_outlet_press_raw_value: f64 =
                    ((frame_payload >> 56) & 255) as f64 * 2.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_aftercooler_coolant_level_raw_value: f64 =
                    ((frame_payload >> 48) & 255) as f64 * 0.4;
                DecodedFrame::EflP4 {
                    eng_centrifugal_oil_filter_speed_raw_value,
                    eng_coolant_pump_diff_press_raw_value,
                    eng_charge_air_cooler2_inlet_press_raw_value,
                    eng_charge_air_cooler1_inlet_press_raw_value,
                    eng_intercooler_coolant_level_raw_value,
                    eng_charge_air_cooler_outlet_press_raw_value,
                    eng_aftercooler_coolant_level_raw_value,
                }
            }
            2432541694u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_vrable_geometry_turbo_actuator1_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_trb_cmprssor_bypass_actuator_pos_raw_value: f64 =
                    ((frame_payload >> 24) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo_compressor_ctrl_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.0025;
                let eng_turbo_compressor_ctrl =
                    EngTurboCompressorCtrl2432541694::from(eng_turbo_compressor_ctrl_raw_value);
                DecodedFrame::Eec6 {
                    eng_vrable_geometry_turbo_actuator1_raw_value,
                    eng_trb_cmprssor_bypass_actuator_pos_raw_value,
                    eng_turbo_compressor_ctrl_raw_value,
                    eng_turbo_compressor_ctrl,
                }
            }
            2566759934u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let enable_status_of_door10_raw_value: u8 = ((frame_payload >> 58) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let open_status_of_door10_raw_value: u8 = ((frame_payload >> 56) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lock_status_of_door10_raw_value: u8 = ((frame_payload >> 54) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let enable_status_of_door9_raw_value: u8 = ((frame_payload >> 52) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let open_status_of_door9_raw_value: u8 = ((frame_payload >> 50) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lock_status_of_door9_raw_value: u8 = ((frame_payload >> 48) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let enable_status_of_door8_raw_value: u8 = ((frame_payload >> 46) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let open_status_of_door8_raw_value: u8 = ((frame_payload >> 44) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lock_status_of_door8_raw_value: u8 = ((frame_payload >> 42) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let enable_status_of_door7_raw_value: u8 = ((frame_payload >> 40) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let open_status_of_door7_raw_value: u8 = ((frame_payload >> 38) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lock_status_of_door7_raw_value: u8 = ((frame_payload >> 36) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let enable_status_of_door6_raw_value: u8 = ((frame_payload >> 34) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let open_status_of_door6_raw_value: u8 = ((frame_payload >> 32) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lock_status_of_door6_raw_value: u8 = ((frame_payload >> 30) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let enable_status_of_door5_raw_value: u8 = ((frame_payload >> 28) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let open_status_of_door5_raw_value: u8 = ((frame_payload >> 26) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lock_status_of_door5_raw_value: u8 = ((frame_payload >> 24) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let enable_status_of_door4_raw_value: u8 = ((frame_payload >> 22) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let open_status_of_door4_raw_value: u8 = ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lock_status_of_door4_raw_value: u8 = ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let enable_status_of_door3_raw_value: u8 = ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let open_status_of_door3_raw_value: u8 = ((frame_payload >> 14) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lock_status_of_door3_raw_value: u8 = ((frame_payload >> 12) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let enable_status_of_door2_raw_value: u8 = ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let open_status_of_door2_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lock_status_of_door2_raw_value: u8 = ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let enable_status_of_door1_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let open_status_of_door1_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lock_status_of_door1_raw_value: u8 = (frame_payload & 3) as u8;
                let enable_status_of_door10 =
                    EnableStatusOfDoor102566759934::from(enable_status_of_door10_raw_value);
                let open_status_of_door10 =
                    OpenStatusOfDoor102566759934::from(open_status_of_door10_raw_value);
                let lock_status_of_door10 =
                    LockStatusOfDoor102566759934::from(lock_status_of_door10_raw_value);
                let enable_status_of_door9 =
                    EnableStatusOfDoor92566759934::from(enable_status_of_door9_raw_value);
                let open_status_of_door9 =
                    OpenStatusOfDoor92566759934::from(open_status_of_door9_raw_value);
                let lock_status_of_door9 =
                    LockStatusOfDoor92566759934::from(lock_status_of_door9_raw_value);
                let enable_status_of_door8 =
                    EnableStatusOfDoor82566759934::from(enable_status_of_door8_raw_value);
                let open_status_of_door8 =
                    OpenStatusOfDoor82566759934::from(open_status_of_door8_raw_value);
                let lock_status_of_door8 =
                    LockStatusOfDoor82566759934::from(lock_status_of_door8_raw_value);
                let enable_status_of_door7 =
                    EnableStatusOfDoor72566759934::from(enable_status_of_door7_raw_value);
                let open_status_of_door7 =
                    OpenStatusOfDoor72566759934::from(open_status_of_door7_raw_value);
                let lock_status_of_door7 =
                    LockStatusOfDoor72566759934::from(lock_status_of_door7_raw_value);
                let enable_status_of_door6 =
                    EnableStatusOfDoor62566759934::from(enable_status_of_door6_raw_value);
                let open_status_of_door6 =
                    OpenStatusOfDoor62566759934::from(open_status_of_door6_raw_value);
                let lock_status_of_door6 =
                    LockStatusOfDoor62566759934::from(lock_status_of_door6_raw_value);
                let enable_status_of_door5 =
                    EnableStatusOfDoor52566759934::from(enable_status_of_door5_raw_value);
                let open_status_of_door5 =
                    OpenStatusOfDoor52566759934::from(open_status_of_door5_raw_value);
                let lock_status_of_door5 =
                    LockStatusOfDoor52566759934::from(lock_status_of_door5_raw_value);
                let enable_status_of_door4 =
                    EnableStatusOfDoor42566759934::from(enable_status_of_door4_raw_value);
                let open_status_of_door4 =
                    OpenStatusOfDoor42566759934::from(open_status_of_door4_raw_value);
                let lock_status_of_door4 =
                    LockStatusOfDoor42566759934::from(lock_status_of_door4_raw_value);
                let enable_status_of_door3 =
                    EnableStatusOfDoor32566759934::from(enable_status_of_door3_raw_value);
                let open_status_of_door3 =
                    OpenStatusOfDoor32566759934::from(open_status_of_door3_raw_value);
                let lock_status_of_door3 =
                    LockStatusOfDoor32566759934::from(lock_status_of_door3_raw_value);
                let enable_status_of_door2 =
                    EnableStatusOfDoor22566759934::from(enable_status_of_door2_raw_value);
                let open_status_of_door2 =
                    OpenStatusOfDoor22566759934::from(open_status_of_door2_raw_value);
                let lock_status_of_door2 =
                    LockStatusOfDoor22566759934::from(lock_status_of_door2_raw_value);
                let enable_status_of_door1 =
                    EnableStatusOfDoor12566759934::from(enable_status_of_door1_raw_value);
                let open_status_of_door1 =
                    OpenStatusOfDoor12566759934::from(open_status_of_door1_raw_value);
                let lock_status_of_door1 =
                    LockStatusOfDoor12566759934::from(lock_status_of_door1_raw_value);
                DecodedFrame::Dc2 {
                    enable_status_of_door10_raw_value,
                    open_status_of_door10_raw_value,
                    lock_status_of_door10_raw_value,
                    enable_status_of_door9_raw_value,
                    open_status_of_door9_raw_value,
                    lock_status_of_door9_raw_value,
                    enable_status_of_door8_raw_value,
                    open_status_of_door8_raw_value,
                    lock_status_of_door8_raw_value,
                    enable_status_of_door7_raw_value,
                    open_status_of_door7_raw_value,
                    lock_status_of_door7_raw_value,
                    enable_status_of_door6_raw_value,
                    open_status_of_door6_raw_value,
                    lock_status_of_door6_raw_value,
                    enable_status_of_door5_raw_value,
                    open_status_of_door5_raw_value,
                    lock_status_of_door5_raw_value,
                    enable_status_of_door4_raw_value,
                    open_status_of_door4_raw_value,
                    lock_status_of_door4_raw_value,
                    enable_status_of_door3_raw_value,
                    open_status_of_door3_raw_value,
                    lock_status_of_door3_raw_value,
                    enable_status_of_door2_raw_value,
                    open_status_of_door2_raw_value,
                    lock_status_of_door2_raw_value,
                    enable_status_of_door1_raw_value,
                    open_status_of_door1_raw_value,
                    lock_status_of_door1_raw_value,
                    enable_status_of_door10,
                    open_status_of_door10,
                    lock_status_of_door10,
                    enable_status_of_door9,
                    open_status_of_door9,
                    lock_status_of_door9,
                    enable_status_of_door8,
                    open_status_of_door8,
                    lock_status_of_door8,
                    enable_status_of_door7,
                    open_status_of_door7,
                    lock_status_of_door7,
                    enable_status_of_door6,
                    open_status_of_door6,
                    lock_status_of_door6,
                    enable_status_of_door5,
                    open_status_of_door5,
                    lock_status_of_door5,
                    enable_status_of_door4,
                    open_status_of_door4,
                    lock_status_of_door4,
                    enable_status_of_door3,
                    open_status_of_door3,
                    lock_status_of_door3,
                    enable_status_of_door2,
                    open_status_of_door2,
                    lock_status_of_door2,
                    enable_status_of_door1,
                    open_status_of_door1,
                    lock_status_of_door1,
                }
            }
            2566757374u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let catalyst_reagent_type_raw_value: u8 = ((frame_payload >> 40) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let ctlyst_rgnt_prprtes_preliminary_fmi_raw_value: u8 =
                    ((frame_payload >> 32) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let ctlyst_ragent_temp2_preliminary_fmi_raw_value: u8 =
                    ((frame_payload >> 24) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let catalyst_reagent_conductivity_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 * 5.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let catalyst_reagent_concentration_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 * 0.25;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let catalyst_reagent_temp2_raw_value: f64 = (frame_payload & 255) as f64 + -40.0;
                let catalyst_reagent_type =
                    CatalystReagentType2566757374::from(catalyst_reagent_type_raw_value);
                DecodedFrame::Cri1 {
                    catalyst_reagent_type_raw_value,
                    ctlyst_rgnt_prprtes_preliminary_fmi_raw_value,
                    ctlyst_ragent_temp2_preliminary_fmi_raw_value,
                    catalyst_reagent_conductivity_raw_value,
                    catalyst_reagent_concentration_raw_value,
                    catalyst_reagent_temp2_raw_value,
                    catalyst_reagent_type,
                }
            }
            2566756862u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftr_trtmnt2_ttal_regeneration_time_raw_value: u32 =
                    ((frame_payload >> 32) & 4294967295) as u32;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let after_treatment2_total_fuel_used_raw_value: f64 =
                    (frame_payload & 4294967295) as f64 * 0.5;
                DecodedFrame::Ahi2 {
                    aftr_trtmnt2_ttal_regeneration_time_raw_value,
                    after_treatment2_total_fuel_used_raw_value,
                }
            }
            2566758654u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtratment2_fuel_enable_actuator_raw_value: u8 =
                    ((frame_payload >> 54) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtratment2_regeneration_status_raw_value: u8 =
                    ((frame_payload >> 52) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment2_ignt_raw_value: u8 = ((frame_payload >> 50) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment2_fuel_press_ctrl_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.0025;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment2_fuel_rate_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment2_fuel_press_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.1;
                let aftrtratment2_fuel_enable_actuator =
                    Aftrtratment2FuelEnableActuator2566758654::from(
                        aftrtratment2_fuel_enable_actuator_raw_value,
                    );
                let aftrtratment2_regeneration_status =
                    Aftrtratment2RegenerationStatus2566758654::from(
                        aftrtratment2_regeneration_status_raw_value,
                    );
                let aftertreatment2_ignt =
                    Aftertreatment2Ignt2566758654::from(aftertreatment2_ignt_raw_value);
                DecodedFrame::Afc2 {
                    aftrtratment2_fuel_enable_actuator_raw_value,
                    aftrtratment2_regeneration_status_raw_value,
                    aftertreatment2_ignt_raw_value,
                    aftertreatment2_fuel_press_ctrl_raw_value,
                    aftertreatment2_fuel_rate_raw_value,
                    aftertreatment2_fuel_press_raw_value,
                    aftrtratment2_fuel_enable_actuator,
                    aftrtratment2_regeneration_status,
                    aftertreatment2_ignt,
                }
            }
            2566758910u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtratment1_fuel_enable_actuator_raw_value: u8 =
                    ((frame_payload >> 54) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtratment1_regeneration_status_raw_value: u8 =
                    ((frame_payload >> 52) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment1_ignt_raw_value: u8 = ((frame_payload >> 50) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment1_fuel_press_ctrl_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.0025;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment1_fuel_rate_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment1_fuel_press_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.1;
                let aftrtratment1_fuel_enable_actuator =
                    Aftrtratment1FuelEnableActuator2566758910::from(
                        aftrtratment1_fuel_enable_actuator_raw_value,
                    );
                let aftrtratment1_regeneration_status =
                    Aftrtratment1RegenerationStatus2566758910::from(
                        aftrtratment1_regeneration_status_raw_value,
                    );
                let aftertreatment1_ignt =
                    Aftertreatment1Ignt2566758910::from(aftertreatment1_ignt_raw_value);
                DecodedFrame::Afc1 {
                    aftrtratment1_fuel_enable_actuator_raw_value,
                    aftrtratment1_regeneration_status_raw_value,
                    aftertreatment1_ignt_raw_value,
                    aftertreatment1_fuel_press_ctrl_raw_value,
                    aftertreatment1_fuel_rate_raw_value,
                    aftertreatment1_fuel_press_raw_value,
                    aftrtratment1_fuel_enable_actuator,
                    aftrtratment1_regeneration_status,
                    aftertreatment1_ignt,
                }
            }
            2566758142u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtreatment2_air_enable_actuator_raw_value: u8 =
                    ((frame_payload >> 62) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment2_purge_air_actuator_raw_value: u8 =
                    ((frame_payload >> 60) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt2_atmzation_air_actuator_raw_value: u8 =
                    ((frame_payload >> 58) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment2_air_system_relay_raw_value: u8 =
                    ((frame_payload >> 56) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtment2_air_press_actuator_pos_raw_value: f64 =
                    ((frame_payload >> 48) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment2_air_press_ctrl_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.0025;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment2_purge_air_press_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment2_supply_air_press_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.1;
                let aftrtreatment2_air_enable_actuator =
                    Aftrtreatment2AirEnableActuator2566758142::from(
                        aftrtreatment2_air_enable_actuator_raw_value,
                    );
                let aftertreatment2_purge_air_actuator =
                    Aftertreatment2PurgeAirActuator2566758142::from(
                        aftertreatment2_purge_air_actuator_raw_value,
                    );
                let aftrtrtmnt2_atmzation_air_actuator =
                    Aftrtrtmnt2AtmzationAirActuator2566758142::from(
                        aftrtrtmnt2_atmzation_air_actuator_raw_value,
                    );
                let aftertreatment2_air_system_relay =
                    Aftertreatment2AirSystemRelay2566758142::from(
                        aftertreatment2_air_system_relay_raw_value,
                    );
                DecodedFrame::Aac2 {
                    aftrtreatment2_air_enable_actuator_raw_value,
                    aftertreatment2_purge_air_actuator_raw_value,
                    aftrtrtmnt2_atmzation_air_actuator_raw_value,
                    aftertreatment2_air_system_relay_raw_value,
                    aftrtrtment2_air_press_actuator_pos_raw_value,
                    aftertreatment2_air_press_ctrl_raw_value,
                    aftertreatment2_purge_air_press_raw_value,
                    aftertreatment2_supply_air_press_raw_value,
                    aftrtreatment2_air_enable_actuator,
                    aftertreatment2_purge_air_actuator,
                    aftrtrtmnt2_atmzation_air_actuator,
                    aftertreatment2_air_system_relay,
                }
            }
            2566758398u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtreatment1_air_enable_actuator_raw_value: u8 =
                    ((frame_payload >> 62) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment1_purge_air_actuator_raw_value: u8 =
                    ((frame_payload >> 60) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt1_atmzation_air_actuator_raw_value: u8 =
                    ((frame_payload >> 58) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment1_air_system_relay_raw_value: u8 =
                    ((frame_payload >> 56) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtment1_air_press_actuator_pos_raw_value: f64 =
                    ((frame_payload >> 48) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment1_air_press_ctrl_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.0025;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment1_purge_air_press_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment1_supply_air_press_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.1;
                let aftrtreatment1_air_enable_actuator =
                    Aftrtreatment1AirEnableActuator2566758398::from(
                        aftrtreatment1_air_enable_actuator_raw_value,
                    );
                let aftertreatment1_purge_air_actuator =
                    Aftertreatment1PurgeAirActuator2566758398::from(
                        aftertreatment1_purge_air_actuator_raw_value,
                    );
                let aftrtrtmnt1_atmzation_air_actuator =
                    Aftrtrtmnt1AtmzationAirActuator2566758398::from(
                        aftrtrtmnt1_atmzation_air_actuator_raw_value,
                    );
                let aftertreatment1_air_system_relay =
                    Aftertreatment1AirSystemRelay2566758398::from(
                        aftertreatment1_air_system_relay_raw_value,
                    );
                DecodedFrame::Aac1 {
                    aftrtreatment1_air_enable_actuator_raw_value,
                    aftertreatment1_purge_air_actuator_raw_value,
                    aftrtrtmnt1_atmzation_air_actuator_raw_value,
                    aftertreatment1_air_system_relay_raw_value,
                    aftrtrtment1_air_press_actuator_pos_raw_value,
                    aftertreatment1_air_press_ctrl_raw_value,
                    aftertreatment1_purge_air_press_raw_value,
                    aftertreatment1_supply_air_press_raw_value,
                    aftrtreatment1_air_enable_actuator,
                    aftertreatment1_purge_air_actuator,
                    aftrtrtmnt1_atmzation_air_actuator,
                    aftertreatment1_air_system_relay,
                }
            }
            2566756606u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftr_trtmnt1_ttal_regeneration_time_raw_value: u32 =
                    ((frame_payload >> 32) & 4294967295) as u32;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let after_treatment1_total_fuel_used_raw_value: f64 =
                    (frame_payload & 4294967295) as f64 * 0.5;
                DecodedFrame::Ahi1 {
                    aftr_trtmnt1_ttal_regeneration_time_raw_value,
                    after_treatment1_total_fuel_used_raw_value,
                }
            }
            2364546302u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rqd_gnrtr_avrg_lne_line_acrms_voltage_raw_value: f64 =
                    (frame_payload & 4294967295) as f64 * 0.0078125;
                DecodedFrame::Rgaaq {
                    rqd_gnrtr_avrg_lne_line_acrms_voltage_raw_value,
                }
            }
            2431654654u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_throttle_actuator2_ctrl_cmd_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.0025;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_throttle_actuator1_ctrl_cmd_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.0025;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_fuel_actuator2_ctrl_cmd_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.0025;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_fuel_actuator1_ctrl_cmd_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.0025;
                DecodedFrame::Tfac {
                    eng_throttle_actuator2_ctrl_cmd_raw_value,
                    eng_throttle_actuator1_ctrl_cmd_raw_value,
                    eng_fuel_actuator2_ctrl_cmd_raw_value,
                    eng_fuel_actuator1_ctrl_cmd_raw_value,
                }
            }
            2364545534u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl24_knock_level_raw_value: u8 = ((frame_payload >> 56) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl23_knock_level_raw_value: u8 = ((frame_payload >> 48) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl22_knock_level_raw_value: u8 = ((frame_payload >> 40) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl21_knock_level_raw_value: u8 = ((frame_payload >> 32) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl20_knock_level_raw_value: u8 = ((frame_payload >> 24) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl19_knock_level_raw_value: u8 = ((frame_payload >> 16) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl18_knock_level_raw_value: u8 = ((frame_payload >> 8) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl17_knock_level_raw_value: u8 = (frame_payload & 255) as u8;
                DecodedFrame::Kl3 {
                    eng_cyl24_knock_level_raw_value,
                    eng_cyl23_knock_level_raw_value,
                    eng_cyl22_knock_level_raw_value,
                    eng_cyl21_knock_level_raw_value,
                    eng_cyl20_knock_level_raw_value,
                    eng_cyl19_knock_level_raw_value,
                    eng_cyl18_knock_level_raw_value,
                    eng_cyl17_knock_level_raw_value,
                }
            }
            2364545278u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl15_knock_level_raw_value: u8 = ((frame_payload >> 48) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl14_knock_level_raw_value: u8 = ((frame_payload >> 40) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl13_knock_level_raw_value: u8 = ((frame_payload >> 32) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl12_knock_level_raw_value: u8 = ((frame_payload >> 24) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl11_knock_level_raw_value: u8 = ((frame_payload >> 16) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl10_knock_level_raw_value: u8 = ((frame_payload >> 8) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl9_knock_level_raw_value: u8 = (frame_payload & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl16_knock_level_raw_value: u8 = ((frame_payload >> 56) & 255) as u8;
                DecodedFrame::Kl2 {
                    eng_cyl15_knock_level_raw_value,
                    eng_cyl14_knock_level_raw_value,
                    eng_cyl13_knock_level_raw_value,
                    eng_cyl12_knock_level_raw_value,
                    eng_cyl11_knock_level_raw_value,
                    eng_cyl10_knock_level_raw_value,
                    eng_cyl9_knock_level_raw_value,
                    eng_cyl16_knock_level_raw_value,
                }
            }
            2364545022u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl8_knock_level_raw_value: u8 = ((frame_payload >> 56) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl7_knock_level_raw_value: u8 = ((frame_payload >> 48) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl6_knock_level_raw_value: u8 = ((frame_payload >> 40) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl5_knock_level_raw_value: u8 = ((frame_payload >> 32) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl4_knock_level_raw_value: u8 = ((frame_payload >> 24) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl3_knock_level_raw_value: u8 = ((frame_payload >> 16) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl2_knock_level_raw_value: u8 = ((frame_payload >> 8) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl1_knock_level_raw_value: u8 = (frame_payload & 255) as u8;
                DecodedFrame::Kl1 {
                    eng_cyl8_knock_level_raw_value,
                    eng_cyl7_knock_level_raw_value,
                    eng_cyl6_knock_level_raw_value,
                    eng_cyl5_knock_level_raw_value,
                    eng_cyl4_knock_level_raw_value,
                    eng_cyl3_knock_level_raw_value,
                    eng_cyl2_knock_level_raw_value,
                    eng_cyl1_knock_level_raw_value,
                }
            }
            2364544766u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl9_combustion_status_raw_value: u8 = ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl8_combustion_status_raw_value: u8 = ((frame_payload >> 14) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl7_combustion_status_raw_value: u8 = ((frame_payload >> 12) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl6_combustion_status_raw_value: u8 = ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl5_combustion_status_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl4_combustion_status_raw_value: u8 = ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl3_combustion_status_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl2_combustion_status_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl24_combustion_status_raw_value: u8 = ((frame_payload >> 46) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl23_combustion_status_raw_value: u8 = ((frame_payload >> 44) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl22_combustion_status_raw_value: u8 = ((frame_payload >> 42) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl21_combustion_status_raw_value: u8 = ((frame_payload >> 40) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl20_combustion_status_raw_value: u8 = ((frame_payload >> 38) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl1_combustion_status_raw_value: u8 = (frame_payload & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl19_combustion_status_raw_value: u8 = ((frame_payload >> 36) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl18_combustion_status_raw_value: u8 = ((frame_payload >> 34) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl17_combustion_status_raw_value: u8 = ((frame_payload >> 32) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl16_combustion_status_raw_value: u8 = ((frame_payload >> 30) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl15_combustion_status_raw_value: u8 = ((frame_payload >> 28) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl14_combustion_status_raw_value: u8 = ((frame_payload >> 26) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl13_combustion_status_raw_value: u8 = ((frame_payload >> 24) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl12_combustion_status_raw_value: u8 = ((frame_payload >> 22) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl11_combustion_status_raw_value: u8 = ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl10_combustion_status_raw_value: u8 = ((frame_payload >> 18) & 3) as u8;
                let eng_cyl9_combustion_status =
                    EngCyl9CombustionStatus2364544766::from(eng_cyl9_combustion_status_raw_value);
                let eng_cyl8_combustion_status =
                    EngCyl8CombustionStatus2364544766::from(eng_cyl8_combustion_status_raw_value);
                let eng_cyl7_combustion_status =
                    EngCyl7CombustionStatus2364544766::from(eng_cyl7_combustion_status_raw_value);
                let eng_cyl6_combustion_status =
                    EngCyl6CombustionStatus2364544766::from(eng_cyl6_combustion_status_raw_value);
                let eng_cyl5_combustion_status =
                    EngCyl5CombustionStatus2364544766::from(eng_cyl5_combustion_status_raw_value);
                let eng_cyl4_combustion_status =
                    EngCyl4CombustionStatus2364544766::from(eng_cyl4_combustion_status_raw_value);
                let eng_cyl3_combustion_status =
                    EngCyl3CombustionStatus2364544766::from(eng_cyl3_combustion_status_raw_value);
                let eng_cyl2_combustion_status =
                    EngCyl2CombustionStatus2364544766::from(eng_cyl2_combustion_status_raw_value);
                let eng_cyl24_combustion_status =
                    EngCyl24CombustionStatus2364544766::from(eng_cyl24_combustion_status_raw_value);
                let eng_cyl23_combustion_status =
                    EngCyl23CombustionStatus2364544766::from(eng_cyl23_combustion_status_raw_value);
                let eng_cyl22_combustion_status =
                    EngCyl22CombustionStatus2364544766::from(eng_cyl22_combustion_status_raw_value);
                let eng_cyl21_combustion_status =
                    EngCyl21CombustionStatus2364544766::from(eng_cyl21_combustion_status_raw_value);
                let eng_cyl20_combustion_status =
                    EngCyl20CombustionStatus2364544766::from(eng_cyl20_combustion_status_raw_value);
                let eng_cyl1_combustion_status =
                    EngCyl1CombustionStatus2364544766::from(eng_cyl1_combustion_status_raw_value);
                let eng_cyl19_combustion_status =
                    EngCyl19CombustionStatus2364544766::from(eng_cyl19_combustion_status_raw_value);
                let eng_cyl18_combustion_status =
                    EngCyl18CombustionStatus2364544766::from(eng_cyl18_combustion_status_raw_value);
                let eng_cyl17_combustion_status =
                    EngCyl17CombustionStatus2364544766::from(eng_cyl17_combustion_status_raw_value);
                let eng_cyl16_combustion_status =
                    EngCyl16CombustionStatus2364544766::from(eng_cyl16_combustion_status_raw_value);
                let eng_cyl15_combustion_status =
                    EngCyl15CombustionStatus2364544766::from(eng_cyl15_combustion_status_raw_value);
                let eng_cyl14_combustion_status =
                    EngCyl14CombustionStatus2364544766::from(eng_cyl14_combustion_status_raw_value);
                let eng_cyl13_combustion_status =
                    EngCyl13CombustionStatus2364544766::from(eng_cyl13_combustion_status_raw_value);
                let eng_cyl12_combustion_status =
                    EngCyl12CombustionStatus2364544766::from(eng_cyl12_combustion_status_raw_value);
                let eng_cyl11_combustion_status =
                    EngCyl11CombustionStatus2364544766::from(eng_cyl11_combustion_status_raw_value);
                let eng_cyl10_combustion_status =
                    EngCyl10CombustionStatus2364544766::from(eng_cyl10_combustion_status_raw_value);
                DecodedFrame::Ccs {
                    eng_cyl9_combustion_status_raw_value,
                    eng_cyl8_combustion_status_raw_value,
                    eng_cyl7_combustion_status_raw_value,
                    eng_cyl6_combustion_status_raw_value,
                    eng_cyl5_combustion_status_raw_value,
                    eng_cyl4_combustion_status_raw_value,
                    eng_cyl3_combustion_status_raw_value,
                    eng_cyl2_combustion_status_raw_value,
                    eng_cyl24_combustion_status_raw_value,
                    eng_cyl23_combustion_status_raw_value,
                    eng_cyl22_combustion_status_raw_value,
                    eng_cyl21_combustion_status_raw_value,
                    eng_cyl20_combustion_status_raw_value,
                    eng_cyl1_combustion_status_raw_value,
                    eng_cyl19_combustion_status_raw_value,
                    eng_cyl18_combustion_status_raw_value,
                    eng_cyl17_combustion_status_raw_value,
                    eng_cyl16_combustion_status_raw_value,
                    eng_cyl15_combustion_status_raw_value,
                    eng_cyl14_combustion_status_raw_value,
                    eng_cyl13_combustion_status_raw_value,
                    eng_cyl12_combustion_status_raw_value,
                    eng_cyl11_combustion_status_raw_value,
                    eng_cyl10_combustion_status_raw_value,
                    eng_cyl9_combustion_status,
                    eng_cyl8_combustion_status,
                    eng_cyl7_combustion_status,
                    eng_cyl6_combustion_status,
                    eng_cyl5_combustion_status,
                    eng_cyl4_combustion_status,
                    eng_cyl3_combustion_status,
                    eng_cyl2_combustion_status,
                    eng_cyl24_combustion_status,
                    eng_cyl23_combustion_status,
                    eng_cyl22_combustion_status,
                    eng_cyl21_combustion_status,
                    eng_cyl20_combustion_status,
                    eng_cyl1_combustion_status,
                    eng_cyl19_combustion_status,
                    eng_cyl18_combustion_status,
                    eng_cyl17_combustion_status,
                    eng_cyl16_combustion_status,
                    eng_cyl15_combustion_status,
                    eng_cyl14_combustion_status,
                    eng_cyl13_combustion_status,
                    eng_cyl12_combustion_status,
                    eng_cyl11_combustion_status,
                    eng_cyl10_combustion_status,
                }
            }
            2364544510u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rq_gen_overall_power_factor_lagging_raw_value: u8 =
                    ((frame_payload >> 48) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rq_generator_overall_power_factor_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.00006103515625 + -1.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rq_generator_total_ac_reactive_power_raw_value: f64 =
                    (frame_payload & 4294967295) as f64 + -2000000000.0;
                let rq_gen_overall_power_factor_lagging =
                    RqGenOverallPowerFactorLagging2364544510::from(
                        rq_gen_overall_power_factor_lagging_raw_value,
                    );
                DecodedFrame::Rgtarp {
                    rq_gen_overall_power_factor_lagging_raw_value,
                    rq_generator_overall_power_factor_raw_value,
                    rq_generator_total_ac_reactive_power_raw_value,
                    rq_gen_overall_power_factor_lagging,
                }
            }
            2364544254u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let blade_rotation_angle_figure_of_merit_raw_value: u8 =
                    ((frame_payload >> 42) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rel_blade_height_figure_of_merit_raw_value: u8 =
                    ((frame_payload >> 40) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rel_blade_measurement_latency_raw_value: f64 =
                    ((frame_payload >> 32) & 255) as f64 * 0.5;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let blade_rotation_angle_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.0078125 + -200.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let relative_blade_height_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.1 + -3200.0;
                let blade_rotation_angle_figure_of_merit =
                    BladeRotationAngleFigureOfMerit2364544254::from(
                        blade_rotation_angle_figure_of_merit_raw_value,
                    );
                let rel_blade_height_figure_of_merit = RelBladeHeightFigureOfMerit2364544254::from(
                    rel_blade_height_figure_of_merit_raw_value,
                );
                DecodedFrame::Bi {
                    blade_rotation_angle_figure_of_merit_raw_value,
                    rel_blade_height_figure_of_merit_raw_value,
                    rel_blade_measurement_latency_raw_value,
                    blade_rotation_angle_raw_value,
                    relative_blade_height_raw_value,
                    blade_rotation_angle_figure_of_merit,
                    rel_blade_height_figure_of_merit,
                }
            }
            2349006590u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let retarder_demand_value_raw_value: f64 =
                    ((frame_payload >> 40) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let park_brake_demand_value_raw_value: f64 =
                    ((frame_payload >> 32) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let service_brake_demand_value_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.01953125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vehicle_type_raw_value: u8 = ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let brake_light_switch_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let asr_engine_control_active_raw_value: u8 = ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let asr_break_control_active_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vehicle_retarder_ctrl_active_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vehicle_abs_active_raw_value: u8 = (frame_payload & 3) as u8;
                let vehicle_type = VehicleType2349006590::from(vehicle_type_raw_value);
                let brake_light_switch =
                    BrakeLightSwitch2349006590::from(brake_light_switch_raw_value);
                let asr_engine_control_active =
                    AsrEngineControlActive2349006590::from(asr_engine_control_active_raw_value);
                let asr_break_control_active =
                    AsrBreakControlActive2349006590::from(asr_break_control_active_raw_value);
                let vehicle_retarder_ctrl_active = VehicleRetarderCtrlActive2349006590::from(
                    vehicle_retarder_ctrl_active_raw_value,
                );
                let vehicle_abs_active =
                    VehicleAbsActive2349006590::from(vehicle_abs_active_raw_value);
                DecodedFrame::Ebs11 {
                    retarder_demand_value_raw_value,
                    park_brake_demand_value_raw_value,
                    service_brake_demand_value_raw_value,
                    vehicle_type_raw_value,
                    brake_light_switch_raw_value,
                    asr_engine_control_active_raw_value,
                    asr_break_control_active_raw_value,
                    vehicle_retarder_ctrl_active_raw_value,
                    vehicle_abs_active_raw_value,
                    vehicle_type,
                    brake_light_switch,
                    asr_engine_control_active,
                    asr_break_control_active,
                    vehicle_retarder_ctrl_active,
                    vehicle_abs_active,
                }
            }
            2566834686u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let road_curvature_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.0078125 + -250.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let pneumatic_control_line_raw_value: u8 = ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let abs_offroad_request_raw_value: u8 = ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let two_el_circuits_brake_demand_raw_value: u8 = ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vehicle_retarder_ctrl_active_raw_value: u8 = (frame_payload & 3) as u8;
                let pneumatic_control_line =
                    PneumaticControlLine2566834686::from(pneumatic_control_line_raw_value);
                let abs_offroad_request =
                    AbsOffroadRequest2566834686::from(abs_offroad_request_raw_value);
                let two_el_circuits_brake_demand = TwoElCircuitsBrakeDemand2566834686::from(
                    two_el_circuits_brake_demand_raw_value,
                );
                let vehicle_retarder_ctrl_active = VehicleRetarderCtrlActive2566834686::from(
                    vehicle_retarder_ctrl_active_raw_value,
                );
                DecodedFrame::Ebs12 {
                    road_curvature_raw_value,
                    pneumatic_control_line_raw_value,
                    abs_offroad_request_raw_value,
                    two_el_circuits_brake_demand_raw_value,
                    vehicle_retarder_ctrl_active_raw_value,
                    pneumatic_control_line,
                    abs_offroad_request,
                    two_el_circuits_brake_demand,
                    vehicle_retarder_ctrl_active,
                }
            }
            2550398718u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let wheel_speed_diff_main_axle_raw_value: f64 =
                    ((frame_payload >> 40) & 65535) as f64 * 0.00390625 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let actual_retarder_perc_torque_raw_value: f64 =
                    ((frame_payload >> 32) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let wheel_based_vehicle_speed_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.00390625;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let supply_line_braking_request_raw_value: u8 = ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vdc_active_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let autom_towed_veh_break_active_raw_value: u8 = ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vehicle_service_brake_active_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vehicle_retarder_ctrl_active_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vehicle_abs_active_raw_value: u8 = (frame_payload & 3) as u8;
                let supply_line_braking_request =
                    SupplyLineBrakingRequest2550398718::from(supply_line_braking_request_raw_value);
                let vdc_active = VdcActive2550398718::from(vdc_active_raw_value);
                let autom_towed_veh_break_active = AutomTowedVehBreakActive2550398718::from(
                    autom_towed_veh_break_active_raw_value,
                );
                let vehicle_service_brake_active = VehicleServiceBrakeActive2550398718::from(
                    vehicle_service_brake_active_raw_value,
                );
                let vehicle_retarder_ctrl_active = VehicleRetarderCtrlActive2550398718::from(
                    vehicle_retarder_ctrl_active_raw_value,
                );
                let vehicle_abs_active =
                    VehicleAbsActive2550398718::from(vehicle_abs_active_raw_value);
                DecodedFrame::Ebs21 {
                    wheel_speed_diff_main_axle_raw_value,
                    actual_retarder_perc_torque_raw_value,
                    wheel_based_vehicle_speed_raw_value,
                    supply_line_braking_request_raw_value,
                    vdc_active_raw_value,
                    autom_towed_veh_break_active_raw_value,
                    vehicle_service_brake_active_raw_value,
                    vehicle_retarder_ctrl_active_raw_value,
                    vehicle_abs_active_raw_value,
                    supply_line_braking_request,
                    vdc_active,
                    autom_towed_veh_break_active,
                    vehicle_service_brake_active,
                    vehicle_retarder_ctrl_active,
                    vehicle_abs_active,
                }
            }
            2566833406u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let reference_retarder_torque_raw_value: u16 =
                    ((frame_payload >> 48) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let axle_load_sum_raw_value: f64 = ((frame_payload >> 32) & 65535) as f64 * 2.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let supply_line_braking_request_raw_value: u8 = ((frame_payload >> 26) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let loading_ramp_approach_assist_raw_value: u8 = ((frame_payload >> 24) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spring_brake_engaged_raw_value: u8 = ((frame_payload >> 22) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let electr_load_prop_func_raw_value: u8 = ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spring_brake_installed_raw_value: u8 = ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vehicle_type_raw_value: u8 = ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let elec_supply_of_non_braking_sys_raw_value: u8 =
                    ((frame_payload >> 14) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let amber_warning_signal_req_raw_value: u8 = ((frame_payload >> 12) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let red_warning_signal_request_raw_value: u8 = ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vehicle_electr_supply_suff_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let autom_towed_veh_break_active_raw_value: u8 = ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vehicle_service_brake_active_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vehicle_retarder_ctrl_active_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vehicle_abs_active_raw_value: u8 = (frame_payload & 3) as u8;
                let supply_line_braking_request =
                    SupplyLineBrakingRequest2566833406::from(supply_line_braking_request_raw_value);
                let loading_ramp_approach_assist = LoadingRampApproachAssist2566833406::from(
                    loading_ramp_approach_assist_raw_value,
                );
                let spring_brake_engaged =
                    SpringBrakeEngaged2566833406::from(spring_brake_engaged_raw_value);
                let electr_load_prop_func =
                    ElectrLoadPropFunc2566833406::from(electr_load_prop_func_raw_value);
                let spring_brake_installed =
                    SpringBrakeInstalled2566833406::from(spring_brake_installed_raw_value);
                let vehicle_type = VehicleType2566833406::from(vehicle_type_raw_value);
                let elec_supply_of_non_braking_sys = ElecSupplyOfNonBrakingSys2566833406::from(
                    elec_supply_of_non_braking_sys_raw_value,
                );
                let amber_warning_signal_req =
                    AmberWarningSignalReq2566833406::from(amber_warning_signal_req_raw_value);
                let red_warning_signal_request =
                    RedWarningSignalRequest2566833406::from(red_warning_signal_request_raw_value);
                let vehicle_electr_supply_suff =
                    VehicleElectrSupplySuff2566833406::from(vehicle_electr_supply_suff_raw_value);
                let autom_towed_veh_break_active = AutomTowedVehBreakActive2566833406::from(
                    autom_towed_veh_break_active_raw_value,
                );
                let vehicle_service_brake_active = VehicleServiceBrakeActive2566833406::from(
                    vehicle_service_brake_active_raw_value,
                );
                let vehicle_retarder_ctrl_active = VehicleRetarderCtrlActive2566833406::from(
                    vehicle_retarder_ctrl_active_raw_value,
                );
                let vehicle_abs_active =
                    VehicleAbsActive2566833406::from(vehicle_abs_active_raw_value);
                DecodedFrame::Ebs22 {
                    reference_retarder_torque_raw_value,
                    axle_load_sum_raw_value,
                    supply_line_braking_request_raw_value,
                    loading_ramp_approach_assist_raw_value,
                    spring_brake_engaged_raw_value,
                    electr_load_prop_func_raw_value,
                    spring_brake_installed_raw_value,
                    vehicle_type_raw_value,
                    elec_supply_of_non_braking_sys_raw_value,
                    amber_warning_signal_req_raw_value,
                    red_warning_signal_request_raw_value,
                    vehicle_electr_supply_suff_raw_value,
                    autom_towed_veh_break_active_raw_value,
                    vehicle_service_brake_active_raw_value,
                    vehicle_retarder_ctrl_active_raw_value,
                    vehicle_abs_active_raw_value,
                    supply_line_braking_request,
                    loading_ramp_approach_assist,
                    spring_brake_engaged,
                    electr_load_prop_func,
                    spring_brake_installed,
                    vehicle_type,
                    elec_supply_of_non_braking_sys,
                    amber_warning_signal_req,
                    red_warning_signal_request,
                    vehicle_electr_supply_suff,
                    autom_towed_veh_break_active,
                    vehicle_service_brake_active,
                    vehicle_retarder_ctrl_active,
                    vehicle_abs_active,
                }
            }
            2365507326u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let pneumatic_supply_pressure_raw_value: f64 =
                    ((frame_payload >> 56) & 255) as f64 * 5.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let brake_temperature_raw_value: f64 = ((frame_payload >> 48) & 255) as f64 * 10.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let brake_lining_raw_value: f64 = ((frame_payload >> 40) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tyre_pressure_raw_value: f64 = ((frame_payload >> 32) & 255) as f64 * 10.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tyre_wheel_ident_temp2_raw_value: u8 = ((frame_payload >> 28) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tyre_wheel_ident_temp1_raw_value: u8 = ((frame_payload >> 24) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tyre_wheel_ident_pressure2_raw_value: u8 = ((frame_payload >> 12) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tyre_wheel_ident_pressure1_raw_value: u8 = ((frame_payload >> 8) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tyre_wheel_ident_lining2_raw_value: u8 = ((frame_payload >> 20) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tyre_wheel_ident_lining1_raw_value: u8 = ((frame_payload >> 16) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vehicle_pneum_supply_suff_raw_value: u8 = ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let brake_temperature_status_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let brake_lining_sufficient_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tyre_pressure_sufficient_raw_value: u8 = (frame_payload & 3) as u8;
                let tyre_wheel_ident_temp2 =
                    TyreWheelIdentTemp22365507326::from(tyre_wheel_ident_temp2_raw_value);
                let tyre_wheel_ident_temp1 =
                    TyreWheelIdentTemp12365507326::from(tyre_wheel_ident_temp1_raw_value);
                let tyre_wheel_ident_pressure2 =
                    TyreWheelIdentPressure22365507326::from(tyre_wheel_ident_pressure2_raw_value);
                let tyre_wheel_ident_pressure1 =
                    TyreWheelIdentPressure12365507326::from(tyre_wheel_ident_pressure1_raw_value);
                let tyre_wheel_ident_lining2 =
                    TyreWheelIdentLining22365507326::from(tyre_wheel_ident_lining2_raw_value);
                let tyre_wheel_ident_lining1 =
                    TyreWheelIdentLining12365507326::from(tyre_wheel_ident_lining1_raw_value);
                let vehicle_pneum_supply_suff =
                    VehiclePneumSupplySuff2365507326::from(vehicle_pneum_supply_suff_raw_value);
                let brake_temperature_status =
                    BrakeTemperatureStatus2365507326::from(brake_temperature_status_raw_value);
                let brake_lining_sufficient =
                    BrakeLiningSufficient2365507326::from(brake_lining_sufficient_raw_value);
                let tyre_pressure_sufficient =
                    TyrePressureSufficient2365507326::from(tyre_pressure_sufficient_raw_value);
                DecodedFrame::Ebs23 {
                    pneumatic_supply_pressure_raw_value,
                    brake_temperature_raw_value,
                    brake_lining_raw_value,
                    tyre_pressure_raw_value,
                    tyre_wheel_ident_temp2_raw_value,
                    tyre_wheel_ident_temp1_raw_value,
                    tyre_wheel_ident_pressure2_raw_value,
                    tyre_wheel_ident_pressure1_raw_value,
                    tyre_wheel_ident_lining2_raw_value,
                    tyre_wheel_ident_lining1_raw_value,
                    vehicle_pneum_supply_suff_raw_value,
                    brake_temperature_status_raw_value,
                    brake_lining_sufficient_raw_value,
                    tyre_pressure_sufficient_raw_value,
                    tyre_wheel_ident_temp2,
                    tyre_wheel_ident_temp1,
                    tyre_wheel_ident_pressure2,
                    tyre_wheel_ident_pressure1,
                    tyre_wheel_ident_lining2,
                    tyre_wheel_ident_lining1,
                    vehicle_pneum_supply_suff,
                    brake_temperature_status,
                    brake_lining_sufficient,
                    tyre_pressure_sufficient,
                }
            }
            2565013246u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let odd_request_raw_value: u8 = ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let anti_theft_device_req_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vehicle_type_raw_value: u8 = (frame_payload & 3) as u8;
                let odd_request = OddRequest2565013246::from(odd_request_raw_value);
                let anti_theft_device_req =
                    AntiTheftDeviceReq2565013246::from(anti_theft_device_req_raw_value);
                let vehicle_type = VehicleType2565013246::from(vehicle_type_raw_value);
                DecodedFrame::Gpm11 {
                    odd_request_raw_value,
                    anti_theft_device_req_raw_value,
                    vehicle_type_raw_value,
                    odd_request,
                    anti_theft_device_req,
                    vehicle_type,
                }
            }
            2566807038u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let max_vehicle_speed_limit_raw_value: u8 = ((frame_payload >> 32) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let engine_speed_upper_limit_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let engine_speed_lower_limit_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.125;
                DecodedFrame::Gpm12 {
                    max_vehicle_speed_limit_raw_value,
                    engine_speed_upper_limit_raw_value,
                    engine_speed_lower_limit_raw_value,
                }
            }
            2365480958u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let engine_torque_mode_raw_value: u8 = (frame_payload & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vehicle_speed_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.00390625;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let percent_load_at_current_speed_raw_value: u8 =
                    ((frame_payload >> 40) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let engine_speed_raw_value: f64 = ((frame_payload >> 24) & 65535) as f64 * 0.125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let actual_engine_perc_torque_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let drivers_demand_engine_perc_torque_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let engine_running_raw_value: u8 = ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let engine_control_allowed_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let engine_torque_mode =
                    EngineTorqueMode2365480958::from(engine_torque_mode_raw_value);
                let engine_running = EngineRunning2365480958::from(engine_running_raw_value);
                let engine_control_allowed =
                    EngineControlAllowed2365480958::from(engine_control_allowed_raw_value);
                DecodedFrame::Gpm13 {
                    engine_torque_mode_raw_value,
                    vehicle_speed_raw_value,
                    percent_load_at_current_speed_raw_value,
                    engine_speed_raw_value,
                    actual_engine_perc_torque_raw_value,
                    drivers_demand_engine_perc_torque_raw_value,
                    engine_running_raw_value,
                    engine_control_allowed_raw_value,
                    engine_torque_mode,
                    engine_running,
                    engine_control_allowed,
                }
            }
            2566808062u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let clutch_indptd_pto_feedback_raw_value: u8 = ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let accel_pedal_position_raw_value: f64 =
                    ((frame_payload >> 56) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let accel_pedal_low_idle_switch_raw_value: u8 = ((frame_payload >> 50) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let starter_active_raw_value: u8 = ((frame_payload >> 48) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let torque_conv_oil_temp_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let torque_convt_oil_temp_warning_raw_value: u8 = ((frame_payload >> 28) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let pto_control_allowed_raw_value: u8 = ((frame_payload >> 26) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let sec_engine_mtd_pto_feedback_raw_value: u8 = ((frame_payload >> 24) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let first_engine_mtd_pto_feedback_raw_value: u8 = ((frame_payload >> 22) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let sec_clutch_dptd_pto_feedback_raw_value: u8 = ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let first_clutch_dpdt_pto_feedback_raw_value: u8 =
                    ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let current_gear_raw_value: f64 = ((frame_payload >> 8) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let percent_clutch_slip_raw_value: f64 = (frame_payload & 255) as f64 * 0.4;
                let clutch_indptd_pto_feedback =
                    ClutchIndptdPtoFeedback2566808062::from(clutch_indptd_pto_feedback_raw_value);
                let accel_pedal_low_idle_switch =
                    AccelPedalLowIdleSwitch2566808062::from(accel_pedal_low_idle_switch_raw_value);
                let starter_active = StarterActive2566808062::from(starter_active_raw_value);
                let torque_convt_oil_temp_warning = TorqueConvtOilTempWarning2566808062::from(
                    torque_convt_oil_temp_warning_raw_value,
                );
                let pto_control_allowed =
                    PtoControlAllowed2566808062::from(pto_control_allowed_raw_value);
                let sec_engine_mtd_pto_feedback =
                    SecEngineMtdPtoFeedback2566808062::from(sec_engine_mtd_pto_feedback_raw_value);
                let first_engine_mtd_pto_feedback = FirstEngineMtdPtoFeedback2566808062::from(
                    first_engine_mtd_pto_feedback_raw_value,
                );
                let sec_clutch_dptd_pto_feedback = SecClutchDptdPtoFeedback2566808062::from(
                    sec_clutch_dptd_pto_feedback_raw_value,
                );
                let first_clutch_dpdt_pto_feedback = FirstClutchDpdtPtoFeedback2566808062::from(
                    first_clutch_dpdt_pto_feedback_raw_value,
                );
                DecodedFrame::Gpm14 {
                    clutch_indptd_pto_feedback_raw_value,
                    accel_pedal_position_raw_value,
                    accel_pedal_low_idle_switch_raw_value,
                    starter_active_raw_value,
                    torque_conv_oil_temp_raw_value,
                    torque_convt_oil_temp_warning_raw_value,
                    pto_control_allowed_raw_value,
                    sec_engine_mtd_pto_feedback_raw_value,
                    first_engine_mtd_pto_feedback_raw_value,
                    sec_clutch_dptd_pto_feedback_raw_value,
                    first_clutch_dpdt_pto_feedback_raw_value,
                    current_gear_raw_value,
                    percent_clutch_slip_raw_value,
                    clutch_indptd_pto_feedback,
                    accel_pedal_low_idle_switch,
                    starter_active,
                    torque_convt_oil_temp_warning,
                    pto_control_allowed,
                    sec_engine_mtd_pto_feedback,
                    first_engine_mtd_pto_feedback,
                    sec_clutch_dptd_pto_feedback,
                    first_clutch_dpdt_pto_feedback,
                }
            }
            2566808574u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let reference_engine_torque_raw_value: u16 = ((frame_payload >> 40) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let fuel_level_warning_raw_value: u8 = ((frame_payload >> 37) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let engine_oil_pressure_warning_raw_value: u8 = ((frame_payload >> 35) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let engine_coolant_temp_warning_raw_value: u8 = ((frame_payload >> 32) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let engine_oil_pressure_raw_value: f64 = ((frame_payload >> 24) & 255) as f64 * 4.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let engine_coolant_temperature_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 + -40.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let engine_oil_temperature_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.03125 + -273.0;
                let fuel_level_warning =
                    FuelLevelWarning2566808574::from(fuel_level_warning_raw_value);
                let engine_oil_pressure_warning =
                    EngineOilPressureWarning2566808574::from(engine_oil_pressure_warning_raw_value);
                let engine_coolant_temp_warning =
                    EngineCoolantTempWarning2566808574::from(engine_coolant_temp_warning_raw_value);
                DecodedFrame::Gpm15 {
                    reference_engine_torque_raw_value,
                    fuel_level_warning_raw_value,
                    engine_oil_pressure_warning_raw_value,
                    engine_coolant_temp_warning_raw_value,
                    engine_oil_pressure_raw_value,
                    engine_coolant_temperature_raw_value,
                    engine_oil_temperature_raw_value,
                    fuel_level_warning,
                    engine_oil_pressure_warning,
                    engine_coolant_temp_warning,
                }
            }
            2566809086u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let ambient_air_temperature_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.03125 + -273.0;
                DecodedFrame::Gpm16 {
                    ambient_air_temperature_raw_value,
                }
            }
            2564947710u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vehicle_type_raw_value: u8 = (frame_payload & 3) as u8;
                let vehicle_type = VehicleType2564947710::from(vehicle_type_raw_value);
                DecodedFrame::Gpm21 {
                    vehicle_type_raw_value,
                    vehicle_type,
                }
            }
            2566834430u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let body_pressure_raw_value: f64 = ((frame_payload >> 48) & 255) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let body_fluid_level_raw_value: f64 = ((frame_payload >> 32) & 65535) as f64 * 2.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let thermal_body_temperature_raw_value: f64 =
                    ((frame_payload >> 24) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rear_obstacle_distance_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 * 2.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let anti_theft_device_status_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let odd_status_raw_value: u8 = (frame_payload & 3) as u8;
                let anti_theft_device_status =
                    AntiTheftDeviceStatus2566834430::from(anti_theft_device_status_raw_value);
                let odd_status = OddStatus2566834430::from(odd_status_raw_value);
                DecodedFrame::Gpm22 {
                    body_pressure_raw_value,
                    body_fluid_level_raw_value,
                    thermal_body_temperature_raw_value,
                    rear_obstacle_distance_raw_value,
                    anti_theft_device_status_raw_value,
                    odd_status_raw_value,
                    anti_theft_device_status,
                    odd_status,
                }
            }
            2365481214u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let req_engine_speed_upper_lim_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let req_engine_speed_lower_lim_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let req_engine_torque_limit_raw_value: f64 =
                    ((frame_payload >> 48) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let req_engine_speed_limit_raw_value: u8 = ((frame_payload >> 56) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let req_engine_speed_raw_value: f64 = (frame_payload & 65535) as f64 * 0.125;
                DecodedFrame::Gpm23 {
                    req_engine_speed_upper_lim_raw_value,
                    req_engine_speed_lower_lim_raw_value,
                    req_engine_torque_limit_raw_value,
                    req_engine_speed_limit_raw_value,
                    req_engine_speed_raw_value,
                }
            }
            2566808318u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let sec_engine_mtd_pto_switch_raw_value: u8 = ((frame_payload >> 30) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let sec_clutch_dpdt_pto_switch_raw_value: u8 = ((frame_payload >> 24) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let first_clutch_dpdt_pto_switch_raw_value: u8 = ((frame_payload >> 22) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let operating_panel_active_raw_value: u8 = ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let refuse_packer_step_switch_raw_value: u8 = ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let engine_stop_switch_raw_value: u8 = ((frame_payload >> 12) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let engine_start_switch_raw_value: u8 = ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let starter_lockout_switch_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rqsted_percent_clutch_slip_raw_value: f64 = (frame_payload & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let first_engine_mtd_pto_switch_raw_value: u8 = ((frame_payload >> 28) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let clutch_indpdt_pto_switch_raw_value: u8 = ((frame_payload >> 26) & 3) as u8;
                let sec_engine_mtd_pto_switch =
                    SecEngineMtdPtoSwitch2566808318::from(sec_engine_mtd_pto_switch_raw_value);
                let sec_clutch_dpdt_pto_switch =
                    SecClutchDpdtPtoSwitch2566808318::from(sec_clutch_dpdt_pto_switch_raw_value);
                let first_clutch_dpdt_pto_switch = FirstClutchDpdtPtoSwitch2566808318::from(
                    first_clutch_dpdt_pto_switch_raw_value,
                );
                let operating_panel_active =
                    OperatingPanelActive2566808318::from(operating_panel_active_raw_value);
                let refuse_packer_step_switch =
                    RefusePackerStepSwitch2566808318::from(refuse_packer_step_switch_raw_value);
                let engine_stop_switch =
                    EngineStopSwitch2566808318::from(engine_stop_switch_raw_value);
                let engine_start_switch =
                    EngineStartSwitch2566808318::from(engine_start_switch_raw_value);
                let starter_lockout_switch =
                    StarterLockoutSwitch2566808318::from(starter_lockout_switch_raw_value);
                let first_engine_mtd_pto_switch =
                    FirstEngineMtdPtoSwitch2566808318::from(first_engine_mtd_pto_switch_raw_value);
                let clutch_indpdt_pto_switch =
                    ClutchIndpdtPtoSwitch2566808318::from(clutch_indpdt_pto_switch_raw_value);
                DecodedFrame::Gpm24 {
                    sec_engine_mtd_pto_switch_raw_value,
                    sec_clutch_dpdt_pto_switch_raw_value,
                    first_clutch_dpdt_pto_switch_raw_value,
                    operating_panel_active_raw_value,
                    refuse_packer_step_switch_raw_value,
                    engine_stop_switch_raw_value,
                    engine_start_switch_raw_value,
                    starter_lockout_switch_raw_value,
                    rqsted_percent_clutch_slip_raw_value,
                    first_engine_mtd_pto_switch_raw_value,
                    clutch_indpdt_pto_switch_raw_value,
                    sec_engine_mtd_pto_switch,
                    sec_clutch_dpdt_pto_switch,
                    first_clutch_dpdt_pto_switch,
                    operating_panel_active,
                    refuse_packer_step_switch,
                    engine_stop_switch,
                    engine_start_switch,
                    starter_lockout_switch,
                    first_engine_mtd_pto_switch,
                    clutch_indpdt_pto_switch,
                }
            }
            2566808830u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_left_side_marker_light_raw_value: u8 =
                    ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_left_reversing_light_raw_value: u8 = ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_left_rear_wid_ind_light_raw_value: u8 =
                    ((frame_payload >> 24) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_left_rear_reg_plt_light_raw_value: u8 =
                    ((frame_payload >> 32) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_left_rear_light_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_left_rear_fog_light_raw_value: u8 = ((frame_payload >> 12) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_left_dir_ind_light_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_left_crn_marker_light_raw_value: u8 = ((frame_payload >> 28) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_interior_light_raw_value: u8 = ((frame_payload >> 40) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_work_lamp_raw_value: u8 = ((frame_payload >> 42) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_rotating_ident_light_raw_value: u8 = ((frame_payload >> 38) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_right_stop_light_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_right_side_mrk_light_raw_value: u8 = ((frame_payload >> 22) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_right_reversing_light_raw_value: u8 = ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trail_right_rear_wid_ind_light_raw_value: u8 =
                    ((frame_payload >> 26) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_right_rear_reg_plt_light_raw_value: u8 =
                    ((frame_payload >> 34) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_right_rear_light_raw_value: u8 = ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_right_rear_fog_light_raw_value: u8 = ((frame_payload >> 14) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_right_dir_ind_light_raw_value: u8 = ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_right_crn_marker_light_raw_value: u8 =
                    ((frame_payload >> 30) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_rear_warning_light_raw_value: u8 = ((frame_payload >> 36) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_left_stop_light_raw_value: u8 = (frame_payload & 3) as u8;
                let trailer_left_side_marker_light = TrailerLeftSideMarkerLight2566808830::from(
                    trailer_left_side_marker_light_raw_value,
                );
                let trailer_left_reversing_light = TrailerLeftReversingLight2566808830::from(
                    trailer_left_reversing_light_raw_value,
                );
                let trailer_left_rear_wid_ind_light = TrailerLeftRearWidIndLight2566808830::from(
                    trailer_left_rear_wid_ind_light_raw_value,
                );
                let trailer_left_rear_reg_plt_light = TrailerLeftRearRegPltLight2566808830::from(
                    trailer_left_rear_reg_plt_light_raw_value,
                );
                let trailer_left_rear_light =
                    TrailerLeftRearLight2566808830::from(trailer_left_rear_light_raw_value);
                let trailer_left_rear_fog_light =
                    TrailerLeftRearFogLight2566808830::from(trailer_left_rear_fog_light_raw_value);
                let trailer_left_dir_ind_light =
                    TrailerLeftDirIndLight2566808830::from(trailer_left_dir_ind_light_raw_value);
                let trailer_left_crn_marker_light = TrailerLeftCrnMarkerLight2566808830::from(
                    trailer_left_crn_marker_light_raw_value,
                );
                let trailer_interior_light =
                    TrailerInteriorLight2566808830::from(trailer_interior_light_raw_value);
                let trailer_work_lamp =
                    TrailerWorkLamp2566808830::from(trailer_work_lamp_raw_value);
                let trailer_rotating_ident_light = TrailerRotatingIdentLight2566808830::from(
                    trailer_rotating_ident_light_raw_value,
                );
                let trailer_right_stop_light =
                    TrailerRightStopLight2566808830::from(trailer_right_stop_light_raw_value);
                let trailer_right_side_mrk_light = TrailerRightSideMrkLight2566808830::from(
                    trailer_right_side_mrk_light_raw_value,
                );
                let trailer_right_reversing_light = TrailerRightReversingLight2566808830::from(
                    trailer_right_reversing_light_raw_value,
                );
                let trail_right_rear_wid_ind_light = TrailRightRearWidIndLight2566808830::from(
                    trail_right_rear_wid_ind_light_raw_value,
                );
                let trailer_right_rear_reg_plt_light = TrailerRightRearRegPltLight2566808830::from(
                    trailer_right_rear_reg_plt_light_raw_value,
                );
                let trailer_right_rear_light =
                    TrailerRightRearLight2566808830::from(trailer_right_rear_light_raw_value);
                let trailer_right_rear_fog_light = TrailerRightRearFogLight2566808830::from(
                    trailer_right_rear_fog_light_raw_value,
                );
                let trailer_right_dir_ind_light =
                    TrailerRightDirIndLight2566808830::from(trailer_right_dir_ind_light_raw_value);
                let trailer_right_crn_marker_light = TrailerRightCrnMarkerLight2566808830::from(
                    trailer_right_crn_marker_light_raw_value,
                );
                let trailer_rear_warning_light =
                    TrailerRearWarningLight2566808830::from(trailer_rear_warning_light_raw_value);
                let trailer_left_stop_light =
                    TrailerLeftStopLight2566808830::from(trailer_left_stop_light_raw_value);
                DecodedFrame::Gpm25 {
                    trailer_left_side_marker_light_raw_value,
                    trailer_left_reversing_light_raw_value,
                    trailer_left_rear_wid_ind_light_raw_value,
                    trailer_left_rear_reg_plt_light_raw_value,
                    trailer_left_rear_light_raw_value,
                    trailer_left_rear_fog_light_raw_value,
                    trailer_left_dir_ind_light_raw_value,
                    trailer_left_crn_marker_light_raw_value,
                    trailer_interior_light_raw_value,
                    trailer_work_lamp_raw_value,
                    trailer_rotating_ident_light_raw_value,
                    trailer_right_stop_light_raw_value,
                    trailer_right_side_mrk_light_raw_value,
                    trailer_right_reversing_light_raw_value,
                    trail_right_rear_wid_ind_light_raw_value,
                    trailer_right_rear_reg_plt_light_raw_value,
                    trailer_right_rear_light_raw_value,
                    trailer_right_rear_fog_light_raw_value,
                    trailer_right_dir_ind_light_raw_value,
                    trailer_right_crn_marker_light_raw_value,
                    trailer_rear_warning_light_raw_value,
                    trailer_left_stop_light_raw_value,
                    trailer_left_side_marker_light,
                    trailer_left_reversing_light,
                    trailer_left_rear_wid_ind_light,
                    trailer_left_rear_reg_plt_light,
                    trailer_left_rear_light,
                    trailer_left_rear_fog_light,
                    trailer_left_dir_ind_light,
                    trailer_left_crn_marker_light,
                    trailer_interior_light,
                    trailer_work_lamp,
                    trailer_rotating_ident_light,
                    trailer_right_stop_light,
                    trailer_right_side_mrk_light,
                    trailer_right_reversing_light,
                    trail_right_rear_wid_ind_light,
                    trailer_right_rear_reg_plt_light,
                    trailer_right_rear_light,
                    trailer_right_rear_fog_light,
                    trailer_right_dir_ind_light,
                    trailer_right_crn_marker_light,
                    trailer_rear_warning_light,
                    trailer_left_stop_light,
                }
            }
            2564554494u32 => {
                todo!();
                let frame_payload: u64 = LE::read_u64(frame.data());
                let sn_raw_value: Option<u8> = Some((frame_payload & 15) as u8);
                todo!();
                let frame_payload: u64 = LE::read_u64(frame.data());
                let separation_time_raw_value: Option<u8> =
                    Some(((frame_payload >> 16) & 255) as u8);
                todo!();
                let frame_payload: u64 = LE::read_u64(frame.data());
                let block_size_raw_value: Option<u8> = Some(((frame_payload >> 8) & 255) as u8);
                todo!();
                let frame_payload: u64 = LE::read_u64(frame.data());
                let flow_status_raw_value: Option<u8> = Some((frame_payload & 15) as u8);
                todo!();
                let frame_payload: u64 = BE::read_u64(frame.data());
                let first_frame_data_length_raw_value: Option<u16> =
                    Some(((frame_payload >> 47) & 4095) as u16);
                todo!();
                let frame_payload: u64 = LE::read_u64(frame.data());
                let single_frame_data_length_raw_value: Option<u8> =
                    Some((frame_payload & 15) as u8);
                let frame_payload: u64 = LE::read_u64(frame.data());
                let protocol_ctrl_information_raw_value: u8 = ((frame_payload >> 4) & 15) as u8;
                let flow_status = todo!();
                let protocol_ctrl_information =
                    ProtocolCtrlInformation2564554494::from(protocol_ctrl_information_raw_value);
                DecodedFrame::Iso15765Funct {
                    sn_raw_value,
                    separation_time_raw_value,
                    block_size_raw_value,
                    flow_status_raw_value,
                    first_frame_data_length_raw_value,
                    single_frame_data_length_raw_value,
                    protocol_ctrl_information_raw_value,
                    flow_status,
                    protocol_ctrl_information,
                }
            }
            2564488958u32 => {
                todo!();
                let frame_payload: u64 = LE::read_u64(frame.data());
                let sn_raw_value: Option<u8> = Some((frame_payload & 15) as u8);
                todo!();
                let frame_payload: u64 = LE::read_u64(frame.data());
                let separation_time_raw_value: Option<u8> =
                    Some(((frame_payload >> 16) & 255) as u8);
                todo!();
                let frame_payload: u64 = LE::read_u64(frame.data());
                let block_size_raw_value: Option<u8> = Some(((frame_payload >> 8) & 255) as u8);
                todo!();
                let frame_payload: u64 = LE::read_u64(frame.data());
                let flow_status_raw_value: Option<u8> = Some((frame_payload & 15) as u8);
                todo!();
                let frame_payload: u64 = BE::read_u64(frame.data());
                let first_frame_data_length_raw_value: Option<u16> =
                    Some(((frame_payload >> 47) & 4095) as u16);
                todo!();
                let frame_payload: u64 = LE::read_u64(frame.data());
                let single_frame_data_length_raw_value: Option<u8> =
                    Some((frame_payload & 15) as u8);
                let frame_payload: u64 = LE::read_u64(frame.data());
                let protocol_ctrl_information_raw_value: u8 = ((frame_payload >> 4) & 15) as u8;
                let flow_status = todo!();
                let protocol_ctrl_information =
                    ProtocolCtrlInformation2564488958::from(protocol_ctrl_information_raw_value);
                DecodedFrame::Iso15765Phys {
                    sn_raw_value,
                    separation_time_raw_value,
                    block_size_raw_value,
                    flow_status_raw_value,
                    first_frame_data_length_raw_value,
                    single_frame_data_length_raw_value,
                    protocol_ctrl_information_raw_value,
                    flow_status,
                    protocol_ctrl_information,
                }
            }
            2565734142u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let control_byte_raw_value: u8 = (frame_payload & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let filter_mode_raw_value: u8 = ((frame_payload >> 16) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let to_port_raw_value: u8 = ((frame_payload >> 8) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let from_port_raw_value: u8 = ((frame_payload >> 12) & 15) as u8;
                let control_byte = ControlByte2565734142::from(control_byte_raw_value);
                let filter_mode = FilterMode2565734142::from(filter_mode_raw_value);
                DecodedFrame::Network {
                    control_byte_raw_value,
                    filter_mode_raw_value,
                    to_port_raw_value,
                    from_port_raw_value,
                    control_byte,
                    filter_mode,
                }
            }
            2565144318u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let parking_and_trailer_air_press_raw_value: f64 =
                    ((frame_payload >> 40) & 255) as f64 * 8.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let driven_axle_load_raw_value: f64 = ((frame_payload >> 24) & 65535) as f64 * 2.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_equip_supply_pressure_raw_value: f64 =
                    ((frame_payload >> 48) & 255) as f64 * 8.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let stop_level_change_req_raw_value: u8 = ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let ramp_level_storage_req_raw_value: u8 = ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let level_control_req_raw_value: u8 = ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let ramp_level_req_raw_value: u8 = ((frame_payload >> 14) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let steering_axle_locking_req_raw_value: u8 = ((frame_payload >> 12) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lift_axle2_position_req_raw_value: u8 = ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lift_axle1_position_req_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let traction_help_req_raw_value: u8 = ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let level_change_req_rear_axle_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let level_change_req_front_axle_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let ride_height_request_raw_value: u8 = (frame_payload & 3) as u8;
                let stop_level_change_req =
                    StopLevelChangeReq2565144318::from(stop_level_change_req_raw_value);
                let ramp_level_storage_req =
                    RampLevelStorageReq2565144318::from(ramp_level_storage_req_raw_value);
                let level_control_req =
                    LevelControlReq2565144318::from(level_control_req_raw_value);
                let ramp_level_req = RampLevelReq2565144318::from(ramp_level_req_raw_value);
                let steering_axle_locking_req =
                    SteeringAxleLockingReq2565144318::from(steering_axle_locking_req_raw_value);
                let lift_axle2_position_req =
                    LiftAxle2PositionReq2565144318::from(lift_axle2_position_req_raw_value);
                let lift_axle1_position_req =
                    LiftAxle1PositionReq2565144318::from(lift_axle1_position_req_raw_value);
                let traction_help_req =
                    TractionHelpReq2565144318::from(traction_help_req_raw_value);
                let level_change_req_rear_axle =
                    LevelChangeReqRearAxle2565144318::from(level_change_req_rear_axle_raw_value);
                let level_change_req_front_axle =
                    LevelChangeReqFrontAxle2565144318::from(level_change_req_front_axle_raw_value);
                let ride_height_request =
                    RideHeightRequest2565144318::from(ride_height_request_raw_value);
                DecodedFrame::Rge11 {
                    parking_and_trailer_air_press_raw_value,
                    driven_axle_load_raw_value,
                    aux_equip_supply_pressure_raw_value,
                    stop_level_change_req_raw_value,
                    ramp_level_storage_req_raw_value,
                    level_control_req_raw_value,
                    ramp_level_req_raw_value,
                    steering_axle_locking_req_raw_value,
                    lift_axle2_position_req_raw_value,
                    lift_axle1_position_req_raw_value,
                    traction_help_req_raw_value,
                    level_change_req_rear_axle_raw_value,
                    level_change_req_front_axle_raw_value,
                    ride_height_request_raw_value,
                    stop_level_change_req,
                    ramp_level_storage_req,
                    level_control_req,
                    ramp_level_req,
                    steering_axle_locking_req,
                    lift_axle2_position_req,
                    lift_axle1_position_req,
                    traction_help_req,
                    level_change_req_rear_axle,
                    level_change_req_front_axle,
                    ride_height_request,
                }
            }
            2565209854u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let level_control_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let nominal_veh_body_level_rear_axle_raw_value: u16 =
                    ((frame_payload >> 48) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let nominal_veh_body_level_front_axle_raw_value: u16 =
                    ((frame_payload >> 32) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let ramp_level_raw_value: u8 = ((frame_payload >> 28) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let normal_level_raw_value: u8 = ((frame_payload >> 26) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let stop_level_change_acknowledge_raw_value: u8 = ((frame_payload >> 24) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let level_change_rear_axle_raw_value: u8 = ((frame_payload >> 22) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let level_change_front_axle_raw_value: u8 = ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let ramp_level_storage_raw_value: u8 = ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let steering_axle_locking_raw_value: u8 = ((frame_payload >> 12) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lift_axle2_pos_raw_value: u8 = ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lift_axle1_pos_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let ramp_level_position_raw_value: u8 = ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let traction_help_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let level_ctrl_sys_ride_height_level_raw_value: u8 = (frame_payload & 3) as u8;
                let level_control = LevelControl2565209854::from(level_control_raw_value);
                let ramp_level = RampLevel2565209854::from(ramp_level_raw_value);
                let normal_level = NormalLevel2565209854::from(normal_level_raw_value);
                let stop_level_change_acknowledge = StopLevelChangeAcknowledge2565209854::from(
                    stop_level_change_acknowledge_raw_value,
                );
                let level_change_rear_axle =
                    LevelChangeRearAxle2565209854::from(level_change_rear_axle_raw_value);
                let level_change_front_axle =
                    LevelChangeFrontAxle2565209854::from(level_change_front_axle_raw_value);
                let ramp_level_storage =
                    RampLevelStorage2565209854::from(ramp_level_storage_raw_value);
                let steering_axle_locking =
                    SteeringAxleLocking2565209854::from(steering_axle_locking_raw_value);
                let lift_axle2_pos = LiftAxle2Pos2565209854::from(lift_axle2_pos_raw_value);
                let lift_axle1_pos = LiftAxle1Pos2565209854::from(lift_axle1_pos_raw_value);
                let ramp_level_position =
                    RampLevelPosition2565209854::from(ramp_level_position_raw_value);
                let traction_help = TractionHelp2565209854::from(traction_help_raw_value);
                let level_ctrl_sys_ride_height_level = LevelCtrlSysRideHeightLevel2565209854::from(
                    level_ctrl_sys_ride_height_level_raw_value,
                );
                DecodedFrame::Rge21 {
                    level_control_raw_value,
                    nominal_veh_body_level_rear_axle_raw_value,
                    nominal_veh_body_level_front_axle_raw_value,
                    ramp_level_raw_value,
                    normal_level_raw_value,
                    stop_level_change_acknowledge_raw_value,
                    level_change_rear_axle_raw_value,
                    level_change_front_axle_raw_value,
                    ramp_level_storage_raw_value,
                    steering_axle_locking_raw_value,
                    lift_axle2_pos_raw_value,
                    lift_axle1_pos_raw_value,
                    ramp_level_position_raw_value,
                    traction_help_raw_value,
                    level_ctrl_sys_ride_height_level_raw_value,
                    level_control,
                    ramp_level,
                    normal_level,
                    stop_level_change_acknowledge,
                    level_change_rear_axle,
                    level_change_front_axle,
                    ramp_level_storage,
                    steering_axle_locking,
                    lift_axle2_pos,
                    lift_axle1_pos,
                    ramp_level_position,
                    traction_help,
                    level_ctrl_sys_ride_height_level,
                }
            }
            2566806782u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rel_veh_body_level_rear_axle_raw_value: u16 =
                    ((frame_payload >> 16) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rel_veh_body_level_front_axle_raw_value: f64 =
                    (frame_payload & 65535) as f64 + -32000.0;
                DecodedFrame::Rge22 {
                    rel_veh_body_level_rear_axle_raw_value,
                    rel_veh_body_level_front_axle_raw_value,
                }
            }
            2566807294u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tyre_press_threshold_detect_raw_value: u8 = ((frame_payload >> 40) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tyre_module_power_supply_raw_value: u8 = ((frame_payload >> 43) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tyre_temperature_raw_value: f64 =
                    ((frame_payload >> 8) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let air_leakage_detection_raw_value: f64 =
                    ((frame_payload >> 24) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tyre_wheel_identification2_raw_value: u8 = ((frame_payload >> 4) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tyre_wheel_identification1_raw_value: u8 = (frame_payload & 15) as u8;
                let tyre_press_threshold_detect =
                    TyrePressThresholdDetect2566807294::from(tyre_press_threshold_detect_raw_value);
                let tyre_module_power_supply =
                    TyreModulePowerSupply2566807294::from(tyre_module_power_supply_raw_value);
                let tyre_wheel_identification2 =
                    TyreWheelIdentification22566807294::from(tyre_wheel_identification2_raw_value);
                let tyre_wheel_identification1 =
                    TyreWheelIdentification12566807294::from(tyre_wheel_identification1_raw_value);
                DecodedFrame::Rge23 {
                    tyre_press_threshold_detect_raw_value,
                    tyre_module_power_supply_raw_value,
                    tyre_temperature_raw_value,
                    air_leakage_detection_raw_value,
                    tyre_wheel_identification2_raw_value,
                    tyre_wheel_identification1_raw_value,
                    tyre_press_threshold_detect,
                    tyre_module_power_supply,
                    tyre_wheel_identification2,
                    tyre_wheel_identification1,
                }
            }
            2566764798u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let misfire_monitoring_complete_raw_value: bool = ((frame_payload >> 28) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let misfire_monitoring_enabled_raw_value: bool = ((frame_payload >> 24) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let fuel_system_monitoring_enabled_raw_value: bool =
                    ((frame_payload >> 25) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let comprehensive_compt_mon_complete_raw_value: bool =
                    ((frame_payload >> 30) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let comprehensive_comp_mon_enabled_raw_value: bool =
                    ((frame_payload >> 26) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let second_air_system_mon_complete_raw_value: bool =
                    ((frame_payload >> 51) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let second_air_system_mon_enabled_raw_value: bool =
                    ((frame_payload >> 35) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let oxygen_sensor_mon_complete_raw_value: bool = ((frame_payload >> 53) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let oxygen_sensor_mon_enabled_raw_value: bool = ((frame_payload >> 37) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let oxygen_sensor_heater_mon_complete_raw_value: bool =
                    ((frame_payload >> 54) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let oxygen_sensor_heater_mon_enabled_raw_value: bool =
                    ((frame_payload >> 38) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let heated_catalyst_mon_complete_raw_value: bool = ((frame_payload >> 49) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let heated_catalyst_mon_enabled_raw_value: bool = ((frame_payload >> 33) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let evaporative_system_mon_complete_raw_value: bool =
                    ((frame_payload >> 50) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let evaporative_system_mon_enabled_raw_value: bool =
                    ((frame_payload >> 34) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let egr_system_monitoring_complete_raw_value: bool =
                    ((frame_payload >> 55) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let egr_system_monitoring_enabled_raw_value: bool =
                    ((frame_payload >> 39) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let cold_start_aid_system_mon_complete_raw_value: bool =
                    ((frame_payload >> 56) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let cold_start_aid_system_mon_enabled_raw_value: bool =
                    ((frame_payload >> 40) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let catalyst_mon_complete_raw_value: bool = ((frame_payload >> 48) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let catalyst_mon_enabled_raw_value: bool = ((frame_payload >> 32) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let ac_system_refrigerant_mon_complete_raw_value: bool =
                    ((frame_payload >> 52) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let ac_system_refrigerant_mon_enabled_raw_value: bool =
                    ((frame_payload >> 36) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let fuel_system_monitoring_complete_raw_value: bool =
                    ((frame_payload >> 29) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let num_of_warm_ups_since_dt_cs_cleared_raw_value: u8 =
                    ((frame_payload >> 16) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let time_since_engine_start_raw_value: u16 = (frame_payload & 65535) as u16;
                let misfire_monitoring_complete = MisfireMonitoringComplete2566764798::from(
                    misfire_monitoring_complete_raw_value,
                );
                let misfire_monitoring_enabled =
                    MisfireMonitoringEnabled2566764798::from(misfire_monitoring_enabled_raw_value);
                let fuel_system_monitoring_enabled = FuelSystemMonitoringEnabled2566764798::from(
                    fuel_system_monitoring_enabled_raw_value,
                );
                let comprehensive_compt_mon_complete =
                    ComprehensiveComptMonComplete2566764798::from(
                        comprehensive_compt_mon_complete_raw_value,
                    );
                let comprehensive_comp_mon_enabled = ComprehensiveCompMonEnabled2566764798::from(
                    comprehensive_comp_mon_enabled_raw_value,
                );
                let second_air_system_mon_complete = SecondAirSystemMonComplete2566764798::from(
                    second_air_system_mon_complete_raw_value,
                );
                let second_air_system_mon_enabled = SecondAirSystemMonEnabled2566764798::from(
                    second_air_system_mon_enabled_raw_value,
                );
                let oxygen_sensor_mon_complete =
                    OxygenSensorMonComplete2566764798::from(oxygen_sensor_mon_complete_raw_value);
                let oxygen_sensor_mon_enabled =
                    OxygenSensorMonEnabled2566764798::from(oxygen_sensor_mon_enabled_raw_value);
                let oxygen_sensor_heater_mon_complete =
                    OxygenSensorHeaterMonComplete2566764798::from(
                        oxygen_sensor_heater_mon_complete_raw_value,
                    );
                let oxygen_sensor_heater_mon_enabled = OxygenSensorHeaterMonEnabled2566764798::from(
                    oxygen_sensor_heater_mon_enabled_raw_value,
                );
                let heated_catalyst_mon_complete = HeatedCatalystMonComplete2566764798::from(
                    heated_catalyst_mon_complete_raw_value,
                );
                let heated_catalyst_mon_enabled =
                    HeatedCatalystMonEnabled2566764798::from(heated_catalyst_mon_enabled_raw_value);
                let evaporative_system_mon_complete = EvaporativeSystemMonComplete2566764798::from(
                    evaporative_system_mon_complete_raw_value,
                );
                let evaporative_system_mon_enabled = EvaporativeSystemMonEnabled2566764798::from(
                    evaporative_system_mon_enabled_raw_value,
                );
                let egr_system_monitoring_complete = EgrSystemMonitoringComplete2566764798::from(
                    egr_system_monitoring_complete_raw_value,
                );
                let egr_system_monitoring_enabled = EgrSystemMonitoringEnabled2566764798::from(
                    egr_system_monitoring_enabled_raw_value,
                );
                let cold_start_aid_system_mon_complete =
                    ColdStartAidSystemMonComplete2566764798::from(
                        cold_start_aid_system_mon_complete_raw_value,
                    );
                let cold_start_aid_system_mon_enabled =
                    ColdStartAidSystemMonEnabled2566764798::from(
                        cold_start_aid_system_mon_enabled_raw_value,
                    );
                let catalyst_mon_complete =
                    CatalystMonComplete2566764798::from(catalyst_mon_complete_raw_value);
                let catalyst_mon_enabled =
                    CatalystMonEnabled2566764798::from(catalyst_mon_enabled_raw_value);
                let ac_system_refrigerant_mon_complete =
                    AcSystemRefrigerantMonComplete2566764798::from(
                        ac_system_refrigerant_mon_complete_raw_value,
                    );
                let ac_system_refrigerant_mon_enabled =
                    AcSystemRefrigerantMonEnabled2566764798::from(
                        ac_system_refrigerant_mon_enabled_raw_value,
                    );
                let fuel_system_monitoring_complete = FuelSystemMonitoringComplete2566764798::from(
                    fuel_system_monitoring_complete_raw_value,
                );
                DecodedFrame::Dm26 {
                    misfire_monitoring_complete_raw_value,
                    misfire_monitoring_enabled_raw_value,
                    fuel_system_monitoring_enabled_raw_value,
                    comprehensive_compt_mon_complete_raw_value,
                    comprehensive_comp_mon_enabled_raw_value,
                    second_air_system_mon_complete_raw_value,
                    second_air_system_mon_enabled_raw_value,
                    oxygen_sensor_mon_complete_raw_value,
                    oxygen_sensor_mon_enabled_raw_value,
                    oxygen_sensor_heater_mon_complete_raw_value,
                    oxygen_sensor_heater_mon_enabled_raw_value,
                    heated_catalyst_mon_complete_raw_value,
                    heated_catalyst_mon_enabled_raw_value,
                    evaporative_system_mon_complete_raw_value,
                    evaporative_system_mon_enabled_raw_value,
                    egr_system_monitoring_complete_raw_value,
                    egr_system_monitoring_enabled_raw_value,
                    cold_start_aid_system_mon_complete_raw_value,
                    cold_start_aid_system_mon_enabled_raw_value,
                    catalyst_mon_complete_raw_value,
                    catalyst_mon_enabled_raw_value,
                    ac_system_refrigerant_mon_complete_raw_value,
                    ac_system_refrigerant_mon_enabled_raw_value,
                    fuel_system_monitoring_complete_raw_value,
                    num_of_warm_ups_since_dt_cs_cleared_raw_value,
                    time_since_engine_start_raw_value,
                    misfire_monitoring_complete,
                    misfire_monitoring_enabled,
                    fuel_system_monitoring_enabled,
                    comprehensive_compt_mon_complete,
                    comprehensive_comp_mon_enabled,
                    second_air_system_mon_complete,
                    second_air_system_mon_enabled,
                    oxygen_sensor_mon_complete,
                    oxygen_sensor_mon_enabled,
                    oxygen_sensor_heater_mon_complete,
                    oxygen_sensor_heater_mon_enabled,
                    heated_catalyst_mon_complete,
                    heated_catalyst_mon_enabled,
                    evaporative_system_mon_complete,
                    evaporative_system_mon_enabled,
                    egr_system_monitoring_complete,
                    egr_system_monitoring_enabled,
                    cold_start_aid_system_mon_complete,
                    cold_start_aid_system_mon_enabled,
                    catalyst_mon_complete,
                    catalyst_mon_enabled,
                    ac_system_refrigerant_mon_complete,
                    ac_system_refrigerant_mon_enabled,
                    fuel_system_monitoring_complete,
                }
            }
            2564095742u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let security_entity_length_high_raw_value: u8 = ((frame_payload >> 12) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let security_entity_type_raw_value: u8 = ((frame_payload >> 8) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let security_entity_length_raw_value: u8 = (frame_payload & 255) as u8;
                let security_entity_type =
                    SecurityEntityType2564095742::from(security_entity_type_raw_value);
                DecodedFrame::Dm18 {
                    security_entity_length_high_raw_value,
                    security_entity_type_raw_value,
                    security_entity_length_raw_value,
                    security_entity_type,
                }
            }
            2349137662u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let xbr_message_checksum_raw_value: u8 = ((frame_payload >> 60) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let xbr_message_counter_raw_value: u8 = ((frame_payload >> 56) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let xbr_ctrl_mode_raw_value: u8 = ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let xbr_priority_raw_value: u8 = ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let xbrebi_mode_raw_value: u8 = ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let extl_acceleration_demand_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.000488281 + -15.687;
                let xbr_ctrl_mode = XbrCtrlMode2349137662::from(xbr_ctrl_mode_raw_value);
                let xbr_priority = XbrPriority2349137662::from(xbr_priority_raw_value);
                let xbrebi_mode = XbrebiMode2349137662::from(xbrebi_mode_raw_value);
                DecodedFrame::Xbr {
                    xbr_message_checksum_raw_value,
                    xbr_message_counter_raw_value,
                    xbr_ctrl_mode_raw_value,
                    xbr_priority_raw_value,
                    xbrebi_mode_raw_value,
                    extl_acceleration_demand_raw_value,
                    xbr_ctrl_mode,
                    xbr_priority,
                    xbrebi_mode,
                }
            }
            2566848510u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let water_in_fuel_indicator_raw_value: u8 = (frame_payload & 3) as u8;
                let water_in_fuel_indicator =
                    WaterInFuelIndicator2566848510::from(water_in_fuel_indicator_raw_value);
                DecodedFrame::Wfi {
                    water_in_fuel_indicator_raw_value,
                    water_in_fuel_indicator,
                }
            }
            2566843134u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let cargo_weight_raw_value: f64 = ((frame_payload >> 40) & 65535) as f64 * 2.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_weight_raw_value: f64 = ((frame_payload >> 24) & 65535) as f64 * 2.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let axle_weight_raw_value: f64 = ((frame_payload >> 8) & 65535) as f64 * 0.5;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let axle_location_raw_value: u8 = (frame_payload & 255) as u8;
                DecodedFrame::Vw {
                    cargo_weight_raw_value,
                    trailer_weight_raw_value,
                    axle_weight_raw_value,
                    axle_location_raw_value,
                }
            }
            2566804222u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let net_battery_current_hi_res_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.05 + -1600.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let alt_current_hi_res_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.05 + -1600.0;
                DecodedFrame::Vep3 {
                    net_battery_current_hi_res_raw_value,
                    alt_current_hi_res_raw_value,
                }
            }
            2633928190u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let battery2_potential_raw_value: f64 = (frame_payload & 65535) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let ecu_power_output_supply_voltage3_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let ecu_power_output_supply_voltage2_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let ecu_power_output_supply_voltage1_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let battery_potential_power_input2_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.05;
                DecodedFrame::Vep2 {
                    battery2_potential_raw_value,
                    ecu_power_output_supply_voltage3_raw_value,
                    ecu_power_output_supply_voltage2_raw_value,
                    ecu_power_output_supply_voltage1_raw_value,
                    battery_potential_power_input2_raw_value,
                }
            }
            2566845438u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let longitude_raw_value: f64 =
                    ((frame_payload >> 32) & 4294967295) as f64 * 0.0000001 + -210.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let latitude_raw_value: f64 =
                    (frame_payload & 4294967295) as f64 * 0.0000001 + -210.0;
                DecodedFrame::Vp {
                    longitude_raw_value,
                    latitude_raw_value,
                }
            }
            2566843646u32 => DecodedFrame::Vi {},
            2566842366u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let total_power_takeoff_hours_raw_value: f64 =
                    ((frame_payload >> 32) & 4294967295) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let total_vehicle_hours_raw_value: f64 = (frame_payload & 4294967295) as f64 * 0.05;
                DecodedFrame::Vh {
                    total_power_takeoff_hours_raw_value,
                    total_vehicle_hours_raw_value,
                }
            }
            2566809854u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let winch_oil_press_switch_raw_value: u8 = ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let hyd_oil_level_raw_value: f64 = ((frame_payload >> 16) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let hyd_oil_filter_restriction_switch_raw_value: u8 =
                    ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let hyd_temp_raw_value: f64 = (frame_payload & 255) as f64 + -40.0;
                let winch_oil_press_switch =
                    WinchOilPressSwitch2566809854::from(winch_oil_press_switch_raw_value);
                let hyd_oil_filter_restriction_switch =
                    HydOilFilterRestrictionSwitch2566809854::from(
                        hyd_oil_filter_restriction_switch_raw_value,
                    );
                DecodedFrame::Vf {
                    winch_oil_press_switch_raw_value,
                    hyd_oil_level_raw_value,
                    hyd_oil_filter_restriction_switch_raw_value,
                    hyd_temp_raw_value,
                    winch_oil_press_switch,
                    hyd_oil_filter_restriction_switch,
                }
            }
            2566842622u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let altitude_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.125 + -2500.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let pitch_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.0078125 + -200.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let navigation_based_vehicle_speed_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.00390625;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let compass_bearing_raw_value: f64 = (frame_payload & 65535) as f64 * 0.0078125;
                DecodedFrame::Vds {
                    altitude_raw_value,
                    pitch_raw_value,
                    navigation_based_vehicle_speed_raw_value,
                    compass_bearing_raw_value,
                }
            }
            2566832638u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let high_resolution_trip_distance_raw_value: f64 =
                    ((frame_payload >> 32) & 4294967295) as f64 * 0.005;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let hgh_rslution_total_vehicle_distance_raw_value: f64 =
                    (frame_payload & 4294967295) as f64 * 0.005;
                DecodedFrame::Vdhr {
                    high_resolution_trip_distance_raw_value,
                    hgh_rslution_total_vehicle_distance_raw_value,
                }
            }
            2565868030u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let longitudinal_acceleration_raw_value: f64 =
                    ((frame_payload >> 56) & 255) as f64 * 0.1 + -12.5;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lateral_acceleration_raw_value: f64 =
                    ((frame_payload >> 40) & 65535) as f64 * 0.000488281 + -15.687;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let yaw_rate_raw_value: f64 =
                    ((frame_payload >> 24) & 65535) as f64 * 0.00012207 + -3.92;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let steer_wheel_angle_sensor_type_raw_value: u8 = ((frame_payload >> 22) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let steer_wheel_turn_counter_raw_value: f64 =
                    ((frame_payload >> 16) & 63) as f64 + -32.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let steer_wheel_angle_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.000976563 + -31.374;
                let steer_wheel_angle_sensor_type = SteerWheelAngleSensorType2565868030::from(
                    steer_wheel_angle_sensor_type_raw_value,
                );
                DecodedFrame::Vdc2 {
                    longitudinal_acceleration_raw_value,
                    lateral_acceleration_raw_value,
                    yaw_rate_raw_value,
                    steer_wheel_angle_sensor_type_raw_value,
                    steer_wheel_turn_counter_raw_value,
                    steer_wheel_angle_raw_value,
                    steer_wheel_angle_sensor_type,
                }
            }
            2566803454u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let yc_brake_ctrl_active_raw_value: u8 = ((frame_payload >> 14) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let yc_eng_ctrl_active_raw_value: u8 = ((frame_payload >> 12) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rop_brake_ctrl_active_raw_value: u8 = ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rop_eng_ctrl_active_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vdc_brake_light_rq_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vdc_fully_operational_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vdc_information_signal_raw_value: u8 = (frame_payload & 3) as u8;
                let yc_brake_ctrl_active =
                    YcBrakeCtrlActive2566803454::from(yc_brake_ctrl_active_raw_value);
                let yc_eng_ctrl_active =
                    YcEngCtrlActive2566803454::from(yc_eng_ctrl_active_raw_value);
                let rop_brake_ctrl_active =
                    RopBrakeCtrlActive2566803454::from(rop_brake_ctrl_active_raw_value);
                let rop_eng_ctrl_active =
                    RopEngCtrlActive2566803454::from(rop_eng_ctrl_active_raw_value);
                let vdc_brake_light_rq =
                    VdcBrakeLightRq2566803454::from(vdc_brake_light_rq_raw_value);
                let vdc_fully_operational =
                    VdcFullyOperational2566803454::from(vdc_fully_operational_raw_value);
                let vdc_information_signal =
                    VdcInformationSignal2566803454::from(vdc_information_signal_raw_value);
                DecodedFrame::Vdc1 {
                    yc_brake_ctrl_active_raw_value,
                    yc_eng_ctrl_active_raw_value,
                    rop_brake_ctrl_active_raw_value,
                    rop_eng_ctrl_active_raw_value,
                    vdc_brake_light_rq_raw_value,
                    vdc_fully_operational_raw_value,
                    vdc_information_signal_raw_value,
                    yc_brake_ctrl_active,
                    yc_eng_ctrl_active,
                    rop_brake_ctrl_active,
                    rop_eng_ctrl_active,
                    vdc_brake_light_rq,
                    vdc_fully_operational,
                    vdc_information_signal,
                }
            }
            2566840574u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let total_vehicle_distance_raw_value: f64 =
                    ((frame_payload >> 32) & 4294967295) as f64 * 0.125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trip_distance_raw_value: f64 = (frame_payload & 4294967295) as f64 * 0.125;
                DecodedFrame::Vd {
                    total_vehicle_distance_raw_value,
                    trip_distance_raw_value,
                }
            }
            2633938686u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trip_cruise_distance_raw_value: f64 =
                    ((frame_payload >> 16) & 4294967295) as f64 * 0.125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trip_max_vehicle_speed_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.00390625;
                DecodedFrame::Tvi {
                    trip_cruise_distance_raw_value,
                    trip_max_vehicle_speed_raw_value,
                }
            }
            2633937150u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trip_pto_time_raw_value: f64 =
                    ((frame_payload >> 32) & 4294967295) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trip_cruise_time_raw_value: f64 = (frame_payload & 4294967295) as f64 * 0.05;
                DecodedFrame::Tti2 {
                    trip_pto_time_raw_value,
                    trip_cruise_time_raw_value,
                }
            }
            2633938174u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trip_time_in_top_gear_raw_value: f64 =
                    ((frame_payload >> 32) & 4294967295) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trip_time_in_vsl_raw_value: f64 = (frame_payload & 4294967295) as f64 * 0.05;
                DecodedFrame::Tti1 {
                    trip_time_in_top_gear_raw_value,
                    trip_time_in_vsl_raw_value,
                }
            }
            2633938430u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trip_sudden_decelerations_raw_value: u16 =
                    ((frame_payload >> 48) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trp_nmber_of_idle_shutdown_overrides_raw_value: u16 =
                    ((frame_payload >> 32) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trip_number_of_idle_shutdowns_raw_value: u16 =
                    ((frame_payload >> 16) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trip_number_of_hot_shutdowns_raw_value: u16 = (frame_payload & 65535) as u16;
                DecodedFrame::Tsi {
                    trip_sudden_decelerations_raw_value,
                    trp_nmber_of_idle_shutdown_overrides_raw_value,
                    trip_number_of_idle_shutdowns_raw_value,
                    trip_number_of_hot_shutdowns_raw_value,
                }
            }
            2348875518u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let control_purpose_raw_value: u8 = ((frame_payload >> 35) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let transmission_rate_raw_value: u8 = ((frame_payload >> 32) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_rqed_torque_torque_limit_raw_value: f64 =
                    ((frame_payload >> 24) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_rqed_speed_speed_limit_raw_value: f64 =
                    ((frame_payload >> 8) & 65535) as f64 * 0.125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let override_ctrl_mode_priority_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_rqed_speed_ctrl_conditions_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_override_ctrl_mode_raw_value: u8 = (frame_payload & 3) as u8;
                let control_purpose = ControlPurpose2348875518::from(control_purpose_raw_value);
                let transmission_rate =
                    TransmissionRate2348875518::from(transmission_rate_raw_value);
                let override_ctrl_mode_priority =
                    OverrideCtrlModePriority2348875518::from(override_ctrl_mode_priority_raw_value);
                let eng_rqed_speed_ctrl_conditions = EngRqedSpeedCtrlConditions2348875518::from(
                    eng_rqed_speed_ctrl_conditions_raw_value,
                );
                let eng_override_ctrl_mode =
                    EngOverrideCtrlMode2348875518::from(eng_override_ctrl_mode_raw_value);
                DecodedFrame::Tsc1 {
                    control_purpose_raw_value,
                    transmission_rate_raw_value,
                    eng_rqed_torque_torque_limit_raw_value,
                    eng_rqed_speed_speed_limit_raw_value,
                    override_ctrl_mode_priority_raw_value,
                    eng_rqed_speed_ctrl_conditions_raw_value,
                    eng_override_ctrl_mode_raw_value,
                    control_purpose,
                    transmission_rate,
                    override_ctrl_mode_priority,
                    eng_rqed_speed_ctrl_conditions,
                    eng_override_ctrl_mode,
                }
            }
            2566766846u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let transit_run_status_raw_value: u8 = ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vehicle_use_status_raw_value: u8 = ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let silent_alarm_status_raw_value: u8 = ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let patron_count_raw_value: u8 = ((frame_payload >> 8) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let type_of_passenger_count_raw_value: u8 = (frame_payload & 255) as u8;
                let transit_run_status =
                    TransitRunStatus2566766846::from(transit_run_status_raw_value);
                let vehicle_use_status =
                    VehicleUseStatus2566766846::from(vehicle_use_status_raw_value);
                let silent_alarm_status =
                    SilentAlarmStatus2566766846::from(silent_alarm_status_raw_value);
                let type_of_passenger_count =
                    TypeOfPassengerCount2566766846::from(type_of_passenger_count_raw_value);
                DecodedFrame::Tr7 {
                    transit_run_status_raw_value,
                    vehicle_use_status_raw_value,
                    silent_alarm_status_raw_value,
                    patron_count_raw_value,
                    type_of_passenger_count_raw_value,
                    transit_run_status,
                    vehicle_use_status,
                    silent_alarm_status,
                    type_of_passenger_count,
                }
            }
            2566765310u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let farebox_alarm_identifier_raw_value: u8 = ((frame_payload >> 8) & 127) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let farebox_emergency_status_raw_value: u8 = (frame_payload & 3) as u8;
                let farebox_alarm_identifier =
                    FareboxAlarmIdentifier2566765310::from(farebox_alarm_identifier_raw_value);
                let farebox_emergency_status =
                    FareboxEmergencyStatus2566765310::from(farebox_emergency_status_raw_value);
                DecodedFrame::Tr6 {
                    farebox_alarm_identifier_raw_value,
                    farebox_emergency_status_raw_value,
                    farebox_alarm_identifier,
                    farebox_emergency_status,
                }
            }
            2566765566u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let transfer_sold_raw_value: u8 = ((frame_payload >> 56) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let route_number_raw_value: u16 = ((frame_payload >> 40) & 4095) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let transfer_type_raw_value: u8 = ((frame_payload >> 35) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let type_of_service_raw_value: u8 = ((frame_payload >> 32) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let initial_fare_agency_raw_value: u8 = ((frame_payload >> 24) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let pass_category_raw_value: u8 = ((frame_payload >> 20) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let fare_validity_raw_value: u8 = ((frame_payload >> 16) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let payment_details_raw_value: u8 = ((frame_payload >> 12) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let type_of_fare_raw_value: u8 = ((frame_payload >> 8) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let passenger_type_raw_value: u8 = ((frame_payload >> 4) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let transaction_type_raw_value: u8 = (frame_payload & 15) as u8;
                let transfer_type = TransferType2566765566::from(transfer_type_raw_value);
                let type_of_service = TypeOfService2566765566::from(type_of_service_raw_value);
                let payment_details = PaymentDetails2566765566::from(payment_details_raw_value);
                let type_of_fare = TypeOfFare2566765566::from(type_of_fare_raw_value);
                let transaction_type = TransactionType2566765566::from(transaction_type_raw_value);
                DecodedFrame::Tr5 {
                    transfer_sold_raw_value,
                    route_number_raw_value,
                    transfer_type_raw_value,
                    type_of_service_raw_value,
                    initial_fare_agency_raw_value,
                    pass_category_raw_value,
                    fare_validity_raw_value,
                    payment_details_raw_value,
                    type_of_fare_raw_value,
                    passenger_type_raw_value,
                    transaction_type_raw_value,
                    transfer_type,
                    type_of_service,
                    payment_details,
                    type_of_fare,
                    transaction_type,
                }
            }
            2566765822u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let assigned_route_raw_value: u16 = ((frame_payload >> 56) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let pattern_number_raw_value: u16 = ((frame_payload >> 40) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trip_number_raw_value: u16 = ((frame_payload >> 24) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let fare_presets_raw_value: u8 = ((frame_payload >> 16) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trip_direction_raw_value: u8 = ((frame_payload >> 8) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trip_status_raw_value: u8 = ((frame_payload >> 2) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let farebox_service_status_raw_value: u8 = (frame_payload & 3) as u8;
                let trip_direction = TripDirection2566765822::from(trip_direction_raw_value);
                let trip_status = TripStatus2566765822::from(trip_status_raw_value);
                let farebox_service_status =
                    FareboxServiceStatus2566765822::from(farebox_service_status_raw_value);
                DecodedFrame::Tr4 {
                    assigned_route_raw_value,
                    pattern_number_raw_value,
                    trip_number_raw_value,
                    fare_presets_raw_value,
                    trip_direction_raw_value,
                    trip_status_raw_value,
                    farebox_service_status_raw_value,
                    trip_direction,
                    trip_status,
                    farebox_service_status,
                }
            }
            2566766078u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vehicle_id_raw_value: u16 = ((frame_payload >> 16) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let strobe_activation_ctrl_status_raw_value: u8 = ((frame_payload >> 14) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let transit_door_enable_raw_value: u8 = ((frame_payload >> 12) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let priority_of_resp_sent_by_emitter_raw_value: u8 =
                    ((frame_payload >> 8) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let intersection_preemption_rq_resp_raw_value: u8 =
                    ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let transit_route_id_usage_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let range_code_enable_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let strobe_activation_ctrl_status = StrobeActivationCtrlStatus2566766078::from(
                    strobe_activation_ctrl_status_raw_value,
                );
                let transit_door_enable =
                    TransitDoorEnable2566766078::from(transit_door_enable_raw_value);
                let priority_of_resp_sent_by_emitter = PriorityOfRespSentByEmitter2566766078::from(
                    priority_of_resp_sent_by_emitter_raw_value,
                );
                let intersection_preemption_rq_resp = IntersectionPreemptionRqResp2566766078::from(
                    intersection_preemption_rq_resp_raw_value,
                );
                let transit_route_id_usage =
                    TransitRouteIdUsage2566766078::from(transit_route_id_usage_raw_value);
                let range_code_enable =
                    RangeCodeEnable2566766078::from(range_code_enable_raw_value);
                DecodedFrame::Tr3 {
                    vehicle_id_raw_value,
                    strobe_activation_ctrl_status_raw_value,
                    transit_door_enable_raw_value,
                    priority_of_resp_sent_by_emitter_raw_value,
                    intersection_preemption_rq_resp_raw_value,
                    transit_route_id_usage_raw_value,
                    range_code_enable_raw_value,
                    strobe_activation_ctrl_status,
                    transit_door_enable,
                    priority_of_resp_sent_by_emitter,
                    intersection_preemption_rq_resp,
                    transit_route_id_usage,
                    range_code_enable,
                }
            }
            2566766590u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let nmbr_of_byts_in_mlpst_identification_raw_value: u8 =
                    (frame_payload & 255) as u8;
                DecodedFrame::Tr2 {
                    nmbr_of_byts_in_mlpst_identification_raw_value,
                }
            }
            2566766334u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let agency_raw_value: u8 = (frame_payload & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let nmbr_of_byts_in_trnst_assgnd_blck_idntt_raw_value: u8 =
                    ((frame_payload >> 24) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let nmbr_of_byts_in_trnst_assgnd_rn_idntty_raw_value: u8 =
                    ((frame_payload >> 16) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let nmbr_of_byts_in_trnst_assgnd_rt_idntty_raw_value: u8 =
                    ((frame_payload >> 8) & 255) as u8;
                DecodedFrame::Tr1 {
                    agency_raw_value,
                    nmbr_of_byts_in_trnst_assgnd_blck_idntt_raw_value,
                    nmbr_of_byts_in_trnst_assgnd_rn_idntty_raw_value,
                    nmbr_of_byts_in_trnst_assgnd_rt_idntty_raw_value,
                }
            }
            2561605374u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let reference_tire_press_setting_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 * 8.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tire_location_raw_value: u8 = (frame_payload & 255) as u8;
                DecodedFrame::Tprs {
                    reference_tire_press_setting_raw_value,
                    tire_location_raw_value,
                }
            }
            2566765054u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let reference_tire_press_raw_value: f64 = ((frame_payload >> 8) & 255) as f64 * 8.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tire_location_raw_value: u8 = (frame_payload & 255) as u8;
                DecodedFrame::Tpri {
                    reference_tire_press_raw_value,
                    tire_location_raw_value,
                }
            }
            2633923326u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let steer_channel_tire_press_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.5;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let drive_channel_tire_press_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.5;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_tag_push_channel_tire_press_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.5;
                DecodedFrame::Tp3 {
                    steer_channel_tire_press_raw_value,
                    drive_channel_tire_press_raw_value,
                    trailer_tag_push_channel_tire_press_raw_value,
                }
            }
            2633923070u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let steer_channel_tire_press_target_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.5;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let drive_channel_tire_press_target_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.5;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trlr_tg_psh_channel_tire_press_target_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.5;
                DecodedFrame::Tp2 {
                    steer_channel_tire_press_target_raw_value,
                    drive_channel_tire_press_target_raw_value,
                    trlr_tg_psh_channel_tire_press_target_raw_value,
                }
            }
            2633922814u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let pcu_supply_solenoid_status_raw_value: u8 = ((frame_payload >> 36) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let pcu_ctrl_solenoid_status_raw_value: u8 = ((frame_payload >> 34) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let pcu_deflate_solenoid_status_raw_value: u8 = ((frame_payload >> 32) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tire_press_supply_switch_status_raw_value: u8 =
                    ((frame_payload >> 28) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let pcu_steer_solenoid_status_raw_value: u8 = ((frame_payload >> 26) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let pcu_drive_solenoid_status_raw_value: u8 = ((frame_payload >> 24) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let drive_channel_mode_raw_value: u8 = ((frame_payload >> 20) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_tag_channel_mode_raw_value: u8 = ((frame_payload >> 16) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let steer_channel_mode_raw_value: u8 = ((frame_payload >> 8) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tire_press_check_interval_raw_value: u8 = (frame_payload & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let pcu_trailer_tag_push_solenoid_status_raw_value: u8 =
                    ((frame_payload >> 38) & 3) as u8;
                let pcu_supply_solenoid_status =
                    PcuSupplySolenoidStatus2633922814::from(pcu_supply_solenoid_status_raw_value);
                let pcu_ctrl_solenoid_status =
                    PcuCtrlSolenoidStatus2633922814::from(pcu_ctrl_solenoid_status_raw_value);
                let pcu_deflate_solenoid_status =
                    PcuDeflateSolenoidStatus2633922814::from(pcu_deflate_solenoid_status_raw_value);
                let tire_press_supply_switch_status = TirePressSupplySwitchStatus2633922814::from(
                    tire_press_supply_switch_status_raw_value,
                );
                let pcu_steer_solenoid_status =
                    PcuSteerSolenoidStatus2633922814::from(pcu_steer_solenoid_status_raw_value);
                let pcu_drive_solenoid_status =
                    PcuDriveSolenoidStatus2633922814::from(pcu_drive_solenoid_status_raw_value);
                let drive_channel_mode =
                    DriveChannelMode2633922814::from(drive_channel_mode_raw_value);
                let trailer_tag_channel_mode =
                    TrailerTagChannelMode2633922814::from(trailer_tag_channel_mode_raw_value);
                let steer_channel_mode =
                    SteerChannelMode2633922814::from(steer_channel_mode_raw_value);
                let pcu_trailer_tag_push_solenoid_status =
                    PcuTrailerTagPushSolenoidStatus2633922814::from(
                        pcu_trailer_tag_push_solenoid_status_raw_value,
                    );
                DecodedFrame::Tp1 {
                    pcu_supply_solenoid_status_raw_value,
                    pcu_ctrl_solenoid_status_raw_value,
                    pcu_deflate_solenoid_status_raw_value,
                    tire_press_supply_switch_status_raw_value,
                    pcu_steer_solenoid_status_raw_value,
                    pcu_drive_solenoid_status_raw_value,
                    drive_channel_mode_raw_value,
                    trailer_tag_channel_mode_raw_value,
                    steer_channel_mode_raw_value,
                    tire_press_check_interval_raw_value,
                    pcu_trailer_tag_push_solenoid_status_raw_value,
                    pcu_supply_solenoid_status,
                    pcu_ctrl_solenoid_status,
                    pcu_deflate_solenoid_status,
                    tire_press_supply_switch_status,
                    pcu_steer_solenoid_status,
                    pcu_drive_solenoid_status,
                    drive_channel_mode,
                    trailer_tag_channel_mode,
                    steer_channel_mode,
                    pcu_trailer_tag_push_solenoid_status,
                }
            }
            2566845694u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tire_press_threshold_detection_raw_value: u8 =
                    ((frame_payload >> 61) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tire_air_leakage_rate_raw_value: f64 =
                    ((frame_payload >> 40) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let cti_wheel_end_electrical_fault_raw_value: u8 =
                    ((frame_payload >> 36) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let cti_tire_status_raw_value: u8 = ((frame_payload >> 34) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let cti_wheel_sensor_status_raw_value: u8 = ((frame_payload >> 32) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tire_temp_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tire_press_raw_value: f64 = ((frame_payload >> 8) & 255) as f64 * 4.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tire_location_raw_value: u8 = (frame_payload & 255) as u8;
                let tire_press_threshold_detection = TirePressThresholdDetection2566845694::from(
                    tire_press_threshold_detection_raw_value,
                );
                let cti_wheel_end_electrical_fault = CtiWheelEndElectricalFault2566845694::from(
                    cti_wheel_end_electrical_fault_raw_value,
                );
                let cti_tire_status = CtiTireStatus2566845694::from(cti_tire_status_raw_value);
                let cti_wheel_sensor_status =
                    CtiWheelSensorStatus2566845694::from(cti_wheel_sensor_status_raw_value);
                DecodedFrame::Tire {
                    tire_press_threshold_detection_raw_value,
                    tire_air_leakage_rate_raw_value,
                    cti_wheel_end_electrical_fault_raw_value,
                    cti_tire_status_raw_value,
                    cti_wheel_sensor_status_raw_value,
                    tire_temp_raw_value,
                    tire_press_raw_value,
                    tire_location_raw_value,
                    tire_press_threshold_detection,
                    cti_wheel_end_electrical_fault,
                    cti_tire_status,
                    cti_wheel_sensor_status,
                }
            }
            2566805246u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let catalyst_tank_temp_raw_value: f64 = ((frame_payload >> 8) & 255) as f64 + -40.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let catalyst_tank_level_raw_value: f64 = (frame_payload & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let catalyst_tank_level_preliminary_fmi_raw_value: u8 =
                    ((frame_payload >> 32) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let catalyst_tank_level2_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.1;
                DecodedFrame::Ti1 {
                    catalyst_tank_temp_raw_value,
                    catalyst_tank_level_raw_value,
                    catalyst_tank_level_preliminary_fmi_raw_value,
                    catalyst_tank_level2_raw_value,
                }
            }
            2633939966u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trip_fan_on_time_raw_value: f64 = (frame_payload & 4294967295) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trip_fan_on_time_due_to_eng_system_raw_value: f64 =
                    ((frame_payload >> 32) & 4294967295) as f64 * 0.05;
                DecodedFrame::Tfi {
                    trip_fan_on_time_raw_value,
                    trip_fan_on_time_due_to_eng_system_raw_value,
                }
            }
            2633939710u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trip_gear_down_distance_raw_value: f64 =
                    ((frame_payload >> 32) & 4294967295) as f64 * 0.125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trip_distance_on_vsl_raw_value: f64 =
                    (frame_payload & 4294967295) as f64 * 0.125;
                DecodedFrame::Tdi {
                    trip_gear_down_distance_raw_value,
                    trip_distance_on_vsl_raw_value,
                }
            }
            2564161278u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let adjust_local_hour_offset_raw_value: f64 =
                    ((frame_payload >> 56) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let adjust_local_minute_offset_raw_value: f64 =
                    ((frame_payload >> 48) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let adjust_year_raw_value: f64 = ((frame_payload >> 40) & 255) as f64 + 1985.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let adjust_day_raw_value: f64 = ((frame_payload >> 32) & 255) as f64 * 0.25;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let adjust_month_raw_value: u8 = ((frame_payload >> 24) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let adjust_hours_raw_value: u8 = ((frame_payload >> 16) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let adjust_minutes_raw_value: u8 = ((frame_payload >> 8) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let adjust_seconds_raw_value: f64 = (frame_payload & 255) as f64 * 0.25;
                DecodedFrame::Tda {
                    adjust_local_hour_offset_raw_value,
                    adjust_local_minute_offset_raw_value,
                    adjust_year_raw_value,
                    adjust_day_raw_value,
                    adjust_month_raw_value,
                    adjust_hours_raw_value,
                    adjust_minutes_raw_value,
                    adjust_seconds_raw_value,
                }
            }
            2566842110u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let local_hour_offset_raw_value: f64 =
                    ((frame_payload >> 56) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let local_minute_offset_raw_value: f64 =
                    ((frame_payload >> 48) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let year_raw_value: f64 = ((frame_payload >> 40) & 255) as f64 + 1985.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let day_raw_value: f64 = ((frame_payload >> 32) & 255) as f64 * 0.25;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let month_raw_value: u8 = ((frame_payload >> 24) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let hours_raw_value: u8 = ((frame_payload >> 16) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let minutes_raw_value: u8 = ((frame_payload >> 8) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let seconds_raw_value: f64 = (frame_payload & 255) as f64 * 0.25;
                DecodedFrame::Td {
                    local_hour_offset_raw_value,
                    local_minute_offset_raw_value,
                    year_raw_value,
                    day_raw_value,
                    month_raw_value,
                    hours_raw_value,
                    minutes_raw_value,
                    seconds_raw_value,
                }
            }
            2566821630u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_trb_wstgt_actuator_ctrl_air_press_raw_value: f64 =
                    ((frame_payload >> 32) & 255) as f64 * 4.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo4_wastegate_drive_raw_value: f64 =
                    ((frame_payload >> 24) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo3_wastegate_drive_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo2_wastegate_drive_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo1_wastegate_drive_raw_value: f64 = (frame_payload & 255) as f64 * 0.4;
                DecodedFrame::Tcw {
                    eng_trb_wstgt_actuator_ctrl_air_press_raw_value,
                    eng_turbo4_wastegate_drive_raw_value,
                    eng_turbo3_wastegate_drive_raw_value,
                    eng_turbo2_wastegate_drive_raw_value,
                    eng_turbo1_wastegate_drive_raw_value,
                }
            }
            2365484286u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tachograph_vehicle_speed_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.00390625;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tachograph_output_shaft_speed_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let direction_indicator_raw_value: u8 = ((frame_payload >> 30) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tachograph_performance_raw_value: u8 = ((frame_payload >> 28) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let handling_information_raw_value: u8 = ((frame_payload >> 26) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let system_event_raw_value: u8 = ((frame_payload >> 24) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let driver_card_driver2_raw_value: u8 = ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let driver2_time_related_states_raw_value: u8 = ((frame_payload >> 16) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let overspeed_raw_value: u8 = ((frame_payload >> 14) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let driver_card_driver1_raw_value: u8 = ((frame_payload >> 12) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let driver1_time_related_states_raw_value: u8 = ((frame_payload >> 8) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let drive_recognize_raw_value: u8 = ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let driver2_working_state_raw_value: u8 = ((frame_payload >> 3) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let driver1_working_state_raw_value: u8 = (frame_payload & 7) as u8;
                let direction_indicator =
                    DirectionIndicator2365484286::from(direction_indicator_raw_value);
                let tachograph_performance =
                    TachographPerformance2365484286::from(tachograph_performance_raw_value);
                let handling_information =
                    HandlingInformation2365484286::from(handling_information_raw_value);
                let system_event = SystemEvent2365484286::from(system_event_raw_value);
                let driver_card_driver2 =
                    DriverCardDriver22365484286::from(driver_card_driver2_raw_value);
                let driver2_time_related_states =
                    Driver2TimeRelatedStates2365484286::from(driver2_time_related_states_raw_value);
                let overspeed = Overspeed2365484286::from(overspeed_raw_value);
                let driver_card_driver1 =
                    DriverCardDriver12365484286::from(driver_card_driver1_raw_value);
                let driver1_time_related_states =
                    Driver1TimeRelatedStates2365484286::from(driver1_time_related_states_raw_value);
                let drive_recognize = DriveRecognize2365484286::from(drive_recognize_raw_value);
                let driver2_working_state =
                    Driver2WorkingState2365484286::from(driver2_working_state_raw_value);
                let driver1_working_state =
                    Driver1WorkingState2365484286::from(driver1_working_state_raw_value);
                DecodedFrame::Tco1 {
                    tachograph_vehicle_speed_raw_value,
                    tachograph_output_shaft_speed_raw_value,
                    direction_indicator_raw_value,
                    tachograph_performance_raw_value,
                    handling_information_raw_value,
                    system_event_raw_value,
                    driver_card_driver2_raw_value,
                    driver2_time_related_states_raw_value,
                    overspeed_raw_value,
                    driver_card_driver1_raw_value,
                    driver1_time_related_states_raw_value,
                    drive_recognize_raw_value,
                    driver2_working_state_raw_value,
                    driver1_working_state_raw_value,
                    direction_indicator,
                    tachograph_performance,
                    handling_information,
                    system_event,
                    driver_card_driver2,
                    driver2_time_related_states,
                    overspeed,
                    driver_card_driver1,
                    driver1_time_related_states,
                    drive_recognize,
                    driver2_working_state,
                    driver1_working_state,
                }
            }
            2566771710u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo4_compressor_outlet_temp_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo3_compressor_outlet_temp_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo2_compressor_outlet_temp_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo1_compressor_outlet_temp_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.03125 + -273.0;
                DecodedFrame::Tci6 {
                    eng_turbo4_compressor_outlet_temp_raw_value,
                    eng_turbo3_compressor_outlet_temp_raw_value,
                    eng_turbo2_compressor_outlet_temp_raw_value,
                    eng_turbo1_compressor_outlet_temp_raw_value,
                }
            }
            2566821886u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo4_turbine_outlet_temp_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo3_turbine_outlet_temp_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo2_turbine_outlet_temp_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo1_turbine_outlet_temp_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.03125 + -273.0;
                DecodedFrame::Tci5 {
                    eng_turbo4_turbine_outlet_temp_raw_value,
                    eng_turbo3_turbine_outlet_temp_raw_value,
                    eng_turbo2_turbine_outlet_temp_raw_value,
                    eng_turbo1_turbine_outlet_temp_raw_value,
                }
            }
            2566822142u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo4_turbine_inlet_temp_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo3_turbine_inlet_temp_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo2_turbine_inlet_temp_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo1_turbine_inlet_temp_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.03125 + -273.0;
                DecodedFrame::Tci4 {
                    eng_turbo4_turbine_inlet_temp_raw_value,
                    eng_turbo3_turbine_inlet_temp_raw_value,
                    eng_turbo2_turbine_inlet_temp_raw_value,
                    eng_turbo1_turbine_inlet_temp_raw_value,
                }
            }
            2566822398u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo4_compressor_inlet_press_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.0078125 + -250.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo3_compressor_inlet_press_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.0078125 + -250.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo2_compressor_inlet_press_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.0078125 + -250.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo1_compressor_inlet_press_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.0078125 + -250.0;
                DecodedFrame::Tci3 {
                    eng_turbo4_compressor_inlet_press_raw_value,
                    eng_turbo3_compressor_inlet_press_raw_value,
                    eng_turbo2_compressor_inlet_press_raw_value,
                    eng_turbo1_compressor_inlet_press_raw_value,
                }
            }
            2566822654u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo4_compressor_inlet_temp_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo3_compressor_inlet_temp_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo2_compressor_inlet_temp_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo1_compressor_inlet_temp_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.03125 + -273.0;
                DecodedFrame::Tci2 {
                    eng_turbo4_compressor_inlet_temp_raw_value,
                    eng_turbo3_compressor_inlet_temp_raw_value,
                    eng_turbo2_compressor_inlet_temp_raw_value,
                    eng_turbo1_compressor_inlet_temp_raw_value,
                }
            }
            2633931774u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo4_speed_raw_value: f64 = ((frame_payload >> 40) & 65535) as f64 * 4.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo3_speed_raw_value: f64 = ((frame_payload >> 24) & 65535) as f64 * 4.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo2_speed_raw_value: f64 = ((frame_payload >> 8) & 65535) as f64 * 4.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo_lube_oil_press2_raw_value: f64 = (frame_payload & 255) as f64 * 4.0;
                DecodedFrame::Tci1 {
                    eng_turbo4_speed_raw_value,
                    eng_turbo3_speed_raw_value,
                    eng_turbo2_speed_raw_value,
                    eng_turbo_lube_oil_press2_raw_value,
                }
            }
            2566802430u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_torque_limit_raw_value: u16 = (frame_payload & 65535) as u16;
                DecodedFrame::Tcfg2 {
                    trans_torque_limit_raw_value,
                }
            }
            2566841086u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_gear_ratio_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.001;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let number_of_forward_gear_ratios_raw_value: u8 =
                    ((frame_payload >> 8) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let number_of_reverse_gear_ratios_raw_value: u8 = (frame_payload & 255) as u8;
                DecodedFrame::Tcfg {
                    trans_gear_ratio_raw_value,
                    number_of_forward_gear_ratios_raw_value,
                    number_of_reverse_gear_ratios_raw_value,
                }
            }
            2348941054u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trns_shft_slctor_display_mode_switch_raw_value: u8 =
                    ((frame_payload >> 54) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_mode4_raw_value: u8 = ((frame_payload >> 46) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_mode3_raw_value: u8 = ((frame_payload >> 44) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_mode2_raw_value: u8 = ((frame_payload >> 42) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_mode1_raw_value: u8 = ((frame_payload >> 40) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let disengage_diff_lock_rq_central_rear_raw_value: u8 =
                    ((frame_payload >> 36) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let disengage_diff_lock_rq_central_front_raw_value: u8 =
                    ((frame_payload >> 34) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let disengage_diff_lock_rq_central_raw_value: u8 =
                    ((frame_payload >> 32) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let disengage_diff_lock_rq_rear_axle2_raw_value: u8 =
                    ((frame_payload >> 30) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let disengage_diff_lock_rq_rear_axle1_raw_value: u8 =
                    ((frame_payload >> 28) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let disengage_diff_lock_rq_front_axle2_raw_value: u8 =
                    ((frame_payload >> 26) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let disengage_diff_lock_rq_front_axle1_raw_value: u8 =
                    ((frame_payload >> 24) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_rqed_gear_raw_value: f64 = ((frame_payload >> 16) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rqed_percent_clutch_slip_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let disengage_driveline_rq_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let torque_converter_lockup_disable_rq_raw_value: u8 =
                    ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_gear_shift_inhibit_rq_raw_value: u8 = (frame_payload & 3) as u8;
                let trns_shft_slctor_display_mode_switch =
                    TrnsShftSlctorDisplayModeSwitch2348941054::from(
                        trns_shft_slctor_display_mode_switch_raw_value,
                    );
                let trans_mode4 = TransMode42348941054::from(trans_mode4_raw_value);
                let trans_mode3 = TransMode32348941054::from(trans_mode3_raw_value);
                let trans_mode2 = TransMode22348941054::from(trans_mode2_raw_value);
                let trans_mode1 = TransMode12348941054::from(trans_mode1_raw_value);
                let disengage_diff_lock_rq_central_rear =
                    DisengageDiffLockRqCentralRear2348941054::from(
                        disengage_diff_lock_rq_central_rear_raw_value,
                    );
                let disengage_diff_lock_rq_central_front =
                    DisengageDiffLockRqCentralFront2348941054::from(
                        disengage_diff_lock_rq_central_front_raw_value,
                    );
                let disengage_diff_lock_rq_central = DisengageDiffLockRqCentral2348941054::from(
                    disengage_diff_lock_rq_central_raw_value,
                );
                let disengage_diff_lock_rq_rear_axle2 =
                    DisengageDiffLockRqRearAxle22348941054::from(
                        disengage_diff_lock_rq_rear_axle2_raw_value,
                    );
                let disengage_diff_lock_rq_rear_axle1 =
                    DisengageDiffLockRqRearAxle12348941054::from(
                        disengage_diff_lock_rq_rear_axle1_raw_value,
                    );
                let disengage_diff_lock_rq_front_axle2 =
                    DisengageDiffLockRqFrontAxle22348941054::from(
                        disengage_diff_lock_rq_front_axle2_raw_value,
                    );
                let disengage_diff_lock_rq_front_axle1 =
                    DisengageDiffLockRqFrontAxle12348941054::from(
                        disengage_diff_lock_rq_front_axle1_raw_value,
                    );
                let trans_rqed_gear = TransRqedGear2348941054::from(trans_rqed_gear_raw_value);
                let disengage_driveline_rq =
                    DisengageDrivelineRq2348941054::from(disengage_driveline_rq_raw_value);
                let torque_converter_lockup_disable_rq =
                    TorqueConverterLockupDisableRq2348941054::from(
                        torque_converter_lockup_disable_rq_raw_value,
                    );
                let trans_gear_shift_inhibit_rq =
                    TransGearShiftInhibitRq2348941054::from(trans_gear_shift_inhibit_rq_raw_value);
                DecodedFrame::Tc1 {
                    trns_shft_slctor_display_mode_switch_raw_value,
                    trans_mode4_raw_value,
                    trans_mode3_raw_value,
                    trans_mode2_raw_value,
                    trans_mode1_raw_value,
                    disengage_diff_lock_rq_central_rear_raw_value,
                    disengage_diff_lock_rq_central_front_raw_value,
                    disengage_diff_lock_rq_central_raw_value,
                    disengage_diff_lock_rq_rear_axle2_raw_value,
                    disengage_diff_lock_rq_rear_axle1_raw_value,
                    disengage_diff_lock_rq_front_axle2_raw_value,
                    disengage_diff_lock_rq_front_axle1_raw_value,
                    trans_rqed_gear_raw_value,
                    rqed_percent_clutch_slip_raw_value,
                    disengage_driveline_rq_raw_value,
                    torque_converter_lockup_disable_rq_raw_value,
                    trans_gear_shift_inhibit_rq_raw_value,
                    trns_shft_slctor_display_mode_switch,
                    trans_mode4,
                    trans_mode3,
                    trans_mode2,
                    trans_mode1,
                    disengage_diff_lock_rq_central_rear,
                    disengage_diff_lock_rq_central_front,
                    disengage_diff_lock_rq_central,
                    disengage_diff_lock_rq_rear_axle2,
                    disengage_diff_lock_rq_rear_axle1,
                    disengage_diff_lock_rq_front_axle2,
                    disengage_diff_lock_rq_front_axle1,
                    trans_rqed_gear,
                    disengage_driveline_rq,
                    torque_converter_lockup_disable_rq,
                    trans_gear_shift_inhibit_rq,
                }
            }
            2566839806u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo_oil_level_switch_raw_value: u8 = ((frame_payload >> 30) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo1_speed_raw_value: f64 = ((frame_payload >> 8) & 65535) as f64 * 4.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo_lube_oil_press1_raw_value: f64 = (frame_payload & 255) as f64 * 4.0;
                DecodedFrame::Tc {
                    eng_turbo_oil_level_switch_raw_value,
                    eng_turbo1_speed_raw_value,
                    eng_turbo_lube_oil_press1_raw_value,
                }
            }
            2633911806u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_total_average_fuel_economy_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.00195313;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_total_average_fuel_rate_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.05;
                DecodedFrame::Tavg {
                    eng_total_average_fuel_economy_raw_value,
                    eng_total_average_fuel_rate_raw_value,
                }
            }
            2566775550u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let air_suspension_supply_press_rq_raw_value: f64 =
                    ((frame_payload >> 40) & 255) as f64 * 8.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_equipment_supply_press_rq_raw_value: f64 =
                    ((frame_payload >> 32) & 255) as f64 * 8.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let service_brake_air_press_rq_circuit2_raw_value: f64 =
                    ((frame_payload >> 24) & 255) as f64 * 8.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let service_brake_air_press_rq_circuit1_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 * 8.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let parking_and_or_trailer_air_press_rq_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 * 8.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let pneumatic_supply_press_rq_raw_value: f64 = (frame_payload & 255) as f64 * 8.0;
                DecodedFrame::Spr {
                    air_suspension_supply_press_rq_raw_value,
                    aux_equipment_supply_press_rq_raw_value,
                    service_brake_air_press_rq_circuit2_raw_value,
                    service_brake_air_press_rq_circuit1_raw_value,
                    parking_and_or_trailer_air_press_rq_raw_value,
                    pneumatic_supply_press_rq_raw_value,
                }
            }
            2566819838u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_extl_shutdown_air_supply_press_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.5;
                DecodedFrame::Sp2 {
                    eng_extl_shutdown_air_supply_press_raw_value,
                }
            }
            2566839038u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let nmbr_of_sftwr_identification_fields_raw_value: u8 = (frame_payload & 255) as u8;
                DecodedFrame::Soft {
                    nmbr_of_sftwr_identification_fields_raw_value,
                }
            }
            2566841598u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_overspeed_test_raw_value: u8 = ((frame_payload >> 54) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_air_shutoff_cmd_status_raw_value: u8 = ((frame_payload >> 52) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_alarm_output_cmd_status_raw_value: u8 = ((frame_payload >> 50) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_alarm_acknowledge_raw_value: u8 = ((frame_payload >> 48) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_protection_system_config_raw_value: u8 = ((frame_payload >> 46) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_protection_system_timer_state_raw_value: u8 =
                    ((frame_payload >> 38) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_prtection_system_timer_override_raw_value: u8 =
                    ((frame_payload >> 36) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_prtctn_systm_apprching_shutdown_raw_value: u8 =
                    ((frame_payload >> 34) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_prtction_system_has_shutdown_eng_raw_value: u8 =
                    ((frame_payload >> 32) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_wait_to_start_lamp_raw_value: u8 = ((frame_payload >> 24) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let refrigerant_high_press_switch_raw_value: u8 = ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let refrigerant_low_press_switch_raw_value: u8 = ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let a_c_high_press_fan_switch_raw_value: u8 = ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_idle_shutdown_timer_function_raw_value: u8 =
                    ((frame_payload >> 14) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_idle_shutdown_timer_state_raw_value: u8 = ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_idle_shutdown_timer_override_raw_value: u8 =
                    ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_idle_shutdown_driver_alert_mode_raw_value: u8 =
                    ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_idle_shutdown_has_shutdown_eng_raw_value: u8 = (frame_payload & 3) as u8;
                let eng_overspeed_test =
                    EngOverspeedTest2566841598::from(eng_overspeed_test_raw_value);
                let eng_air_shutoff_cmd_status =
                    EngAirShutoffCmdStatus2566841598::from(eng_air_shutoff_cmd_status_raw_value);
                let eng_alarm_output_cmd_status =
                    EngAlarmOutputCmdStatus2566841598::from(eng_alarm_output_cmd_status_raw_value);
                let eng_alarm_acknowledge =
                    EngAlarmAcknowledge2566841598::from(eng_alarm_acknowledge_raw_value);
                let eng_protection_system_config = EngProtectionSystemConfig2566841598::from(
                    eng_protection_system_config_raw_value,
                );
                let eng_protection_system_timer_state =
                    EngProtectionSystemTimerState2566841598::from(
                        eng_protection_system_timer_state_raw_value,
                    );
                let eng_prtection_system_timer_override =
                    EngPrtectionSystemTimerOverride2566841598::from(
                        eng_prtection_system_timer_override_raw_value,
                    );
                let eng_prtctn_systm_apprching_shutdown =
                    EngPrtctnSystmApprchingShutdown2566841598::from(
                        eng_prtctn_systm_apprching_shutdown_raw_value,
                    );
                let eng_prtction_system_has_shutdown_eng =
                    EngPrtctionSystemHasShutdownEng2566841598::from(
                        eng_prtction_system_has_shutdown_eng_raw_value,
                    );
                let eng_wait_to_start_lamp =
                    EngWaitToStartLamp2566841598::from(eng_wait_to_start_lamp_raw_value);
                let refrigerant_high_press_switch = RefrigerantHighPressSwitch2566841598::from(
                    refrigerant_high_press_switch_raw_value,
                );
                let refrigerant_low_press_switch = RefrigerantLowPressSwitch2566841598::from(
                    refrigerant_low_press_switch_raw_value,
                );
                let a_c_high_press_fan_switch =
                    ACHighPressFanSwitch2566841598::from(a_c_high_press_fan_switch_raw_value);
                let eng_idle_shutdown_timer_function = EngIdleShutdownTimerFunction2566841598::from(
                    eng_idle_shutdown_timer_function_raw_value,
                );
                let eng_idle_shutdown_timer_state = EngIdleShutdownTimerState2566841598::from(
                    eng_idle_shutdown_timer_state_raw_value,
                );
                let eng_idle_shutdown_timer_override = EngIdleShutdownTimerOverride2566841598::from(
                    eng_idle_shutdown_timer_override_raw_value,
                );
                let eng_idle_shutdown_driver_alert_mode =
                    EngIdleShutdownDriverAlertMode2566841598::from(
                        eng_idle_shutdown_driver_alert_mode_raw_value,
                    );
                let eng_idle_shutdown_has_shutdown_eng =
                    EngIdleShutdownHasShutdownEng2566841598::from(
                        eng_idle_shutdown_has_shutdown_eng_raw_value,
                    );
                DecodedFrame::Shutdow {
                    eng_overspeed_test_raw_value,
                    eng_air_shutoff_cmd_status_raw_value,
                    eng_alarm_output_cmd_status_raw_value,
                    eng_alarm_acknowledge_raw_value,
                    eng_protection_system_config_raw_value,
                    eng_protection_system_timer_state_raw_value,
                    eng_prtection_system_timer_override_raw_value,
                    eng_prtctn_systm_apprching_shutdown_raw_value,
                    eng_prtction_system_has_shutdown_eng_raw_value,
                    eng_wait_to_start_lamp_raw_value,
                    refrigerant_high_press_switch_raw_value,
                    refrigerant_low_press_switch_raw_value,
                    a_c_high_press_fan_switch_raw_value,
                    eng_idle_shutdown_timer_function_raw_value,
                    eng_idle_shutdown_timer_state_raw_value,
                    eng_idle_shutdown_timer_override_raw_value,
                    eng_idle_shutdown_driver_alert_mode_raw_value,
                    eng_idle_shutdown_has_shutdown_eng_raw_value,
                    eng_overspeed_test,
                    eng_air_shutoff_cmd_status,
                    eng_alarm_output_cmd_status,
                    eng_alarm_acknowledge,
                    eng_protection_system_config,
                    eng_protection_system_timer_state,
                    eng_prtection_system_timer_override,
                    eng_prtctn_systm_apprching_shutdown,
                    eng_prtction_system_has_shutdown_eng,
                    eng_wait_to_start_lamp,
                    refrigerant_high_press_switch,
                    refrigerant_low_press_switch,
                    a_c_high_press_fan_switch,
                    eng_idle_shutdown_timer_function,
                    eng_idle_shutdown_timer_state,
                    eng_idle_shutdown_timer_override,
                    eng_idle_shutdown_driver_alert_mode,
                    eng_idle_shutdown_has_shutdown_eng,
                }
            }
            2566832382u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let service_component_identification_b_raw_value: u8 =
                    ((frame_payload >> 24) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let service_component_identification_a_raw_value: u8 = (frame_payload & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let srvce_delay_operational_time_based_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 + -31873.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let service_delay_calendar_time_based_raw_value: f64 =
                    ((frame_payload >> 32) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let service_distance_raw_value: f64 =
                    ((frame_payload >> 8) & 65535) as f64 * 5.0 + -159365.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let service_component_identification_raw_value: u8 =
                    ((frame_payload >> 40) & 255) as u8;
                DecodedFrame::Serv {
                    service_component_identification_b_raw_value,
                    service_component_identification_a_raw_value,
                    srvce_delay_operational_time_based_raw_value,
                    service_delay_calendar_time_based_raw_value,
                    service_distance_raw_value,
                    service_component_identification_raw_value,
                }
            }
            2633928446u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let time_since_last_service_raw_value: f64 =
                    ((frame_payload >> 8) & 65535) as f64 + -32127.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let service_component_identification_raw_value: u8 = (frame_payload & 255) as u8;
                DecodedFrame::S2 {
                    time_since_last_service_raw_value,
                    service_component_identification_raw_value,
                }
            }
            2566804478u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let max_continuous_retarder_torque_raw_value: f64 =
                    ((frame_payload >> 48) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let min_continuous_retarder_speed_raw_value: f64 =
                    ((frame_payload >> 40) & 255) as f64 * 32.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let max_continuous_retarder_speed_raw_value: f64 =
                    ((frame_payload >> 32) & 255) as f64 * 32.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let hgh_lmt_thrshhld_fr_mn_cntns_trq_frm_rtr_raw_value: f64 =
                    ((frame_payload >> 24) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lw_lmt_thrshhld_fr_mx_trq_frm_retarder_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let hgh_lmt_thrshhld_fr_mn_cntns_rpm_frm_rtr_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 * 32.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lw_lmt_thrshhld_fr_mx_rpm_frm_retarder_raw_value: f64 =
                    (frame_payload & 255) as f64 * 32.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let min_continuous_retarder_torque_raw_value: f64 =
                    ((frame_payload >> 56) & 255) as f64 + -125.0;
                DecodedFrame::Rtc1 {
                    max_continuous_retarder_torque_raw_value,
                    min_continuous_retarder_speed_raw_value,
                    max_continuous_retarder_speed_raw_value,
                    hgh_lmt_thrshhld_fr_mn_cntns_trq_frm_rtr_raw_value,
                    lw_lmt_thrshhld_fr_mx_trq_frm_retarder_raw_value,
                    hgh_lmt_thrshhld_fr_mn_cntns_rpm_frm_rtr_raw_value,
                    lw_lmt_thrshhld_fr_mx_rpm_frm_retarder_raw_value,
                    min_continuous_retarder_torque_raw_value,
                }
            }
            2566847486u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let hyd_retarder_oil_temp_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 + -40.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let hyd_retarder_press_raw_value: f64 = (frame_payload & 255) as f64 * 16.0;
                DecodedFrame::Rf {
                    hyd_retarder_oil_temp_raw_value,
                    hyd_retarder_press_raw_value,
                }
            }
            2631859966u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_build_hours_reset_raw_value: u8 = ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let service_component_identification_raw_value: u8 =
                    ((frame_payload >> 8) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trip_group2_proprietary_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trip_group1_raw_value: u8 = (frame_payload & 3) as u8;
                let eng_build_hours_reset =
                    EngBuildHoursReset2631859966::from(eng_build_hours_reset_raw_value);
                let trip_group2_proprietary =
                    TripGroup2Proprietary2631859966::from(trip_group2_proprietary_raw_value);
                let trip_group1 = TripGroup12631859966::from(trip_group1_raw_value);
                DecodedFrame::Reset {
                    eng_build_hours_reset_raw_value,
                    service_component_identification_raw_value,
                    trip_group2_proprietary_raw_value,
                    trip_group1_raw_value,
                    eng_build_hours_reset,
                    trip_group2_proprietary,
                    trip_group1,
                }
            }
            2566840830u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let percent_torque_at_max_speed_point2_raw_value: f64 =
                    ((frame_payload >> 56) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let max_retarder_speed_point2_raw_value: f64 =
                    ((frame_payload >> 40) & 65535) as f64 * 0.125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let percent_torque_at_idle_point1_raw_value: f64 =
                    ((frame_payload >> 32) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let retarder_speed_at_idle_point1_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let retarder_ctrl_method_raw_value: u8 = ((frame_payload >> 8) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let retarder_location_raw_value: u8 = ((frame_payload >> 4) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let retarder_type_raw_value: u8 = (frame_payload & 15) as u8;
                let retarder_location =
                    RetarderLocation2566840830::from(retarder_location_raw_value);
                let retarder_type = RetarderType2566840830::from(retarder_type_raw_value);
                DecodedFrame::Rc {
                    percent_torque_at_max_speed_point2_raw_value,
                    max_retarder_speed_point2_raw_value,
                    percent_torque_at_idle_point1_raw_value,
                    retarder_speed_at_idle_point1_raw_value,
                    retarder_ctrl_method_raw_value,
                    retarder_location_raw_value,
                    retarder_type_raw_value,
                    retarder_location,
                    retarder_type,
                }
            }
            2633930238u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_operation_time_since_rebuild_raw_value: u32 =
                    (frame_payload & 4294967295) as u32;
                DecodedFrame::Rbi {
                    eng_operation_time_since_rebuild_raw_value,
                }
            }
            2566844670u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let operator_pto_memory_select_switch_raw_value: u8 =
                    ((frame_payload >> 56) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_pto_accelerate_switch_raw_value: u8 = ((frame_payload >> 54) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_pto_resume_switch_raw_value: u8 = ((frame_payload >> 52) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_pto_coast_decelerate_switch_raw_value: u8 =
                    ((frame_payload >> 50) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_pto_set_switch_raw_value: u8 = ((frame_payload >> 48) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_rmt_pto_vriable_speed_ctrl_switch_raw_value: u8 =
                    ((frame_payload >> 44) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_rmt_pto_prprgrmmd_spd_ctrl_switch_raw_value: u8 =
                    ((frame_payload >> 42) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_pto_enable_switch_raw_value: u8 = ((frame_payload >> 40) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let power_takeoff_set_speed_raw_value: f64 =
                    ((frame_payload >> 24) & 65535) as f64 * 0.125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let power_takeoff_speed_raw_value: f64 =
                    ((frame_payload >> 8) & 65535) as f64 * 0.125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let power_takeoff_oil_temp_raw_value: f64 = (frame_payload & 255) as f64 + -40.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rmt_pto_prprgrmmd_speed_ctrl_switch2_raw_value: u8 =
                    ((frame_payload >> 58) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_input_ignore_switch_raw_value: u8 = ((frame_payload >> 60) & 3) as u8;
                let operator_pto_memory_select_switch =
                    OperatorPtoMemorySelectSwitch2566844670::from(
                        operator_pto_memory_select_switch_raw_value,
                    );
                let eng_pto_accelerate_switch =
                    EngPtoAccelerateSwitch2566844670::from(eng_pto_accelerate_switch_raw_value);
                let eng_pto_resume_switch =
                    EngPtoResumeSwitch2566844670::from(eng_pto_resume_switch_raw_value);
                let eng_pto_coast_decelerate_switch = EngPtoCoastDecelerateSwitch2566844670::from(
                    eng_pto_coast_decelerate_switch_raw_value,
                );
                let eng_pto_set_switch =
                    EngPtoSetSwitch2566844670::from(eng_pto_set_switch_raw_value);
                let eng_rmt_pto_vriable_speed_ctrl_switch =
                    EngRmtPtoVriableSpeedCtrlSwitch2566844670::from(
                        eng_rmt_pto_vriable_speed_ctrl_switch_raw_value,
                    );
                let eng_rmt_pto_prprgrmmd_spd_ctrl_switch =
                    EngRmtPtoPrprgrmmdSpdCtrlSwitch2566844670::from(
                        eng_rmt_pto_prprgrmmd_spd_ctrl_switch_raw_value,
                    );
                let eng_pto_enable_switch =
                    EngPtoEnableSwitch2566844670::from(eng_pto_enable_switch_raw_value);
                let rmt_pto_prprgrmmd_speed_ctrl_switch2 =
                    RmtPtoPrprgrmmdSpeedCtrlSwitch22566844670::from(
                        rmt_pto_prprgrmmd_speed_ctrl_switch2_raw_value,
                    );
                let aux_input_ignore_switch =
                    AuxInputIgnoreSwitch2566844670::from(aux_input_ignore_switch_raw_value);
                DecodedFrame::Pto {
                    operator_pto_memory_select_switch_raw_value,
                    eng_pto_accelerate_switch_raw_value,
                    eng_pto_resume_switch_raw_value,
                    eng_pto_coast_decelerate_switch_raw_value,
                    eng_pto_set_switch_raw_value,
                    eng_rmt_pto_vriable_speed_ctrl_switch_raw_value,
                    eng_rmt_pto_prprgrmmd_spd_ctrl_switch_raw_value,
                    eng_pto_enable_switch_raw_value,
                    power_takeoff_set_speed_raw_value,
                    power_takeoff_speed_raw_value,
                    power_takeoff_oil_temp_raw_value,
                    rmt_pto_prprgrmmd_speed_ctrl_switch2_raw_value,
                    aux_input_ignore_switch_raw_value,
                    operator_pto_memory_select_switch,
                    eng_pto_accelerate_switch,
                    eng_pto_resume_switch,
                    eng_pto_coast_decelerate_switch,
                    eng_pto_set_switch,
                    eng_rmt_pto_vriable_speed_ctrl_switch,
                    eng_rmt_pto_prprgrmmd_spd_ctrl_switch,
                    eng_pto_enable_switch,
                    rmt_pto_prprgrmmd_speed_ctrl_switch2,
                    aux_input_ignore_switch,
                }
            }
            2566770174u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rear_washer_function_raw_value: u8 = ((frame_payload >> 53) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let front_operator_washer_switch_raw_value: u8 = ((frame_payload >> 45) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let front_nonoperator_washer_switch_raw_value: u8 =
                    ((frame_payload >> 42) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rear_wiper_delay_ctrl_raw_value: f64 =
                    ((frame_payload >> 32) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let front_nonoperator_wiper_delay_ctrl_raw_value: f64 =
                    ((frame_payload >> 24) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let front_operator_wiper_delay_ctrl_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rear_wiper_switch_raw_value: u8 = ((frame_payload >> 12) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let front_operator_wiper_switch_raw_value: u8 = ((frame_payload >> 4) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let front_nonoperator_wiper_switch_raw_value: u8 = (frame_payload & 15) as u8;
                let rear_washer_function =
                    RearWasherFunction2566770174::from(rear_washer_function_raw_value);
                let front_operator_washer_switch = FrontOperatorWasherSwitch2566770174::from(
                    front_operator_washer_switch_raw_value,
                );
                let front_nonoperator_washer_switch = FrontNonoperatorWasherSwitch2566770174::from(
                    front_nonoperator_washer_switch_raw_value,
                );
                let rear_wiper_switch =
                    RearWiperSwitch2566770174::from(rear_wiper_switch_raw_value);
                let front_operator_wiper_switch =
                    FrontOperatorWiperSwitch2566770174::from(front_operator_wiper_switch_raw_value);
                let front_nonoperator_wiper_switch = FrontNonoperatorWiperSwitch2566770174::from(
                    front_nonoperator_wiper_switch_raw_value,
                );
                DecodedFrame::Oww {
                    rear_washer_function_raw_value,
                    front_operator_washer_switch_raw_value,
                    front_nonoperator_washer_switch_raw_value,
                    rear_wiper_delay_ctrl_raw_value,
                    front_nonoperator_wiper_delay_ctrl_raw_value,
                    front_operator_wiper_delay_ctrl_raw_value,
                    rear_wiper_switch_raw_value,
                    front_operator_wiper_switch_raw_value,
                    front_nonoperator_wiper_switch_raw_value,
                    rear_washer_function,
                    front_operator_washer_switch,
                    front_nonoperator_washer_switch,
                    rear_wiper_switch,
                    front_operator_wiper_switch,
                    front_nonoperator_wiper_switch,
                }
            }
            2566769662u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_alt_droop_aux_input_select_raw_value: u8 =
                    ((frame_payload >> 28) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_alt_droop_remote_accel_select_raw_value: u8 =
                    ((frame_payload >> 24) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_alt_droop_accel2_select_raw_value: u8 = ((frame_payload >> 20) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_alt_droop_accel1_select_raw_value: u8 = ((frame_payload >> 16) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_alt_rating_select_raw_value: u8 = ((frame_payload >> 8) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_alt_low_idle_switch_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_synchronization_switch_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_aux_governor_switch_raw_value: u8 = (frame_payload & 3) as u8;
                let eng_alt_droop_aux_input_select = EngAltDroopAuxInputSelect2566769662::from(
                    eng_alt_droop_aux_input_select_raw_value,
                );
                let eng_alt_droop_remote_accel_select =
                    EngAltDroopRemoteAccelSelect2566769662::from(
                        eng_alt_droop_remote_accel_select_raw_value,
                    );
                let eng_alt_droop_accel2_select =
                    EngAltDroopAccel2Select2566769662::from(eng_alt_droop_accel2_select_raw_value);
                let eng_alt_droop_accel1_select =
                    EngAltDroopAccel1Select2566769662::from(eng_alt_droop_accel1_select_raw_value);
                let eng_alt_rating_select =
                    EngAltRatingSelect2566769662::from(eng_alt_rating_select_raw_value);
                let eng_alt_low_idle_switch =
                    EngAltLowIdleSwitch2566769662::from(eng_alt_low_idle_switch_raw_value);
                let eng_synchronization_switch =
                    EngSynchronizationSwitch2566769662::from(eng_synchronization_switch_raw_value);
                let eng_aux_governor_switch =
                    EngAuxGovernorSwitch2566769662::from(eng_aux_governor_switch_raw_value);
                DecodedFrame::Ohecs {
                    eng_alt_droop_aux_input_select_raw_value,
                    eng_alt_droop_remote_accel_select_raw_value,
                    eng_alt_droop_accel2_select_raw_value,
                    eng_alt_droop_accel1_select_raw_value,
                    eng_alt_rating_select_raw_value,
                    eng_alt_low_idle_switch_raw_value,
                    eng_synchronization_switch_raw_value,
                    eng_aux_governor_switch_raw_value,
                    eng_alt_droop_aux_input_select,
                    eng_alt_droop_remote_accel_select,
                    eng_alt_droop_accel2_select,
                    eng_alt_droop_accel1_select,
                    eng_alt_rating_select,
                    eng_alt_low_idle_switch,
                    eng_synchronization_switch,
                    eng_aux_governor_switch,
                }
            }
            2566768638u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_alt_droop_aux_input_select_state_raw_value: u8 =
                    ((frame_payload >> 28) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_alt_drp_remote_accel_select_state_raw_value: u8 =
                    ((frame_payload >> 24) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_alt_droop_accel2_select_state_raw_value: u8 =
                    ((frame_payload >> 20) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_alt_droop_accel1_select_state_raw_value: u8 =
                    ((frame_payload >> 16) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_alt_rating_select_state_raw_value: u8 = ((frame_payload >> 8) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_alt_low_idle_select_state_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_multi_unit_sync_state_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_aux_governor_state_raw_value: u8 = (frame_payload & 3) as u8;
                let eng_alt_droop_aux_input_select_state =
                    EngAltDroopAuxInputSelectState2566768638::from(
                        eng_alt_droop_aux_input_select_state_raw_value,
                    );
                let eng_alt_drp_remote_accel_select_state =
                    EngAltDrpRemoteAccelSelectState2566768638::from(
                        eng_alt_drp_remote_accel_select_state_raw_value,
                    );
                let eng_alt_droop_accel2_select_state =
                    EngAltDroopAccel2SelectState2566768638::from(
                        eng_alt_droop_accel2_select_state_raw_value,
                    );
                let eng_alt_droop_accel1_select_state =
                    EngAltDroopAccel1SelectState2566768638::from(
                        eng_alt_droop_accel1_select_state_raw_value,
                    );
                let eng_alt_rating_select_state =
                    EngAltRatingSelectState2566768638::from(eng_alt_rating_select_state_raw_value);
                let eng_alt_low_idle_select_state = EngAltLowIdleSelectState2566768638::from(
                    eng_alt_low_idle_select_state_raw_value,
                );
                let eng_multi_unit_sync_state =
                    EngMultiUnitSyncState2566768638::from(eng_multi_unit_sync_state_raw_value);
                let eng_aux_governor_state =
                    EngAuxGovernorState2566768638::from(eng_aux_governor_state_raw_value);
                DecodedFrame::Ohcss {
                    eng_alt_droop_aux_input_select_state_raw_value,
                    eng_alt_drp_remote_accel_select_state_raw_value,
                    eng_alt_droop_accel2_select_state_raw_value,
                    eng_alt_droop_accel1_select_state_raw_value,
                    eng_alt_rating_select_state_raw_value,
                    eng_alt_low_idle_select_state_raw_value,
                    eng_multi_unit_sync_state_raw_value,
                    eng_aux_governor_state_raw_value,
                    eng_alt_droop_aux_input_select_state,
                    eng_alt_drp_remote_accel_select_state,
                    eng_alt_droop_accel2_select_state,
                    eng_alt_droop_accel1_select_state,
                    eng_alt_rating_select_state,
                    eng_alt_low_idle_select_state,
                    eng_multi_unit_sync_state,
                    eng_aux_governor_state,
                }
            }
            2365443326u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let oprtrs_desired_delayed_lamp_off_time_raw_value: u16 =
                    ((frame_payload >> 24) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let operators_desired_backlight_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let high_low_beam_switch_raw_value: u8 = ((frame_payload >> 14) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let hazard_light_switch_raw_value: u8 = ((frame_payload >> 12) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let turn_signal_switch_raw_value: u8 = ((frame_payload >> 8) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let main_light_switch_raw_value: u8 = ((frame_payload >> 4) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let work_light_switch_raw_value: u8 = (frame_payload & 15) as u8;
                let high_low_beam_switch =
                    HighLowBeamSwitch2365443326::from(high_low_beam_switch_raw_value);
                let hazard_light_switch =
                    HazardLightSwitch2365443326::from(hazard_light_switch_raw_value);
                let turn_signal_switch =
                    TurnSignalSwitch2365443326::from(turn_signal_switch_raw_value);
                let main_light_switch =
                    MainLightSwitch2365443326::from(main_light_switch_raw_value);
                let work_light_switch =
                    WorkLightSwitch2365443326::from(work_light_switch_raw_value);
                DecodedFrame::Oel {
                    oprtrs_desired_delayed_lamp_off_time_raw_value,
                    operators_desired_backlight_raw_value,
                    high_low_beam_switch_raw_value,
                    hazard_light_switch_raw_value,
                    turn_signal_switch_raw_value,
                    main_light_switch_raw_value,
                    work_light_switch_raw_value,
                    high_low_beam_switch,
                    hazard_light_switch,
                    turn_signal_switch,
                    main_light_switch,
                    work_light_switch,
                }
            }
            2566776318u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let applied_vehicle_speed_limit_raw_value: u8 = ((frame_payload >> 56) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let max_vehicle_speed_limit7_raw_value: u8 = ((frame_payload >> 48) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let max_vehicle_speed_limit6_raw_value: u8 = ((frame_payload >> 40) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let max_vehicle_speed_limit5_raw_value: u8 = ((frame_payload >> 32) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let max_vehicle_speed_limit4_raw_value: u8 = ((frame_payload >> 24) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let max_vehicle_speed_limit3_raw_value: u8 = ((frame_payload >> 16) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let max_vehicle_speed_limit2_raw_value: u8 = ((frame_payload >> 8) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let max_vehicle_speed_limit1_raw_value: u8 = (frame_payload & 255) as u8;
                DecodedFrame::Mvs {
                    applied_vehicle_speed_limit_raw_value,
                    max_vehicle_speed_limit7_raw_value,
                    max_vehicle_speed_limit6_raw_value,
                    max_vehicle_speed_limit5_raw_value,
                    max_vehicle_speed_limit4_raw_value,
                    max_vehicle_speed_limit3_raw_value,
                    max_vehicle_speed_limit2_raw_value,
                    max_vehicle_speed_limit1_raw_value,
                }
            }
            2566802686u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let oprtrs_blck_out_intensity_selection_raw_value: f64 =
                    ((frame_payload >> 56) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let black_out_work_lamp_select_raw_value: u8 = ((frame_payload >> 30) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let night_vision_illuminator_select_raw_value: u8 =
                    ((frame_payload >> 24) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let black_out_brake_stop_lamp_select_raw_value: u8 =
                    ((frame_payload >> 22) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let convoy_driving_lamp_select_raw_value: u8 = ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let convoy_lamp_select_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let front_black_out_marker_lamp_select_raw_value: u8 =
                    ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rear_black_out_marker_select_raw_value: u8 = (frame_payload & 3) as u8;
                let black_out_work_lamp_select =
                    BlackOutWorkLampSelect2566802686::from(black_out_work_lamp_select_raw_value);
                let night_vision_illuminator_select = NightVisionIlluminatorSelect2566802686::from(
                    night_vision_illuminator_select_raw_value,
                );
                let black_out_brake_stop_lamp_select = BlackOutBrakeStopLampSelect2566802686::from(
                    black_out_brake_stop_lamp_select_raw_value,
                );
                let convoy_driving_lamp_select =
                    ConvoyDrivingLampSelect2566802686::from(convoy_driving_lamp_select_raw_value);
                let convoy_lamp_select =
                    ConvoyLampSelect2566802686::from(convoy_lamp_select_raw_value);
                let front_black_out_marker_lamp_select =
                    FrontBlackOutMarkerLampSelect2566802686::from(
                        front_black_out_marker_lamp_select_raw_value,
                    );
                let rear_black_out_marker_select = RearBlackOutMarkerSelect2566802686::from(
                    rear_black_out_marker_select_raw_value,
                );
                DecodedFrame::Ml {
                    oprtrs_blck_out_intensity_selection_raw_value,
                    black_out_work_lamp_select_raw_value,
                    night_vision_illuminator_select_raw_value,
                    black_out_brake_stop_lamp_select_raw_value,
                    convoy_driving_lamp_select_raw_value,
                    convoy_lamp_select_raw_value,
                    front_black_out_marker_lamp_select_raw_value,
                    rear_black_out_marker_select_raw_value,
                    black_out_work_lamp_select,
                    night_vision_illuminator_select,
                    black_out_brake_stop_lamp_select,
                    convoy_driving_lamp_select,
                    convoy_lamp_select,
                    front_black_out_marker_lamp_select,
                    rear_black_out_marker_select,
                }
            }
            2566774014u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let slow_vessel_mode_status_raw_value: u8 = ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trolling_mode_status_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_thrttl_synchrnztion_mode_status_raw_value: u8 = (frame_payload & 15) as u8;
                let slow_vessel_mode_status =
                    SlowVesselModeStatus2566774014::from(slow_vessel_mode_status_raw_value);
                let trolling_mode_status =
                    TrollingModeStatus2566774014::from(trolling_mode_status_raw_value);
                let eng_thrttl_synchrnztion_mode_status =
                    EngThrttlSynchrnztionModeStatus2566774014::from(
                        eng_thrttl_synchrnztion_mode_status_raw_value,
                    );
                DecodedFrame::Mci {
                    slow_vessel_mode_status_raw_value,
                    trolling_mode_status_raw_value,
                    eng_thrttl_synchrnztion_mode_status_raw_value,
                    slow_vessel_mode_status,
                    trolling_mode_status,
                    eng_thrttl_synchrnztion_mode_status,
                }
            }
            2566823166u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_main_bearing11_temp_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_main_bearing10_temp_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_main_bearing9_temp_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.03125 + -273.0;
                DecodedFrame::Mbt3 {
                    eng_main_bearing11_temp_raw_value,
                    eng_main_bearing10_temp_raw_value,
                    eng_main_bearing9_temp_raw_value,
                }
            }
            2566823422u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_main_bearing8_temp_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_main_bearing7_temp_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_main_bearing6_temp_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_main_bearing5_temp_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.03125 + -273.0;
                DecodedFrame::Mbt2 {
                    eng_main_bearing8_temp_raw_value,
                    eng_main_bearing7_temp_raw_value,
                    eng_main_bearing6_temp_raw_value,
                    eng_main_bearing5_temp_raw_value,
                }
            }
            2566823678u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_main_bearing4_temp_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_main_bearing3_temp_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_main_bearing2_temp_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_main_bearing1_temp_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.03125 + -273.0;
                DecodedFrame::Mbt1 {
                    eng_main_bearing4_temp_raw_value,
                    eng_main_bearing3_temp_raw_value,
                    eng_main_bearing2_temp_raw_value,
                    eng_main_bearing1_temp_raw_value,
                }
            }
            2432595710u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let display_deadbands_raw_value: u8 = ((frame_payload >> 20) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let led_pattern_ctrl_raw_value: u8 = ((frame_payload >> 16) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let led_display_deadband_ctrl_raw_value: u8 = ((frame_payload >> 12) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let led_display_mode_ctrl_raw_value: u8 = ((frame_payload >> 8) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let led_display_data1_raw_value: u8 = (frame_payload & 255) as u8;
                let display_deadbands =
                    DisplayDeadbands2432595710::from(display_deadbands_raw_value);
                let led_pattern_ctrl = LedPatternCtrl2432595710::from(led_pattern_ctrl_raw_value);
                let led_display_deadband_ctrl =
                    LedDisplayDeadbandCtrl2432595710::from(led_display_deadband_ctrl_raw_value);
                let led_display_mode_ctrl =
                    LedDisplayModeCtrl2432595710::from(led_display_mode_ctrl_raw_value);
                let led_display_data1 =
                    LedDisplayData12432595710::from(led_display_data1_raw_value);
                DecodedFrame::Lvdd {
                    display_deadbands_raw_value,
                    led_pattern_ctrl_raw_value,
                    led_display_deadband_ctrl_raw_value,
                    led_display_mode_ctrl_raw_value,
                    led_display_data1_raw_value,
                    display_deadbands,
                    led_pattern_ctrl,
                    led_display_deadband_ctrl,
                    led_display_mode_ctrl,
                    led_display_data1,
                }
            }
            2365486590u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let abs_laser_strike_position_raw_value: f64 =
                    ((frame_payload >> 40) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let laser_strike_data_latency_raw_value: f64 =
                    ((frame_payload >> 24) & 65535) as f64 * 51.2;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let laser_receiver_type_raw_value: u8 = ((frame_payload >> 16) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let laser_strike_vertical_deviation_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.1 + -3200.0;
                let laser_receiver_type =
                    LaserReceiverType2365486590::from(laser_receiver_type_raw_value);
                DecodedFrame::Lvd {
                    abs_laser_strike_position_raw_value,
                    laser_strike_data_latency_raw_value,
                    laser_receiver_type_raw_value,
                    laser_strike_vertical_deviation_raw_value,
                    laser_receiver_type,
                }
            }
            2365485566u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let laser_tracer_information_raw_value: u8 = ((frame_payload >> 48) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let led_display_data2_raw_value: u8 = ((frame_payload >> 40) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let laser_tracer_horizontal_deviation_raw_value: u8 =
                    ((frame_payload >> 32) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let laser_tracer_vertical_distance_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let laser_tracer_target_deviation_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.1 + -3200.0;
                let laser_tracer_information =
                    LaserTracerInformation2365485566::from(laser_tracer_information_raw_value);
                let led_display_data2 =
                    LedDisplayData22365485566::from(led_display_data2_raw_value);
                DecodedFrame::Ltp {
                    laser_tracer_information_raw_value,
                    led_display_data2_raw_value,
                    laser_tracer_horizontal_deviation_raw_value,
                    laser_tracer_vertical_distance_raw_value,
                    laser_tracer_target_deviation_raw_value,
                    laser_tracer_information,
                    led_display_data2,
                }
            }
            2633939454u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trip_pto_moving_fuel_used_raw_value: f64 =
                    ((frame_payload >> 32) & 4294967295) as f64 * 0.5;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trip_drive_fuel_used_raw_value: f64 = (frame_payload & 4294967295) as f64 * 0.5;
                DecodedFrame::Ltfi {
                    trip_pto_moving_fuel_used_raw_value,
                    trip_drive_fuel_used_raw_value,
                }
            }
            2365486334u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let bld_height_set_point_high_resolution_raw_value: f64 =
                    ((frame_payload >> 16) & 4294967295) as f64 * 0.1 + -209.7152;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let modify_set_point_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.1 + -2800.0;
                DecodedFrame::Lsp {
                    bld_height_set_point_high_resolution_raw_value,
                    modify_set_point_raw_value,
                }
            }
            2364542462u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let sdshft_dsrd_bld_offset_operator_ctrl_raw_value: u8 =
                    ((frame_payload >> 32) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let sdshft_bld_ctrl_mde_operator_control_raw_value: u8 =
                    ((frame_payload >> 28) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rght_dsrd_blade_offset_operator_ctrl_raw_value: u8 =
                    ((frame_payload >> 24) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rght_blde_ctrl_mode_operator_control_raw_value: u8 =
                    ((frame_payload >> 16) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lft_dsred_blade_offset_operator_ctrl_raw_value: u8 =
                    ((frame_payload >> 20) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lft_blade_ctrl_mode_operator_control_raw_value: u8 =
                    ((frame_payload >> 12) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let blade_auto_mode_cmd_raw_value: u8 = ((frame_payload >> 8) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let desired_grade_offset_switch_raw_value: u8 = ((frame_payload >> 4) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let blade_ctrl_mode_switch_raw_value: u8 = (frame_payload & 15) as u8;
                let sdshft_dsrd_bld_offset_operator_ctrl =
                    SdshftDsrdBldOffsetOperatorCtrl2364542462::from(
                        sdshft_dsrd_bld_offset_operator_ctrl_raw_value,
                    );
                let sdshft_bld_ctrl_mde_operator_control =
                    SdshftBldCtrlMdeOperatorControl2364542462::from(
                        sdshft_bld_ctrl_mde_operator_control_raw_value,
                    );
                let rght_dsrd_blade_offset_operator_ctrl =
                    RghtDsrdBladeOffsetOperatorCtrl2364542462::from(
                        rght_dsrd_blade_offset_operator_ctrl_raw_value,
                    );
                let rght_blde_ctrl_mode_operator_control =
                    RghtBldeCtrlModeOperatorControl2364542462::from(
                        rght_blde_ctrl_mode_operator_control_raw_value,
                    );
                let lft_dsred_blade_offset_operator_ctrl =
                    LftDsredBladeOffsetOperatorCtrl2364542462::from(
                        lft_dsred_blade_offset_operator_ctrl_raw_value,
                    );
                let lft_blade_ctrl_mode_operator_control =
                    LftBladeCtrlModeOperatorControl2364542462::from(
                        lft_blade_ctrl_mode_operator_control_raw_value,
                    );
                let blade_auto_mode_cmd =
                    BladeAutoModeCmd2364542462::from(blade_auto_mode_cmd_raw_value);
                let desired_grade_offset_switch =
                    DesiredGradeOffsetSwitch2364542462::from(desired_grade_offset_switch_raw_value);
                let blade_ctrl_mode_switch =
                    BladeCtrlModeSwitch2364542462::from(blade_ctrl_mode_switch_raw_value);
                DecodedFrame::Loi {
                    sdshft_dsrd_bld_offset_operator_ctrl_raw_value,
                    sdshft_bld_ctrl_mde_operator_control_raw_value,
                    rght_dsrd_blade_offset_operator_ctrl_raw_value,
                    rght_blde_ctrl_mode_operator_control_raw_value,
                    lft_dsred_blade_offset_operator_ctrl_raw_value,
                    lft_blade_ctrl_mode_operator_control_raw_value,
                    blade_auto_mode_cmd_raw_value,
                    desired_grade_offset_switch_raw_value,
                    blade_ctrl_mode_switch_raw_value,
                    sdshft_dsrd_bld_offset_operator_ctrl,
                    sdshft_bld_ctrl_mde_operator_control,
                    rght_dsrd_blade_offset_operator_ctrl,
                    rght_blde_ctrl_mode_operator_control,
                    lft_dsred_blade_offset_operator_ctrl,
                    lft_blade_ctrl_mode_operator_control,
                    blade_auto_mode_cmd,
                    desired_grade_offset_switch,
                    blade_ctrl_mode_switch,
                }
            }
            2365486078u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let mast_pos_raw_value: f64 = (frame_payload & 65535) as f64 * 0.1 + -3200.0;
                DecodedFrame::Lmp { mast_pos_raw_value }
            }
            2633937918u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trip_average_fuel_rate_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let total_eng_pto_fuel_used_raw_value: f64 =
                    (frame_payload & 4294967295) as f64 * 0.5;
                DecodedFrame::Lfi {
                    trip_average_fuel_rate_raw_value,
                    total_eng_pto_fuel_used_raw_value,
                }
            }
            2566845182u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_average_fuel_economy_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.001953125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_instantaneous_fuel_economy_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.001953125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_fuel_rate_raw_value: f64 = (frame_payload & 65535) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_throttle2_pos_raw_value: f64 = ((frame_payload >> 56) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_throttle_pos_raw_value: f64 = ((frame_payload >> 48) & 255) as f64 * 0.4;
                DecodedFrame::Lfe {
                    eng_average_fuel_economy_raw_value,
                    eng_instantaneous_fuel_economy_raw_value,
                    eng_fuel_rate_raw_value,
                    eng_throttle2_pos_raw_value,
                    eng_throttle_pos_raw_value,
                }
            }
            2566842878u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_total_fuel_used_raw_value: f64 =
                    ((frame_payload >> 32) & 4294967295) as f64 * 0.5;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_trip_fuel_raw_value: f64 = (frame_payload & 4294967295) as f64 * 0.5;
                DecodedFrame::Lfc {
                    eng_total_fuel_used_raw_value,
                    eng_trip_fuel_raw_value,
                }
            }
            2633883646u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let front_wheel_drive_actuator_status_raw_value: u8 = (frame_payload & 3) as u8;
                let front_wheel_drive_actuator_status =
                    FrontWheelDriveActuatorStatus2633883646::from(
                        front_wheel_drive_actuator_status_raw_value,
                    );
                DecodedFrame::Fwd {
                    front_wheel_drive_actuator_status_raw_value,
                    front_wheel_drive_actuator_status,
                }
            }
            2633880062u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let fm_sstandard_s_wversion_supported_raw_value: u32 =
                    ((frame_payload >> 8) & 4294967295) as u32;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let fm_sstandard_rqs_supported_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let fm_sstandard_diagnostics_supported_raw_value: u8 = (frame_payload & 3) as u8;
                let fm_sstandard_rqs_supported =
                    FmSstandardRqsSupported2633880062::from(fm_sstandard_rqs_supported_raw_value);
                let fm_sstandard_diagnostics_supported =
                    FmSstandardDiagnosticsSupported2633880062::from(
                        fm_sstandard_diagnostics_supported_raw_value,
                    );
                DecodedFrame::Fms {
                    fm_sstandard_s_wversion_supported_raw_value,
                    fm_sstandard_rqs_supported_raw_value,
                    fm_sstandard_diagnostics_supported_raw_value,
                    fm_sstandard_rqs_supported,
                    fm_sstandard_diagnostics_supported,
                }
            }
            2566806526u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let ln_dprture_indication_enable_status_raw_value: u8 =
                    ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lane_tracking_status_left_side_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lane_tracking_status_right_side_raw_value: u8 =
                    ((frame_payload >> 2) & 3) as u8;
                let ln_dprture_indication_enable_status =
                    LnDprtureIndicationEnableStatus2566806526::from(
                        ln_dprture_indication_enable_status_raw_value,
                    );
                let lane_tracking_status_left_side = LaneTrackingStatusLeftSide2566806526::from(
                    lane_tracking_status_left_side_raw_value,
                );
                let lane_tracking_status_right_side = LaneTrackingStatusRightSide2566806526::from(
                    lane_tracking_status_right_side_raw_value,
                );
                DecodedFrame::Fli2 {
                    ln_dprture_indication_enable_status_raw_value,
                    lane_tracking_status_left_side_raw_value,
                    lane_tracking_status_right_side_raw_value,
                    ln_dprture_indication_enable_status,
                    lane_tracking_status_left_side,
                    lane_tracking_status_right_side,
                }
            }
            2431649790u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lane_departure_imminent_left_side_raw_value: u8 =
                    ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lane_departure_imminent_right_side_raw_value: u8 =
                    ((frame_payload >> 4) & 3) as u8;
                let lane_departure_imminent_left_side =
                    LaneDepartureImminentLeftSide2431649790::from(
                        lane_departure_imminent_left_side_raw_value,
                    );
                let lane_departure_imminent_right_side =
                    LaneDepartureImminentRightSide2431649790::from(
                        lane_departure_imminent_right_side_raw_value,
                    );
                DecodedFrame::Fli1 {
                    lane_departure_imminent_left_side_raw_value,
                    lane_departure_imminent_right_side_raw_value,
                    lane_departure_imminent_left_side,
                    lane_departure_imminent_right_side,
                }
            }
            2633929214u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_fuel_leakage2_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_fuel_leakage1_raw_value: u8 = (frame_payload & 3) as u8;
                let eng_fuel_leakage2 =
                    EngFuelLeakage22633929214::from(eng_fuel_leakage2_raw_value);
                let eng_fuel_leakage1 =
                    EngFuelLeakage12633929214::from(eng_fuel_leakage1_raw_value);
                DecodedFrame::Fl {
                    eng_fuel_leakage2_raw_value,
                    eng_fuel_leakage1_raw_value,
                    eng_fuel_leakage2,
                    eng_fuel_leakage1,
                }
            }
            2566831614u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let fan_speed_raw_value: f64 = ((frame_payload >> 16) & 65535) as f64 * 0.125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let fan_drive_state_raw_value: u8 = ((frame_payload >> 8) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let est_percent_fan_speed_raw_value: f64 = (frame_payload & 255) as f64 * 0.4;
                let fan_drive_state = FanDriveState2566831614::from(fan_drive_state_raw_value);
                DecodedFrame::Fd {
                    fan_speed_raw_value,
                    fan_drive_state_raw_value,
                    est_percent_fan_speed_raw_value,
                    fan_drive_state,
                }
            }
            2566820094u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let calib_record_start_month_raw_value: u8 = ((frame_payload >> 56) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_peak_torque2_raw_value: u16 = ((frame_payload >> 40) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_peak_torque1_raw_value: u16 = ((frame_payload >> 24) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_power_raw_value: f64 = ((frame_payload >> 8) & 65535) as f64 * 0.5;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let number_of_eng_torque_history_records_raw_value: u8 =
                    (frame_payload & 255) as u8;
                DecodedFrame::Eth {
                    calib_record_start_month_raw_value,
                    eng_peak_torque2_raw_value,
                    eng_peak_torque1_raw_value,
                    eng_power_raw_value,
                    number_of_eng_torque_history_records_raw_value,
                }
            }
            2364542206u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_torque_converter_ratio_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.001;
                DecodedFrame::Etc8 {
                    trans_torque_converter_ratio_raw_value,
                }
            }
            2566802174u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_rqed_gear_feedback_raw_value: f64 =
                    ((frame_payload >> 24) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_mode1_indicator_raw_value: u8 = ((frame_payload >> 22) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_mode2_indicator_raw_value: u8 = ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_mode3_indicator_raw_value: u8 = ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_mode4_indicator_raw_value: u8 = ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_shift_inhibit_indicator_raw_value: u8 = ((frame_payload >> 14) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_eng_crank_enable_raw_value: u8 = ((frame_payload >> 12) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let active_shift_console_indicator_raw_value: u8 =
                    ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_ready_for_brake_release_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_rqed_range_display_flash_state_raw_value: u8 =
                    ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_rqed_range_display_blank_state_raw_value: u8 =
                    ((frame_payload >> 4) & 3) as u8;
                let trans_mode1_indicator =
                    TransMode1Indicator2566802174::from(trans_mode1_indicator_raw_value);
                let trans_mode2_indicator =
                    TransMode2Indicator2566802174::from(trans_mode2_indicator_raw_value);
                let trans_mode3_indicator =
                    TransMode3Indicator2566802174::from(trans_mode3_indicator_raw_value);
                let trans_mode4_indicator =
                    TransMode4Indicator2566802174::from(trans_mode4_indicator_raw_value);
                let trans_shift_inhibit_indicator = TransShiftInhibitIndicator2566802174::from(
                    trans_shift_inhibit_indicator_raw_value,
                );
                let trans_eng_crank_enable =
                    TransEngCrankEnable2566802174::from(trans_eng_crank_enable_raw_value);
                let active_shift_console_indicator = ActiveShiftConsoleIndicator2566802174::from(
                    active_shift_console_indicator_raw_value,
                );
                let trans_ready_for_brake_release = TransReadyForBrakeRelease2566802174::from(
                    trans_ready_for_brake_release_raw_value,
                );
                let trans_rqed_range_display_flash_state =
                    TransRqedRangeDisplayFlashState2566802174::from(
                        trans_rqed_range_display_flash_state_raw_value,
                    );
                let trans_rqed_range_display_blank_state =
                    TransRqedRangeDisplayBlankState2566802174::from(
                        trans_rqed_range_display_blank_state_raw_value,
                    );
                DecodedFrame::Etc7 {
                    trans_rqed_gear_feedback_raw_value,
                    trans_mode1_indicator_raw_value,
                    trans_mode2_indicator_raw_value,
                    trans_mode3_indicator_raw_value,
                    trans_mode4_indicator_raw_value,
                    trans_shift_inhibit_indicator_raw_value,
                    trans_eng_crank_enable_raw_value,
                    active_shift_console_indicator_raw_value,
                    trans_ready_for_brake_release_raw_value,
                    trans_rqed_range_display_flash_state_raw_value,
                    trans_rqed_range_display_blank_state_raw_value,
                    trans_mode1_indicator,
                    trans_mode2_indicator,
                    trans_mode3_indicator,
                    trans_mode4_indicator,
                    trans_shift_inhibit_indicator,
                    trans_eng_crank_enable,
                    active_shift_console_indicator,
                    trans_ready_for_brake_release,
                    trans_rqed_range_display_flash_state,
                    trans_rqed_range_display_blank_state,
                }
            }
            2633935870u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let clutch_life_remaining_raw_value: f64 =
                    ((frame_payload >> 24) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lowest_possible_gear_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let highest_possible_gear_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let recommended_gear_raw_value: f64 = (frame_payload & 255) as f64 + -125.0;
                DecodedFrame::Etc6 {
                    clutch_life_remaining_raw_value,
                    lowest_possible_gear_raw_value,
                    highest_possible_gear_raw_value,
                    recommended_gear_raw_value,
                }
            }
            2633942014u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_forward_direction_switch_raw_value: u8 =
                    ((frame_payload >> 12) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_neutral_switch_raw_value: u8 = ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_reverse_direction_switch_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_low_range_sense_switch_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_high_range_sense_switch_raw_value: u8 = (frame_payload & 3) as u8;
                let trans_forward_direction_switch = TransForwardDirectionSwitch2633942014::from(
                    trans_forward_direction_switch_raw_value,
                );
                let trans_neutral_switch =
                    TransNeutralSwitch2633942014::from(trans_neutral_switch_raw_value);
                let trans_reverse_direction_switch = TransReverseDirectionSwitch2633942014::from(
                    trans_reverse_direction_switch_raw_value,
                );
                let trans_low_range_sense_switch = TransLowRangeSenseSwitch2633942014::from(
                    trans_low_range_sense_switch_raw_value,
                );
                let trans_high_range_sense_switch = TransHighRangeSenseSwitch2633942014::from(
                    trans_high_range_sense_switch_raw_value,
                );
                DecodedFrame::Etc5 {
                    trans_forward_direction_switch_raw_value,
                    trans_neutral_switch_raw_value,
                    trans_reverse_direction_switch_raw_value,
                    trans_low_range_sense_switch_raw_value,
                    trans_high_range_sense_switch_raw_value,
                    trans_forward_direction_switch,
                    trans_neutral_switch,
                    trans_reverse_direction_switch,
                    trans_low_range_sense_switch,
                    trans_high_range_sense_switch,
                }
            }
            2633942526u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_synchronizer_brake_value_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_synchronizer_clutch_value_raw_value: f64 =
                    (frame_payload & 255) as f64 * 0.4;
                DecodedFrame::Etc4 {
                    trans_synchronizer_brake_value_raw_value,
                    trans_synchronizer_clutch_value_raw_value,
                }
            }
            2633943038u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_inertia_brake_actuator_raw_value: u8 = ((frame_payload >> 46) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_defuel_actuator_raw_value: u8 = ((frame_payload >> 44) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_lockup_clutch_actuator_raw_value: u8 = ((frame_payload >> 42) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_clutch_actuator_raw_value: u8 = ((frame_payload >> 40) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_splitter_indirect_actuator_raw_value: u8 =
                    ((frame_payload >> 38) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_splitter_direct_actuator_raw_value: u8 =
                    ((frame_payload >> 36) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_range_low_actuator_raw_value: u8 = ((frame_payload >> 34) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_range_high_actuator_raw_value: u8 = ((frame_payload >> 32) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_shift_finger_gear_actuator2_raw_value: u8 =
                    ((frame_payload >> 30) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_shift_finger_rail_actuator2_raw_value: u8 =
                    ((frame_payload >> 28) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_shift_finger_gear_actuator1_raw_value: u8 =
                    ((frame_payload >> 26) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_shift_finger_rail_actuator1_raw_value: u8 =
                    ((frame_payload >> 24) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trns_shft_fngr_center_rail_indicator_raw_value: u8 =
                    ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trns_shft_fngr_engagement_indicator_raw_value: u8 =
                    ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trns_shift_finger_neutral_indicator_raw_value: u8 =
                    ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_shift_finger_rail_pos_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_shift_finger_gear_pos_raw_value: f64 = (frame_payload & 255) as f64 * 0.4;
                let trans_inertia_brake_actuator = TransInertiaBrakeActuator2633943038::from(
                    trans_inertia_brake_actuator_raw_value,
                );
                let trans_defuel_actuator =
                    TransDefuelActuator2633943038::from(trans_defuel_actuator_raw_value);
                let trans_lockup_clutch_actuator = TransLockupClutchActuator2633943038::from(
                    trans_lockup_clutch_actuator_raw_value,
                );
                let trans_clutch_actuator =
                    TransClutchActuator2633943038::from(trans_clutch_actuator_raw_value);
                let trans_splitter_indirect_actuator =
                    TransSplitterIndirectActuator2633943038::from(
                        trans_splitter_indirect_actuator_raw_value,
                    );
                let trans_splitter_direct_actuator = TransSplitterDirectActuator2633943038::from(
                    trans_splitter_direct_actuator_raw_value,
                );
                let trans_range_low_actuator =
                    TransRangeLowActuator2633943038::from(trans_range_low_actuator_raw_value);
                let trans_range_high_actuator =
                    TransRangeHighActuator2633943038::from(trans_range_high_actuator_raw_value);
                let trans_shift_finger_gear_actuator2 =
                    TransShiftFingerGearActuator22633943038::from(
                        trans_shift_finger_gear_actuator2_raw_value,
                    );
                let trans_shift_finger_rail_actuator2 =
                    TransShiftFingerRailActuator22633943038::from(
                        trans_shift_finger_rail_actuator2_raw_value,
                    );
                let trans_shift_finger_gear_actuator1 =
                    TransShiftFingerGearActuator12633943038::from(
                        trans_shift_finger_gear_actuator1_raw_value,
                    );
                let trans_shift_finger_rail_actuator1 =
                    TransShiftFingerRailActuator12633943038::from(
                        trans_shift_finger_rail_actuator1_raw_value,
                    );
                let trns_shft_fngr_center_rail_indicator =
                    TrnsShftFngrCenterRailIndicator2633943038::from(
                        trns_shft_fngr_center_rail_indicator_raw_value,
                    );
                let trns_shft_fngr_engagement_indicator =
                    TrnsShftFngrEngagementIndicator2633943038::from(
                        trns_shft_fngr_engagement_indicator_raw_value,
                    );
                let trns_shift_finger_neutral_indicator =
                    TrnsShiftFingerNeutralIndicator2633943038::from(
                        trns_shift_finger_neutral_indicator_raw_value,
                    );
                DecodedFrame::Etc3 {
                    trans_inertia_brake_actuator_raw_value,
                    trans_defuel_actuator_raw_value,
                    trans_lockup_clutch_actuator_raw_value,
                    trans_clutch_actuator_raw_value,
                    trans_splitter_indirect_actuator_raw_value,
                    trans_splitter_direct_actuator_raw_value,
                    trans_range_low_actuator_raw_value,
                    trans_range_high_actuator_raw_value,
                    trans_shift_finger_gear_actuator2_raw_value,
                    trans_shift_finger_rail_actuator2_raw_value,
                    trans_shift_finger_gear_actuator1_raw_value,
                    trans_shift_finger_rail_actuator1_raw_value,
                    trns_shft_fngr_center_rail_indicator_raw_value,
                    trns_shft_fngr_engagement_indicator_raw_value,
                    trns_shift_finger_neutral_indicator_raw_value,
                    trans_shift_finger_rail_pos_raw_value,
                    trans_shift_finger_gear_pos_raw_value,
                    trans_inertia_brake_actuator,
                    trans_defuel_actuator,
                    trans_lockup_clutch_actuator,
                    trans_clutch_actuator,
                    trans_splitter_indirect_actuator,
                    trans_splitter_direct_actuator,
                    trans_range_low_actuator,
                    trans_range_high_actuator,
                    trans_shift_finger_gear_actuator2,
                    trans_shift_finger_rail_actuator2,
                    trans_shift_finger_gear_actuator1,
                    trans_shift_finger_rail_actuator1,
                    trns_shft_fngr_center_rail_indicator,
                    trns_shft_fngr_engagement_indicator,
                    trns_shift_finger_neutral_indicator,
                }
            }
            2565867006u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_current_range_raw_value: u16 = ((frame_payload >> 48) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_rqed_range_raw_value: u16 = ((frame_payload >> 32) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_current_gear_raw_value: f64 =
                    ((frame_payload >> 24) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_actual_gear_ratio_raw_value: f64 =
                    ((frame_payload >> 8) & 65535) as f64 * 0.001;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_selected_gear_raw_value: f64 = (frame_payload & 255) as f64 + -125.0;
                DecodedFrame::Etc2 {
                    trans_current_range_raw_value,
                    trans_rqed_range_raw_value,
                    trans_current_gear_raw_value,
                    trans_actual_gear_ratio_raw_value,
                    trans_selected_gear_raw_value,
                }
            }
            2364539646u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let src_addrss_of_ctrllng_dvc_fr_trns_ctrl_raw_value: u8 =
                    ((frame_payload >> 56) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_input_shaft_speed_raw_value: f64 =
                    ((frame_payload >> 40) & 65535) as f64 * 0.125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let progressive_shift_disable_raw_value: u8 = ((frame_payload >> 34) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_momentary_overspeed_enable_raw_value: u8 =
                    ((frame_payload >> 32) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let percent_clutch_slip_raw_value: f64 = ((frame_payload >> 24) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_output_shaft_speed_raw_value: f64 =
                    ((frame_payload >> 8) & 65535) as f64 * 0.125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_shift_in_process_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let torque_converter_lockup_engaged_raw_value: u8 =
                    ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_driveline_engaged_raw_value: u8 = (frame_payload & 3) as u8;
                let progressive_shift_disable =
                    ProgressiveShiftDisable2364539646::from(progressive_shift_disable_raw_value);
                let eng_momentary_overspeed_enable = EngMomentaryOverspeedEnable2364539646::from(
                    eng_momentary_overspeed_enable_raw_value,
                );
                let trans_shift_in_process =
                    TransShiftInProcess2364539646::from(trans_shift_in_process_raw_value);
                let torque_converter_lockup_engaged = TorqueConverterLockupEngaged2364539646::from(
                    torque_converter_lockup_engaged_raw_value,
                );
                let trans_driveline_engaged =
                    TransDrivelineEngaged2364539646::from(trans_driveline_engaged_raw_value);
                DecodedFrame::Etc1 {
                    src_addrss_of_ctrllng_dvc_fr_trns_ctrl_raw_value,
                    trans_input_shaft_speed_raw_value,
                    progressive_shift_disable_raw_value,
                    eng_momentary_overspeed_enable_raw_value,
                    percent_clutch_slip_raw_value,
                    trans_output_shaft_speed_raw_value,
                    trans_shift_in_process_raw_value,
                    torque_converter_lockup_engaged_raw_value,
                    trans_driveline_engaged_raw_value,
                    progressive_shift_disable,
                    eng_momentary_overspeed_enable,
                    trans_shift_in_process,
                    torque_converter_lockup_engaged,
                    trans_driveline_engaged,
                }
            }
            2566810110u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_charge_air_cooler_outlet_temp_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_coolant_temp_hi_res_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intk_vlv_actation_system_oil_temp_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intake_manifold1_air_temp_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.03125 + -273.0;
                DecodedFrame::Et3 {
                    eng_charge_air_cooler_outlet_temp_raw_value,
                    eng_coolant_temp_hi_res_raw_value,
                    eng_intk_vlv_actation_system_oil_temp_raw_value,
                    eng_intake_manifold1_air_temp_raw_value,
                }
            }
            2566825214u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhaust_gas_recirculation_temp_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhst_gs_rcirculation_diff_press_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.0078125 + -250.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_ecu_temp_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_oil_temp2_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.03125 + -273.0;
                DecodedFrame::Et2 {
                    eng_exhaust_gas_recirculation_temp_raw_value,
                    eng_exhst_gs_rcirculation_diff_press_raw_value,
                    eng_ecu_temp_raw_value,
                    eng_oil_temp2_raw_value,
                }
            }
            2566844158u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intercooler_thermostat_opening_raw_value: f64 =
                    ((frame_payload >> 56) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intercooler_temp_raw_value: f64 =
                    ((frame_payload >> 48) & 255) as f64 + -40.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo_oil_temp_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_oil_temp1_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_fuel_temp_raw_value: f64 = ((frame_payload >> 8) & 255) as f64 + -40.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_coolant_temp_raw_value: f64 = (frame_payload & 255) as f64 + -40.0;
                DecodedFrame::Et1 {
                    eng_intercooler_thermostat_opening_raw_value,
                    eng_intercooler_temp_raw_value,
                    eng_turbo_oil_temp_raw_value,
                    eng_oil_temp1_raw_value,
                    eng_fuel_temp_raw_value,
                    eng_coolant_temp_raw_value,
                }
            }
            2566785022u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhst_exhst_gs_temp_left_manifold_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhst_exhst_gs_tmp_right_manifold_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.03125 + -273.0;
                DecodedFrame::Et {
                    eng_exhst_exhst_gs_temp_left_manifold_raw_value,
                    eng_exhst_exhst_gs_tmp_right_manifold_raw_value,
                }
            }
            2565868542u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let sterable_lift_axle_lowering_inhibit_raw_value: u8 =
                    ((frame_payload >> 28) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let axle_location_raw_value: u8 = ((frame_payload >> 16) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let type_of_steer_trans_raw_value: u8 = ((frame_payload >> 40) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let type_of_steer_forces_raw_value: u8 = ((frame_payload >> 36) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let steer_type_raw_value: u8 = ((frame_payload >> 32) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let status_of_steer_axle_raw_value: u8 = ((frame_payload >> 24) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let actual_inner_wheel_steer_angle_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.00390625 + -125.0;
                let sterable_lift_axle_lowering_inhibit =
                    SterableLiftAxleLoweringInhibit2565868542::from(
                        sterable_lift_axle_lowering_inhibit_raw_value,
                    );
                let type_of_steer_trans =
                    TypeOfSteerTrans2565868542::from(type_of_steer_trans_raw_value);
                let type_of_steer_forces =
                    TypeOfSteerForces2565868542::from(type_of_steer_forces_raw_value);
                let steer_type = SteerType2565868542::from(steer_type_raw_value);
                let status_of_steer_axle =
                    StatusOfSteerAxle2565868542::from(status_of_steer_axle_raw_value);
                DecodedFrame::Esc1 {
                    sterable_lift_axle_lowering_inhibit_raw_value,
                    axle_location_raw_value,
                    type_of_steer_trans_raw_value,
                    type_of_steer_forces_raw_value,
                    steer_type_raw_value,
                    status_of_steer_axle_raw_value,
                    actual_inner_wheel_steer_angle_raw_value,
                    sterable_lift_axle_lowering_inhibit,
                    type_of_steer_trans,
                    type_of_steer_forces,
                    steer_type,
                    status_of_steer_axle,
                }
            }
            2633941758u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_output_retarder_raw_value: u8 = (frame_payload & 3) as u8;
                let trans_output_retarder =
                    TransOutputRetarder2633941758::from(trans_output_retarder_raw_value);
                DecodedFrame::Erc2 {
                    trans_output_retarder_raw_value,
                    trans_output_retarder,
                }
            }
            2565865726u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let retarder_selection_non_eng_raw_value: f64 =
                    ((frame_payload >> 48) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let actl_mx_avlbl_rtarder_percent_torque_raw_value: f64 =
                    ((frame_payload >> 56) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let drvrs_dmand_retarder_percent_torque_raw_value: f64 =
                    ((frame_payload >> 40) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let src_addrss_of_ctrllng_dvc_fr_rtrdr_ctrl_raw_value: u8 =
                    ((frame_payload >> 32) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let retarder_rqing_brake_light_raw_value: u8 = ((frame_payload >> 26) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_coolant_load_increase_raw_value: u8 = ((frame_payload >> 24) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let intended_retarder_percent_torque_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let actual_retarder_percent_torque_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let retarder_enable_shift_assist_switch_raw_value: u8 =
                    ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let retarder_enable_brake_assist_switch_raw_value: u8 =
                    ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let retarder_torque_mode_raw_value: u8 = (frame_payload & 15) as u8;
                let eng_coolant_load_increase =
                    EngCoolantLoadIncrease2565865726::from(eng_coolant_load_increase_raw_value);
                let retarder_enable_shift_assist_switch =
                    RetarderEnableShiftAssistSwitch2565865726::from(
                        retarder_enable_shift_assist_switch_raw_value,
                    );
                let retarder_enable_brake_assist_switch =
                    RetarderEnableBrakeAssistSwitch2565865726::from(
                        retarder_enable_brake_assist_switch_raw_value,
                    );
                DecodedFrame::Erc1 {
                    retarder_selection_non_eng_raw_value,
                    actl_mx_avlbl_rtarder_percent_torque_raw_value,
                    drvrs_dmand_retarder_percent_torque_raw_value,
                    src_addrss_of_ctrllng_dvc_fr_rtrdr_ctrl_raw_value,
                    retarder_rqing_brake_light_raw_value,
                    eng_coolant_load_increase_raw_value,
                    intended_retarder_percent_torque_raw_value,
                    actual_retarder_percent_torque_raw_value,
                    retarder_enable_shift_assist_switch_raw_value,
                    retarder_enable_brake_assist_switch_raw_value,
                    retarder_torque_mode_raw_value,
                    eng_coolant_load_increase,
                    retarder_enable_shift_assist_switch,
                    retarder_enable_brake_assist_switch,
                }
            }
            2633932798u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhaust_gas_port20_temp_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhaust_gas_port19_temp_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhaust_gas_port18_temp_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhaust_gas_port17_temp_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.03125 + -273.0;
                DecodedFrame::Ept5 {
                    eng_exhaust_gas_port20_temp_raw_value,
                    eng_exhaust_gas_port19_temp_raw_value,
                    eng_exhaust_gas_port18_temp_raw_value,
                    eng_exhaust_gas_port17_temp_raw_value,
                }
            }
            2566824190u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhaust_gas_port16_temp_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhaust_gas_port15_temp_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhaust_gas_port14_temp_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhaust_gas_port13_temp_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.03125 + -273.0;
                DecodedFrame::Ept4 {
                    eng_exhaust_gas_port16_temp_raw_value,
                    eng_exhaust_gas_port15_temp_raw_value,
                    eng_exhaust_gas_port14_temp_raw_value,
                    eng_exhaust_gas_port13_temp_raw_value,
                }
            }
            2633933310u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhaust_gas_port12_temp_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhaust_gas_port11_temp_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhaust_gas_port10_temp_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhaust_gas_port9_temp_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.03125 + -273.0;
                DecodedFrame::Ept3 {
                    eng_exhaust_gas_port12_temp_raw_value,
                    eng_exhaust_gas_port11_temp_raw_value,
                    eng_exhaust_gas_port10_temp_raw_value,
                    eng_exhaust_gas_port9_temp_raw_value,
                }
            }
            2633933566u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhaust_gas_port8_temp_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhaust_gas_port7_temp_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhaust_gas_port6_temp_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhaust_gas_port5_temp_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.03125 + -273.0;
                DecodedFrame::Ept2 {
                    eng_exhaust_gas_port8_temp_raw_value,
                    eng_exhaust_gas_port7_temp_raw_value,
                    eng_exhaust_gas_port6_temp_raw_value,
                    eng_exhaust_gas_port5_temp_raw_value,
                }
            }
            2633933822u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhaust_gas_port4_temp_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhaust_gas_port3_temp_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhaust_gas_port2_temp_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhaust_gas_port1_temp_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.03125 + -273.0;
                DecodedFrame::Ept1 {
                    eng_exhaust_gas_port4_temp_raw_value,
                    eng_exhaust_gas_port3_temp_raw_value,
                    eng_exhaust_gas_port2_temp_raw_value,
                    eng_exhaust_gas_port1_temp_raw_value,
                }
            }
            2566776062u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let payload_percentage_raw_value: u8 = (frame_payload & 255) as u8;
                DecodedFrame::Epd {
                    payload_percentage_raw_value,
                }
            }
            2566771454u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let data_memory_usage_raw_value: f64 = ((frame_payload >> 16) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let keep_alive_battery_consumption_raw_value: u16 = (frame_payload & 65535) as u16;
                DecodedFrame::Ep {
                    data_memory_usage_raw_value,
                    keep_alive_battery_consumption_raw_value,
                }
            }
            2566775806u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let travel_velocity_ctrl_pos_raw_value: f64 = (frame_payload & 255) as f64 + -125.0;
                DecodedFrame::Eoac {
                    travel_velocity_ctrl_pos_raw_value,
                }
            }
            2633935358u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhst_gs_oxygn_snsr_clsd_lp_oprton_raw_value: u8 =
                    ((frame_payload >> 62) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhst_gs_oxygn_snsr_flng_crrction_raw_value: f64 =
                    ((frame_payload >> 48) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_actual_exhaust_oxygen_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.0025;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_desired_exhaust_oxygen_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.0025;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_desired_rated_exhaust_oxygen_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.0025;
                let eng_exhst_gs_oxygn_snsr_clsd_lp_oprton =
                    EngExhstGsOxygnSnsrClsdLpOprton2633935358::from(
                        eng_exhst_gs_oxygn_snsr_clsd_lp_oprton_raw_value,
                    );
                DecodedFrame::Eo1 {
                    eng_exhst_gs_oxygn_snsr_clsd_lp_oprton_raw_value,
                    eng_exhst_gs_oxygn_snsr_flng_crrction_raw_value,
                    eng_actual_exhaust_oxygen_raw_value,
                    eng_desired_exhaust_oxygen_raw_value,
                    eng_desired_rated_exhaust_oxygen_raw_value,
                    eng_exhst_gs_oxygn_snsr_clsd_lp_oprton,
                }
            }
            2365447166u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck3_grip_x_axis_detent_pos_status_raw_value: u8 =
                    ((frame_payload >> 54) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck3_grip_y_axis_detent_pos_status_raw_value: u8 =
                    ((frame_payload >> 52) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck3_theta_axis_detent_pos_status_raw_value: u8 =
                    ((frame_payload >> 50) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick3_theta_axis_pos_raw_value: f64 =
                    ((frame_payload >> 38) & 1023) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck3_tht_axs_clckws_pstv_ps_status_raw_value: u8 =
                    ((frame_payload >> 36) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck3_tht_axs_cntr_clckws_ngtv_ps_stt_raw_value: u8 =
                    ((frame_payload >> 34) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck3_thta_axis_neutral_pos_status_raw_value: u8 =
                    ((frame_payload >> 32) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick3_grip_y_axis_pos_raw_value: f64 =
                    ((frame_payload >> 22) & 1023) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck3_grp_y_axs_lvr_frwrd_pstv_ps_stts_raw_value: u8 =
                    ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck3_grp_y_axs_lvr_bck_ngtv_ps_sttus_raw_value: u8 =
                    ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck3_grp_y_axis_neutral_pos_status_raw_value: u8 =
                    ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick3_grip_x_axis_pos_raw_value: f64 =
                    ((frame_payload >> 6) & 1023) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck3_grp_x_axs_lvr_rght_pstv_ps_stts_raw_value: u8 =
                    ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck3_grp_x_axs_lvr_lft_ngtv_ps_sttus_raw_value: u8 =
                    ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck3_grp_x_axis_neutral_pos_status_raw_value: u8 = (frame_payload & 3) as u8;
                let jystck3_grip_x_axis_detent_pos_status =
                    Jystck3GripXAxisDetentPosStatus2365447166::from(
                        jystck3_grip_x_axis_detent_pos_status_raw_value,
                    );
                let jystck3_grip_y_axis_detent_pos_status =
                    Jystck3GripYAxisDetentPosStatus2365447166::from(
                        jystck3_grip_y_axis_detent_pos_status_raw_value,
                    );
                let jystck3_theta_axis_detent_pos_status =
                    Jystck3ThetaAxisDetentPosStatus2365447166::from(
                        jystck3_theta_axis_detent_pos_status_raw_value,
                    );
                let jystck3_tht_axs_clckws_pstv_ps_status =
                    Jystck3ThtAxsClckwsPstvPsStatus2365447166::from(
                        jystck3_tht_axs_clckws_pstv_ps_status_raw_value,
                    );
                let jystck3_tht_axs_cntr_clckws_ngtv_ps_stt =
                    Jystck3ThtAxsCntrClckwsNgtvPsStt2365447166::from(
                        jystck3_tht_axs_cntr_clckws_ngtv_ps_stt_raw_value,
                    );
                let jystck3_thta_axis_neutral_pos_status =
                    Jystck3ThtaAxisNeutralPosStatus2365447166::from(
                        jystck3_thta_axis_neutral_pos_status_raw_value,
                    );
                let jystck3_grp_y_axs_lvr_frwrd_pstv_ps_stts =
                    Jystck3GrpYAxsLvrFrwrdPstvPsStts2365447166::from(
                        jystck3_grp_y_axs_lvr_frwrd_pstv_ps_stts_raw_value,
                    );
                let jystck3_grp_y_axs_lvr_bck_ngtv_ps_sttus =
                    Jystck3GrpYAxsLvrBckNgtvPsSttus2365447166::from(
                        jystck3_grp_y_axs_lvr_bck_ngtv_ps_sttus_raw_value,
                    );
                let jystck3_grp_y_axis_neutral_pos_status =
                    Jystck3GrpYAxisNeutralPosStatus2365447166::from(
                        jystck3_grp_y_axis_neutral_pos_status_raw_value,
                    );
                let jystck3_grp_x_axs_lvr_rght_pstv_ps_stts =
                    Jystck3GrpXAxsLvrRghtPstvPsStts2365447166::from(
                        jystck3_grp_x_axs_lvr_rght_pstv_ps_stts_raw_value,
                    );
                let jystck3_grp_x_axs_lvr_lft_ngtv_ps_sttus =
                    Jystck3GrpXAxsLvrLftNgtvPsSttus2365447166::from(
                        jystck3_grp_x_axs_lvr_lft_ngtv_ps_sttus_raw_value,
                    );
                let jystck3_grp_x_axis_neutral_pos_status =
                    Jystck3GrpXAxisNeutralPosStatus2365447166::from(
                        jystck3_grp_x_axis_neutral_pos_status_raw_value,
                    );
                DecodedFrame::Ejm3 {
                    jystck3_grip_x_axis_detent_pos_status_raw_value,
                    jystck3_grip_y_axis_detent_pos_status_raw_value,
                    jystck3_theta_axis_detent_pos_status_raw_value,
                    joystick3_theta_axis_pos_raw_value,
                    jystck3_tht_axs_clckws_pstv_ps_status_raw_value,
                    jystck3_tht_axs_cntr_clckws_ngtv_ps_stt_raw_value,
                    jystck3_thta_axis_neutral_pos_status_raw_value,
                    joystick3_grip_y_axis_pos_raw_value,
                    jystck3_grp_y_axs_lvr_frwrd_pstv_ps_stts_raw_value,
                    jystck3_grp_y_axs_lvr_bck_ngtv_ps_sttus_raw_value,
                    jystck3_grp_y_axis_neutral_pos_status_raw_value,
                    joystick3_grip_x_axis_pos_raw_value,
                    jystck3_grp_x_axs_lvr_rght_pstv_ps_stts_raw_value,
                    jystck3_grp_x_axs_lvr_lft_ngtv_ps_sttus_raw_value,
                    jystck3_grp_x_axis_neutral_pos_status_raw_value,
                    jystck3_grip_x_axis_detent_pos_status,
                    jystck3_grip_y_axis_detent_pos_status,
                    jystck3_theta_axis_detent_pos_status,
                    jystck3_tht_axs_clckws_pstv_ps_status,
                    jystck3_tht_axs_cntr_clckws_ngtv_ps_stt,
                    jystck3_thta_axis_neutral_pos_status,
                    jystck3_grp_y_axs_lvr_frwrd_pstv_ps_stts,
                    jystck3_grp_y_axs_lvr_bck_ngtv_ps_sttus,
                    jystck3_grp_y_axis_neutral_pos_status,
                    jystck3_grp_x_axs_lvr_rght_pstv_ps_stts,
                    jystck3_grp_x_axs_lvr_lft_ngtv_ps_sttus,
                    jystck3_grp_x_axis_neutral_pos_status,
                }
            }
            2365446654u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck2_grip_x_axis_detent_pos_status_raw_value: u8 =
                    ((frame_payload >> 54) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck2_grip_y_axis_detent_pos_status_raw_value: u8 =
                    ((frame_payload >> 52) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck2_theta_axis_detent_pos_status_raw_value: u8 =
                    ((frame_payload >> 50) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick2_theta_axis_pos_raw_value: f64 =
                    ((frame_payload >> 38) & 1023) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck2_tht_axs_clckws_pstv_ps_status_raw_value: u8 =
                    ((frame_payload >> 36) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck2_tht_axs_cntr_clckws_ngtv_ps_stt_raw_value: u8 =
                    ((frame_payload >> 34) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck2_thta_axis_neutral_pos_status_raw_value: u8 =
                    ((frame_payload >> 32) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick2_grip_y_axis_pos_raw_value: f64 =
                    ((frame_payload >> 22) & 1023) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck2_grp_y_axs_lvr_frwrd_pstv_ps_stts_raw_value: u8 =
                    ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck2_grp_y_axs_lvr_bck_ngtv_ps_sttus_raw_value: u8 =
                    ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck2_grp_y_axis_neutral_pos_status_raw_value: u8 =
                    ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick2_grip_x_axis_pos_raw_value: f64 =
                    ((frame_payload >> 6) & 1023) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck2_grp_x_axs_lvr_rght_pstv_ps_stts_raw_value: u8 =
                    ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck2_grp_x_axs_lvr_lft_ngtv_ps_sttus_raw_value: u8 =
                    ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck2_grp_x_axis_neutral_pos_status_raw_value: u8 = (frame_payload & 3) as u8;
                let jystck2_grip_x_axis_detent_pos_status =
                    Jystck2GripXAxisDetentPosStatus2365446654::from(
                        jystck2_grip_x_axis_detent_pos_status_raw_value,
                    );
                let jystck2_grip_y_axis_detent_pos_status =
                    Jystck2GripYAxisDetentPosStatus2365446654::from(
                        jystck2_grip_y_axis_detent_pos_status_raw_value,
                    );
                let jystck2_theta_axis_detent_pos_status =
                    Jystck2ThetaAxisDetentPosStatus2365446654::from(
                        jystck2_theta_axis_detent_pos_status_raw_value,
                    );
                let jystck2_tht_axs_clckws_pstv_ps_status =
                    Jystck2ThtAxsClckwsPstvPsStatus2365446654::from(
                        jystck2_tht_axs_clckws_pstv_ps_status_raw_value,
                    );
                let jystck2_tht_axs_cntr_clckws_ngtv_ps_stt =
                    Jystck2ThtAxsCntrClckwsNgtvPsStt2365446654::from(
                        jystck2_tht_axs_cntr_clckws_ngtv_ps_stt_raw_value,
                    );
                let jystck2_thta_axis_neutral_pos_status =
                    Jystck2ThtaAxisNeutralPosStatus2365446654::from(
                        jystck2_thta_axis_neutral_pos_status_raw_value,
                    );
                let jystck2_grp_y_axs_lvr_frwrd_pstv_ps_stts =
                    Jystck2GrpYAxsLvrFrwrdPstvPsStts2365446654::from(
                        jystck2_grp_y_axs_lvr_frwrd_pstv_ps_stts_raw_value,
                    );
                let jystck2_grp_y_axs_lvr_bck_ngtv_ps_sttus =
                    Jystck2GrpYAxsLvrBckNgtvPsSttus2365446654::from(
                        jystck2_grp_y_axs_lvr_bck_ngtv_ps_sttus_raw_value,
                    );
                let jystck2_grp_y_axis_neutral_pos_status =
                    Jystck2GrpYAxisNeutralPosStatus2365446654::from(
                        jystck2_grp_y_axis_neutral_pos_status_raw_value,
                    );
                let jystck2_grp_x_axs_lvr_rght_pstv_ps_stts =
                    Jystck2GrpXAxsLvrRghtPstvPsStts2365446654::from(
                        jystck2_grp_x_axs_lvr_rght_pstv_ps_stts_raw_value,
                    );
                let jystck2_grp_x_axs_lvr_lft_ngtv_ps_sttus =
                    Jystck2GrpXAxsLvrLftNgtvPsSttus2365446654::from(
                        jystck2_grp_x_axs_lvr_lft_ngtv_ps_sttus_raw_value,
                    );
                let jystck2_grp_x_axis_neutral_pos_status =
                    Jystck2GrpXAxisNeutralPosStatus2365446654::from(
                        jystck2_grp_x_axis_neutral_pos_status_raw_value,
                    );
                DecodedFrame::Ejm2 {
                    jystck2_grip_x_axis_detent_pos_status_raw_value,
                    jystck2_grip_y_axis_detent_pos_status_raw_value,
                    jystck2_theta_axis_detent_pos_status_raw_value,
                    joystick2_theta_axis_pos_raw_value,
                    jystck2_tht_axs_clckws_pstv_ps_status_raw_value,
                    jystck2_tht_axs_cntr_clckws_ngtv_ps_stt_raw_value,
                    jystck2_thta_axis_neutral_pos_status_raw_value,
                    joystick2_grip_y_axis_pos_raw_value,
                    jystck2_grp_y_axs_lvr_frwrd_pstv_ps_stts_raw_value,
                    jystck2_grp_y_axs_lvr_bck_ngtv_ps_sttus_raw_value,
                    jystck2_grp_y_axis_neutral_pos_status_raw_value,
                    joystick2_grip_x_axis_pos_raw_value,
                    jystck2_grp_x_axs_lvr_rght_pstv_ps_stts_raw_value,
                    jystck2_grp_x_axs_lvr_lft_ngtv_ps_sttus_raw_value,
                    jystck2_grp_x_axis_neutral_pos_status_raw_value,
                    jystck2_grip_x_axis_detent_pos_status,
                    jystck2_grip_y_axis_detent_pos_status,
                    jystck2_theta_axis_detent_pos_status,
                    jystck2_tht_axs_clckws_pstv_ps_status,
                    jystck2_tht_axs_cntr_clckws_ngtv_ps_stt,
                    jystck2_thta_axis_neutral_pos_status,
                    jystck2_grp_y_axs_lvr_frwrd_pstv_ps_stts,
                    jystck2_grp_y_axs_lvr_bck_ngtv_ps_sttus,
                    jystck2_grp_y_axis_neutral_pos_status,
                    jystck2_grp_x_axs_lvr_rght_pstv_ps_stts,
                    jystck2_grp_x_axs_lvr_lft_ngtv_ps_sttus,
                    jystck2_grp_x_axis_neutral_pos_status,
                }
            }
            2365446142u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck1_grip_x_axis_detent_pos_status_raw_value: u8 =
                    ((frame_payload >> 54) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck1_grip_y_axis_detent_pos_status_raw_value: u8 =
                    ((frame_payload >> 52) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck1_theta_axis_detent_pos_status_raw_value: u8 =
                    ((frame_payload >> 50) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick1_theta_axis_pos_raw_value: f64 =
                    ((frame_payload >> 38) & 1023) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck1_tht_axs_clckws_pstv_ps_status_raw_value: u8 =
                    ((frame_payload >> 36) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck1_tht_axs_cntr_clckws_ngtv_ps_stt_raw_value: u8 =
                    ((frame_payload >> 34) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck1_thta_axis_neutral_pos_status_raw_value: u8 =
                    ((frame_payload >> 32) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick1_grip_y_axis_pos_raw_value: f64 =
                    ((frame_payload >> 22) & 1023) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck1_grp_y_axs_lvr_frwrd_pstv_ps_stts_raw_value: u8 =
                    ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck1_grp_y_axs_lvr_bck_ngtv_ps_sttus_raw_value: u8 =
                    ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck1_grp_y_axis_neutral_pos_status_raw_value: u8 =
                    ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick1_grip_x_axis_pos_raw_value: f64 =
                    ((frame_payload >> 6) & 1023) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck1_grp_x_axs_lvr_rght_pstv_ps_stts_raw_value: u8 =
                    ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck1_grp_x_axs_lvr_lft_ngtv_ps_sttus_raw_value: u8 =
                    ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck1_grp_x_axis_neutral_pos_status_raw_value: u8 = (frame_payload & 3) as u8;
                let jystck1_grip_x_axis_detent_pos_status =
                    Jystck1GripXAxisDetentPosStatus2365446142::from(
                        jystck1_grip_x_axis_detent_pos_status_raw_value,
                    );
                let jystck1_grip_y_axis_detent_pos_status =
                    Jystck1GripYAxisDetentPosStatus2365446142::from(
                        jystck1_grip_y_axis_detent_pos_status_raw_value,
                    );
                let jystck1_theta_axis_detent_pos_status =
                    Jystck1ThetaAxisDetentPosStatus2365446142::from(
                        jystck1_theta_axis_detent_pos_status_raw_value,
                    );
                let jystck1_tht_axs_clckws_pstv_ps_status =
                    Jystck1ThtAxsClckwsPstvPsStatus2365446142::from(
                        jystck1_tht_axs_clckws_pstv_ps_status_raw_value,
                    );
                let jystck1_tht_axs_cntr_clckws_ngtv_ps_stt =
                    Jystck1ThtAxsCntrClckwsNgtvPsStt2365446142::from(
                        jystck1_tht_axs_cntr_clckws_ngtv_ps_stt_raw_value,
                    );
                let jystck1_thta_axis_neutral_pos_status =
                    Jystck1ThtaAxisNeutralPosStatus2365446142::from(
                        jystck1_thta_axis_neutral_pos_status_raw_value,
                    );
                let jystck1_grp_y_axs_lvr_frwrd_pstv_ps_stts =
                    Jystck1GrpYAxsLvrFrwrdPstvPsStts2365446142::from(
                        jystck1_grp_y_axs_lvr_frwrd_pstv_ps_stts_raw_value,
                    );
                let jystck1_grp_y_axs_lvr_bck_ngtv_ps_sttus =
                    Jystck1GrpYAxsLvrBckNgtvPsSttus2365446142::from(
                        jystck1_grp_y_axs_lvr_bck_ngtv_ps_sttus_raw_value,
                    );
                let jystck1_grp_y_axis_neutral_pos_status =
                    Jystck1GrpYAxisNeutralPosStatus2365446142::from(
                        jystck1_grp_y_axis_neutral_pos_status_raw_value,
                    );
                let jystck1_grp_x_axs_lvr_rght_pstv_ps_stts =
                    Jystck1GrpXAxsLvrRghtPstvPsStts2365446142::from(
                        jystck1_grp_x_axs_lvr_rght_pstv_ps_stts_raw_value,
                    );
                let jystck1_grp_x_axs_lvr_lft_ngtv_ps_sttus =
                    Jystck1GrpXAxsLvrLftNgtvPsSttus2365446142::from(
                        jystck1_grp_x_axs_lvr_lft_ngtv_ps_sttus_raw_value,
                    );
                let jystck1_grp_x_axis_neutral_pos_status =
                    Jystck1GrpXAxisNeutralPosStatus2365446142::from(
                        jystck1_grp_x_axis_neutral_pos_status_raw_value,
                    );
                DecodedFrame::Ejm1 {
                    jystck1_grip_x_axis_detent_pos_status_raw_value,
                    jystck1_grip_y_axis_detent_pos_status_raw_value,
                    jystck1_theta_axis_detent_pos_status_raw_value,
                    joystick1_theta_axis_pos_raw_value,
                    jystck1_tht_axs_clckws_pstv_ps_status_raw_value,
                    jystck1_tht_axs_cntr_clckws_ngtv_ps_stt_raw_value,
                    jystck1_thta_axis_neutral_pos_status_raw_value,
                    joystick1_grip_y_axis_pos_raw_value,
                    jystck1_grp_y_axs_lvr_frwrd_pstv_ps_stts_raw_value,
                    jystck1_grp_y_axs_lvr_bck_ngtv_ps_sttus_raw_value,
                    jystck1_grp_y_axis_neutral_pos_status_raw_value,
                    joystick1_grip_x_axis_pos_raw_value,
                    jystck1_grp_x_axs_lvr_rght_pstv_ps_stts_raw_value,
                    jystck1_grp_x_axs_lvr_lft_ngtv_ps_sttus_raw_value,
                    jystck1_grp_x_axis_neutral_pos_status_raw_value,
                    jystck1_grip_x_axis_detent_pos_status,
                    jystck1_grip_y_axis_detent_pos_status,
                    jystck1_theta_axis_detent_pos_status,
                    jystck1_tht_axs_clckws_pstv_ps_status,
                    jystck1_tht_axs_cntr_clckws_ngtv_ps_stt,
                    jystck1_thta_axis_neutral_pos_status,
                    jystck1_grp_y_axs_lvr_frwrd_pstv_ps_stts,
                    jystck1_grp_y_axs_lvr_bck_ngtv_ps_sttus,
                    jystck1_grp_y_axis_neutral_pos_status,
                    jystck1_grp_x_axs_lvr_rght_pstv_ps_stts,
                    jystck1_grp_x_axs_lvr_lft_ngtv_ps_sttus,
                    jystck1_grp_x_axis_neutral_pos_status,
                }
            }
            2633929470u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_fuel_rack_pos_raw_value: f64 = ((frame_payload >> 24) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let instantaneous_est_brake_power_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.5;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_mass_flow_raw_value: f64 = ((frame_payload >> 32) & 65535) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhaust_gas_press_raw_value: f64 =
                    ((frame_payload >> 8) & 65535) as f64 * 0.0078125 + -250.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_prefilter_oil_press_raw_value: f64 = (frame_payload & 255) as f64 * 4.0;
                DecodedFrame::Ei {
                    eng_fuel_rack_pos_raw_value,
                    instantaneous_est_brake_power_raw_value,
                    eng_mass_flow_raw_value,
                    eng_exhaust_gas_press_raw_value,
                    eng_prefilter_oil_press_raw_value,
                }
            }
            2633937406u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let total_ecu_run_time_raw_value: f64 =
                    ((frame_payload >> 32) & 4294967295) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let total_ecu_distance_raw_value: f64 = (frame_payload & 4294967295) as f64 * 0.125;
                DecodedFrame::Eh {
                    total_ecu_run_time_raw_value,
                    total_ecu_distance_raw_value,
                }
            }
            2364541694u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_inlet_air_mass_flow_rate_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhst_gs_rcrcltion_mass_flow_rate_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.05;
                DecodedFrame::Egf1 {
                    eng_inlet_air_mass_flow_rate_raw_value,
                    eng_exhst_gs_rcrcltion_mass_flow_rate_raw_value,
                }
            }
            2566810366u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_fuel_filter_suc_side_diff_press_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 * 2.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_fuel_supply_pump_inlet_press_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 * 2.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_oil_level_remote_reservoir_raw_value: f64 =
                    (frame_payload & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_waste_oil_reservoir_level_raw_value: f64 =
                    ((frame_payload >> 24) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_ventilation_status_raw_value: u8 = ((frame_payload >> 48) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_oil_priming_state_raw_value: u8 = ((frame_payload >> 42) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_oil_priming_pump_switch_raw_value: u8 = ((frame_payload >> 40) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_oil_pre_heated_state_raw_value: u8 = ((frame_payload >> 44) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_oil_filter_outlet_press_raw_value: f64 =
                    ((frame_payload >> 32) & 255) as f64 * 4.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_coolant_preheated_state_raw_value: u8 = ((frame_payload >> 46) & 3) as u8;
                let eng_waste_oil_reservoir_level = EngWasteOilReservoirLevel2566810366::from(
                    eng_waste_oil_reservoir_level_raw_value,
                );
                let eng_ventilation_status =
                    EngVentilationStatus2566810366::from(eng_ventilation_status_raw_value);
                let eng_oil_priming_state =
                    EngOilPrimingState2566810366::from(eng_oil_priming_state_raw_value);
                let eng_oil_priming_pump_switch =
                    EngOilPrimingPumpSwitch2566810366::from(eng_oil_priming_pump_switch_raw_value);
                let eng_oil_pre_heated_state =
                    EngOilPreHeatedState2566810366::from(eng_oil_pre_heated_state_raw_value);
                let eng_coolant_preheated_state =
                    EngCoolantPreheatedState2566810366::from(eng_coolant_preheated_state_raw_value);
                DecodedFrame::Efs {
                    eng_fuel_filter_suc_side_diff_press_raw_value,
                    eng_fuel_supply_pump_inlet_press_raw_value,
                    eng_oil_level_remote_reservoir_raw_value,
                    eng_waste_oil_reservoir_level_raw_value,
                    eng_ventilation_status_raw_value,
                    eng_oil_priming_state_raw_value,
                    eng_oil_priming_pump_switch_raw_value,
                    eng_oil_pre_heated_state_raw_value,
                    eng_oil_filter_outlet_press_raw_value,
                    eng_coolant_preheated_state_raw_value,
                    eng_waste_oil_reservoir_level,
                    eng_ventilation_status,
                    eng_oil_priming_state,
                    eng_oil_priming_pump_switch,
                    eng_oil_pre_heated_state,
                    eng_coolant_preheated_state,
                }
            }
            2566767102u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhst_gs_rcrculation_inlet_press_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 * 2.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_intk_vlv_acttion_system_oil_press_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.00390625;
                DecodedFrame::EflP3 {
                    eng_exhst_gs_rcrculation_inlet_press_raw_value,
                    eng_intk_vlv_acttion_system_oil_press_raw_value,
                }
            }
            2566839294u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_injector_metering_rail2_press_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.00390625;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_injector_timing_rail1_press_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.00390625;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_injector_metering_rail1_press_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.00390625;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_injection_ctrl_press_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.00390625;
                DecodedFrame::EflP2 {
                    eng_injector_metering_rail2_press_raw_value,
                    eng_injector_timing_rail1_press_raw_value,
                    eng_injector_metering_rail1_press_raw_value,
                    eng_injection_ctrl_press_raw_value,
                }
            }
            2566844414u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_coolant_level_raw_value: f64 = ((frame_payload >> 56) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_coolant_press_raw_value: f64 = ((frame_payload >> 48) & 255) as f64 * 2.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_crankcase_press_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.0078125 + -250.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_oil_press_raw_value: f64 = ((frame_payload >> 24) & 255) as f64 * 4.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_oil_level_raw_value: f64 = ((frame_payload >> 16) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_ex_crankcase_blowby_press_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_fuel_delivery_press_raw_value: f64 = (frame_payload & 255) as f64 * 4.0;
                DecodedFrame::EflP1 {
                    eng_coolant_level_raw_value,
                    eng_coolant_press_raw_value,
                    eng_crankcase_press_raw_value,
                    eng_oil_press_raw_value,
                    eng_oil_level_raw_value,
                    eng_ex_crankcase_blowby_press_raw_value,
                    eng_fuel_delivery_press_raw_value,
                }
            }
            2633929726u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let turning_gear_engaged_raw_value: u8 = ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let safety_wire_status_raw_value: u8 = ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let electrical_load_raw_value: f64 = (frame_payload & 65535) as f64 * 0.5;
                let turning_gear_engaged =
                    TurningGearEngaged2633929726::from(turning_gear_engaged_raw_value);
                let safety_wire_status =
                    SafetyWireStatus2633929726::from(safety_wire_status_raw_value);
                DecodedFrame::Ees {
                    turning_gear_engaged_raw_value,
                    safety_wire_status_raw_value,
                    electrical_load_raw_value,
                    turning_gear_engaged,
                    safety_wire_status,
                }
            }
            2566772222u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_vrbl_gometry_turbo1_actuator_pos_raw_value: f64 =
                    ((frame_payload >> 56) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_vrbl_gmtry_trb_ar_ctrl_shtff_valve_raw_value: u8 =
                    ((frame_payload >> 48) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_exhst_gs_rcirculation_valve_ctrl_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.0025;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_trb1_clclted_turbine_outlet_temp_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_trb1_clclated_turbine_inlet_temp_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.03125 + -273.0;
                let eng_vrbl_gmtry_trb_ar_ctrl_shtff_valve =
                    EngVrblGmtryTrbArCtrlShtffValve2566772222::from(
                        eng_vrbl_gmtry_trb_ar_ctrl_shtff_valve_raw_value,
                    );
                DecodedFrame::Eec5 {
                    eng_vrbl_gometry_turbo1_actuator_pos_raw_value,
                    eng_vrbl_gmtry_trb_ar_ctrl_shtff_valve_raw_value,
                    eng_exhst_gs_rcirculation_valve_ctrl_raw_value,
                    eng_trb1_clclted_turbine_outlet_temp_raw_value,
                    eng_trb1_clclated_turbine_inlet_temp_raw_value,
                    eng_vrbl_gmtry_trb_ar_ctrl_shtff_valve,
                }
            }
            2633940734u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_rotation_direction_raw_value: u8 = ((frame_payload >> 32) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let crnk_attmpt_cnt_on_prsnt_strt_attempt_raw_value: u8 =
                    ((frame_payload >> 40) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_rated_speed_raw_value: f64 = ((frame_payload >> 16) & 65535) as f64 * 0.125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_rated_power_raw_value: f64 = (frame_payload & 65535) as f64 * 0.5;
                let eng_rotation_direction =
                    EngRotationDirection2633940734::from(eng_rotation_direction_raw_value);
                DecodedFrame::Eec4 {
                    eng_rotation_direction_raw_value,
                    crnk_attmpt_cnt_on_prsnt_strt_attempt_raw_value,
                    eng_rated_speed_raw_value,
                    eng_rated_power_raw_value,
                    eng_rotation_direction,
                }
            }
            2566840318u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let exhaust_gas_mass_raw_value: f64 = ((frame_payload >> 40) & 65535) as f64 * 2.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftr_trtmnt_intake_dew_point_message_raw_value: u8 =
                    ((frame_payload >> 56) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftr_trtmnt_exhust_dew_point_message_raw_value: u8 =
                    ((frame_payload >> 58) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let est_eng_prstic_losses_percent_torque_raw_value: f64 =
                    ((frame_payload >> 32) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let engs_dsrd_oprtng_spd_asymmtry_adjstmn_raw_value: u8 =
                    ((frame_payload >> 24) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let engs_desired_operating_speed_raw_value: f64 =
                    ((frame_payload >> 8) & 65535) as f64 * 0.125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let nominal_friction_percent_torque_raw_value: f64 =
                    (frame_payload & 255) as f64 + -125.0;
                DecodedFrame::Eec3 {
                    exhaust_gas_mass_raw_value,
                    aftr_trtmnt_intake_dew_point_message_raw_value,
                    aftr_trtmnt_exhust_dew_point_message_raw_value,
                    est_eng_prstic_losses_percent_torque_raw_value,
                    engs_dsrd_oprtng_spd_asymmtry_adjstmn_raw_value,
                    engs_desired_operating_speed_raw_value,
                    nominal_friction_percent_torque_raw_value,
                }
            }
            2364539902u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let act_max_avail_eng_percent_torque_raw_value: f64 =
                    ((frame_payload >> 48) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let accel_pedal_pos2_raw_value: f64 = ((frame_payload >> 32) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vhcl_acceleration_rate_limit_status_raw_value: u8 =
                    ((frame_payload >> 40) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_percent_load_at_current_speed_raw_value: u8 =
                    ((frame_payload >> 16) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let accel_pedal2_low_idle_switch_raw_value: u8 = ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let road_speed_limit_status_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let accel_pedal_kickdown_switch_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let accel_pedal1_low_idle_switch_raw_value: u8 = (frame_payload & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let remote_accel_pedal_pos_raw_value: f64 =
                    ((frame_payload >> 24) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let accel_pedal_pos1_raw_value: f64 = ((frame_payload >> 8) & 255) as f64 * 0.4;
                let vhcl_acceleration_rate_limit_status =
                    VhclAccelerationRateLimitStatus2364539902::from(
                        vhcl_acceleration_rate_limit_status_raw_value,
                    );
                let accel_pedal2_low_idle_switch = AccelPedal2LowIdleSwitch2364539902::from(
                    accel_pedal2_low_idle_switch_raw_value,
                );
                let road_speed_limit_status =
                    RoadSpeedLimitStatus2364539902::from(road_speed_limit_status_raw_value);
                let accel_pedal_kickdown_switch =
                    AccelPedalKickdownSwitch2364539902::from(accel_pedal_kickdown_switch_raw_value);
                let accel_pedal1_low_idle_switch = AccelPedal1LowIdleSwitch2364539902::from(
                    accel_pedal1_low_idle_switch_raw_value,
                );
                DecodedFrame::Eec2 {
                    act_max_avail_eng_percent_torque_raw_value,
                    accel_pedal_pos2_raw_value,
                    vhcl_acceleration_rate_limit_status_raw_value,
                    eng_percent_load_at_current_speed_raw_value,
                    accel_pedal2_low_idle_switch_raw_value,
                    road_speed_limit_status_raw_value,
                    accel_pedal_kickdown_switch_raw_value,
                    accel_pedal1_low_idle_switch_raw_value,
                    remote_accel_pedal_pos_raw_value,
                    accel_pedal_pos1_raw_value,
                    vhcl_acceleration_rate_limit_status,
                    accel_pedal2_low_idle_switch,
                    road_speed_limit_status,
                    accel_pedal_kickdown_switch,
                    accel_pedal1_low_idle_switch,
                }
            }
            2364540158u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_demand_percent_torque_raw_value: f64 =
                    ((frame_payload >> 56) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_starter_mode_raw_value: u8 = ((frame_payload >> 48) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let src_addrss_of_ctrllng_dvc_for_eng_ctrl_raw_value: u8 =
                    ((frame_payload >> 40) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_speed_raw_value: f64 = ((frame_payload >> 24) & 65535) as f64 * 0.125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let actual_eng_percent_torque_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let drivers_demand_eng_percent_torque_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_torque_mode_raw_value: u8 = (frame_payload & 15) as u8;
                let eng_starter_mode = EngStarterMode2364540158::from(eng_starter_mode_raw_value);
                let eng_torque_mode = EngTorqueMode2364540158::from(eng_torque_mode_raw_value);
                DecodedFrame::Eec1 {
                    eng_demand_percent_torque_raw_value,
                    eng_starter_mode_raw_value,
                    src_addrss_of_ctrllng_dvc_for_eng_ctrl_raw_value,
                    eng_speed_raw_value,
                    actual_eng_percent_torque_raw_value,
                    drivers_demand_eng_percent_torque_raw_value,
                    eng_torque_mode_raw_value,
                    eng_starter_mode,
                    eng_torque_mode,
                }
            }
            2566768126u32 => DecodedFrame::Ecuid {},
            2566804734u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_min_continuous_torque_raw_value: f64 =
                    ((frame_payload >> 56) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_max_continuous_torque_raw_value: f64 =
                    ((frame_payload >> 48) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_min_continuous_rpm_raw_value: f64 =
                    ((frame_payload >> 40) & 255) as f64 * 32.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_max_continuous_rpm_raw_value: f64 =
                    ((frame_payload >> 32) & 255) as f64 * 32.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_hgh_lmt_thrshhld_fr_mn_cntns_trq_frm_raw_value: f64 =
                    ((frame_payload >> 24) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_lw_lmt_thrshld_fr_mx_trque_from_eng_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_hgh_lmt_thrshhld_fr_mn_cntns_eng_rpm_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 * 32.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_lw_lmt_thrshhld_fr_max_rpm_from_eng_raw_value: f64 =
                    (frame_payload & 255) as f64 * 32.0;
                DecodedFrame::Ect1 {
                    eng_min_continuous_torque_raw_value,
                    eng_max_continuous_torque_raw_value,
                    eng_min_continuous_rpm_raw_value,
                    eng_max_continuous_rpm_raw_value,
                    eng_hgh_lmt_thrshhld_fr_mn_cntns_trq_frm_raw_value,
                    eng_lw_lmt_thrshld_fr_mx_trque_from_eng_raw_value,
                    eng_hgh_lmt_thrshhld_fr_mn_cntns_eng_rpm_raw_value,
                    eng_lw_lmt_thrshhld_fr_max_rpm_from_eng_raw_value,
                }
            }
            2566841342u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_speed_at_point3_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_percent_torque_at_point2_raw_value: f64 =
                    ((frame_payload >> 40) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_speed_at_point2_raw_value: f64 =
                    ((frame_payload >> 24) & 65535) as f64 * 0.125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_percent_torque_at_idle_point1_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_speed_at_idle_point1_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.125;
                DecodedFrame::Ec1 {
                    eng_speed_at_point3_raw_value,
                    eng_percent_torque_at_point2_raw_value,
                    eng_speed_at_point2_raw_value,
                    eng_percent_torque_at_idle_point1_raw_value,
                    eng_speed_at_idle_point1_raw_value,
                }
            }
            2566767870u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let brake_temp_warning_raw_value: u8 = (frame_payload & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let xbr_acceleration_limit_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 * 0.1 + -12.5;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let xbr_active_ctrl_mode_raw_value: u8 = ((frame_payload >> 12) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let xbr_system_state_raw_value: u8 = ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let foundation_brake_use_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let hill_holder_mode_raw_value: u8 = ((frame_payload >> 5) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let halt_brake_mode_raw_value: u8 = ((frame_payload >> 2) & 7) as u8;
                let brake_temp_warning =
                    BrakeTempWarning2566767870::from(brake_temp_warning_raw_value);
                let xbr_active_ctrl_mode =
                    XbrActiveCtrlMode2566767870::from(xbr_active_ctrl_mode_raw_value);
                let xbr_system_state = XbrSystemState2566767870::from(xbr_system_state_raw_value);
                let foundation_brake_use =
                    FoundationBrakeUse2566767870::from(foundation_brake_use_raw_value);
                let hill_holder_mode = HillHolderMode2566767870::from(hill_holder_mode_raw_value);
                let halt_brake_mode = HaltBrakeMode2566767870::from(halt_brake_mode_raw_value);
                DecodedFrame::Ebc5 {
                    brake_temp_warning_raw_value,
                    xbr_acceleration_limit_raw_value,
                    xbr_active_ctrl_mode_raw_value,
                    xbr_system_state_raw_value,
                    foundation_brake_use_raw_value,
                    hill_holder_mode_raw_value,
                    halt_brake_mode_raw_value,
                    brake_temp_warning,
                    xbr_active_ctrl_mode,
                    xbr_system_state,
                    foundation_brake_use,
                    hill_holder_mode,
                    halt_brake_mode,
                }
            }
            2633936126u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let brk_lnng_rmnng_rear_axle3_right_wheel_raw_value: f64 =
                    ((frame_payload >> 56) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let brk_lnng_rmning_rear_axle3_left_wheel_raw_value: f64 =
                    ((frame_payload >> 48) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let brk_lnng_rmnng_rear_axle2_right_wheel_raw_value: f64 =
                    ((frame_payload >> 40) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let brk_lnng_rmning_rear_axle2_left_wheel_raw_value: f64 =
                    ((frame_payload >> 32) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let brk_lnng_rmnng_rear_axle1_right_wheel_raw_value: f64 =
                    ((frame_payload >> 24) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let brk_lnng_rmning_rear_axle1_left_wheel_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let brk_lnng_rmnng_front_axle_right_wheel_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let brk_lnng_rmning_front_axle_left_wheel_raw_value: f64 =
                    (frame_payload & 255) as f64 * 0.4;
                DecodedFrame::Ebc4 {
                    brk_lnng_rmnng_rear_axle3_right_wheel_raw_value,
                    brk_lnng_rmning_rear_axle3_left_wheel_raw_value,
                    brk_lnng_rmnng_rear_axle2_right_wheel_raw_value,
                    brk_lnng_rmning_rear_axle2_left_wheel_raw_value,
                    brk_lnng_rmnng_rear_axle1_right_wheel_raw_value,
                    brk_lnng_rmning_rear_axle1_left_wheel_raw_value,
                    brk_lnng_rmnng_front_axle_right_wheel_raw_value,
                    brk_lnng_rmning_front_axle_left_wheel_raw_value,
                }
            }
            2566827518u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let brk_app_prss_hgh_rng_rr_axl3_rght_wheel_raw_value: f64 =
                    ((frame_payload >> 56) & 255) as f64 * 5.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let brk_app_prss_hgh_rng_rr_axl3_left_wheel_raw_value: f64 =
                    ((frame_payload >> 48) & 255) as f64 * 5.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let brk_app_prss_hgh_rng_rr_axl2_rght_wheel_raw_value: f64 =
                    ((frame_payload >> 40) & 255) as f64 * 5.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let brk_app_prss_hgh_rng_rr_axl2_left_wheel_raw_value: f64 =
                    ((frame_payload >> 32) & 255) as f64 * 5.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let brk_app_prss_hgh_rng_rr_axl1_rght_wheel_raw_value: f64 =
                    ((frame_payload >> 24) & 255) as f64 * 5.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let brk_app_prss_hgh_rng_rr_axl1_left_wheel_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 * 5.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let brk_app_prss_hgh_rng_frnt_axl_rght_whel_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 * 5.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let brk_app_prss_hgh_rng_frnt_axl_lft_wheel_raw_value: f64 =
                    (frame_payload & 255) as f64 * 5.0;
                DecodedFrame::Ebc3 {
                    brk_app_prss_hgh_rng_rr_axl3_rght_wheel_raw_value,
                    brk_app_prss_hgh_rng_rr_axl3_left_wheel_raw_value,
                    brk_app_prss_hgh_rng_rr_axl2_rght_wheel_raw_value,
                    brk_app_prss_hgh_rng_rr_axl2_left_wheel_raw_value,
                    brk_app_prss_hgh_rng_rr_axl1_rght_wheel_raw_value,
                    brk_app_prss_hgh_rng_rr_axl1_left_wheel_raw_value,
                    brk_app_prss_hgh_rng_frnt_axl_rght_whel_raw_value,
                    brk_app_prss_hgh_rng_frnt_axl_lft_wheel_raw_value,
                }
            }
            2566832126u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rlative_speed_rear_axle2_right_wheel_raw_value: f64 =
                    ((frame_payload >> 56) & 255) as f64 * 0.0625 + -7.8125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let relative_speed_rear_axle2_left_wheel_raw_value: f64 =
                    ((frame_payload >> 48) & 255) as f64 * 0.0625 + -7.8125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rlative_speed_rear_axle1_right_wheel_raw_value: f64 =
                    ((frame_payload >> 40) & 255) as f64 * 0.0625 + -7.8125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let relative_speed_rear_axle1_left_wheel_raw_value: f64 =
                    ((frame_payload >> 32) & 255) as f64 * 0.0625 + -7.8125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rlative_speed_front_axle_right_wheel_raw_value: f64 =
                    ((frame_payload >> 24) & 255) as f64 * 0.0625 + -7.8125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let relative_speed_front_axle_left_wheel_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 * 0.0625 + -7.8125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let front_axle_speed_raw_value: f64 = (frame_payload & 65535) as f64 * 0.00390625;
                DecodedFrame::Ebc2 {
                    rlative_speed_rear_axle2_right_wheel_raw_value,
                    relative_speed_rear_axle2_left_wheel_raw_value,
                    rlative_speed_rear_axle1_right_wheel_raw_value,
                    relative_speed_rear_axle1_left_wheel_raw_value,
                    rlative_speed_front_axle_right_wheel_raw_value,
                    relative_speed_front_axle_left_wheel_raw_value,
                    front_axle_speed_raw_value,
                }
            }
            2565865982u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let src_addrss_of_ctrllng_dvc_fr_brk_cntrl_raw_value: u8 =
                    ((frame_payload >> 48) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let brake_pedal_pos_raw_value: f64 = ((frame_payload >> 8) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trctr_mntd_triler_abs_warning_signal_raw_value: u8 =
                    ((frame_payload >> 62) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_abs_status_raw_value: u8 = ((frame_payload >> 60) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let halt_brake_switch_raw_value: u8 = ((frame_payload >> 58) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let atc_asr_information_signal_raw_value: u8 = ((frame_payload >> 46) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let abs_ebs_amber_warning_signal_raw_value: u8 = ((frame_payload >> 44) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let ebs_red_warning_signal_raw_value: u8 = ((frame_payload >> 42) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let abs_fully_operational_raw_value: u8 = ((frame_payload >> 40) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_retarder_selection_raw_value: f64 =
                    ((frame_payload >> 32) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let remote_accel_enable_switch_raw_value: u8 = ((frame_payload >> 30) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_aux_eng_shutdown_switch_raw_value: u8 = ((frame_payload >> 28) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_derate_switch_raw_value: u8 = ((frame_payload >> 26) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let accel_interlock_switch_raw_value: u8 = ((frame_payload >> 24) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let traction_ctrl_override_switch_raw_value: u8 = ((frame_payload >> 22) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let asr_hill_holder_switch_raw_value: u8 = ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let asr_offroad_switch_raw_value: u8 = ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let abs_offroad_switch_raw_value: u8 = ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let ebs_brake_switch_raw_value: u8 = ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let anti_lock_braking_active_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let asr_brake_ctrl_active_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let asr_eng_ctrl_active_raw_value: u8 = (frame_payload & 3) as u8;
                let trctr_mntd_triler_abs_warning_signal =
                    TrctrMntdTrilerAbsWarningSignal2565865982::from(
                        trctr_mntd_triler_abs_warning_signal_raw_value,
                    );
                let trailer_abs_status =
                    TrailerAbsStatus2565865982::from(trailer_abs_status_raw_value);
                let halt_brake_switch =
                    HaltBrakeSwitch2565865982::from(halt_brake_switch_raw_value);
                let atc_asr_information_signal =
                    AtcAsrInformationSignal2565865982::from(atc_asr_information_signal_raw_value);
                let abs_ebs_amber_warning_signal = AbsEbsAmberWarningSignal2565865982::from(
                    abs_ebs_amber_warning_signal_raw_value,
                );
                let ebs_red_warning_signal =
                    EbsRedWarningSignal2565865982::from(ebs_red_warning_signal_raw_value);
                let abs_fully_operational =
                    AbsFullyOperational2565865982::from(abs_fully_operational_raw_value);
                let remote_accel_enable_switch =
                    RemoteAccelEnableSwitch2565865982::from(remote_accel_enable_switch_raw_value);
                let eng_aux_eng_shutdown_switch =
                    EngAuxEngShutdownSwitch2565865982::from(eng_aux_eng_shutdown_switch_raw_value);
                let eng_derate_switch =
                    EngDerateSwitch2565865982::from(eng_derate_switch_raw_value);
                let accel_interlock_switch =
                    AccelInterlockSwitch2565865982::from(accel_interlock_switch_raw_value);
                let traction_ctrl_override_switch = TractionCtrlOverrideSwitch2565865982::from(
                    traction_ctrl_override_switch_raw_value,
                );
                let asr_hill_holder_switch =
                    AsrHillHolderSwitch2565865982::from(asr_hill_holder_switch_raw_value);
                let asr_offroad_switch =
                    AsrOffroadSwitch2565865982::from(asr_offroad_switch_raw_value);
                let abs_offroad_switch =
                    AbsOffroadSwitch2565865982::from(abs_offroad_switch_raw_value);
                let ebs_brake_switch = EbsBrakeSwitch2565865982::from(ebs_brake_switch_raw_value);
                let anti_lock_braking_active =
                    AntiLockBrakingActive2565865982::from(anti_lock_braking_active_raw_value);
                let asr_brake_ctrl_active =
                    AsrBrakeCtrlActive2565865982::from(asr_brake_ctrl_active_raw_value);
                let asr_eng_ctrl_active =
                    AsrEngCtrlActive2565865982::from(asr_eng_ctrl_active_raw_value);
                DecodedFrame::Ebc1 {
                    src_addrss_of_ctrllng_dvc_fr_brk_cntrl_raw_value,
                    brake_pedal_pos_raw_value,
                    trctr_mntd_triler_abs_warning_signal_raw_value,
                    trailer_abs_status_raw_value,
                    halt_brake_switch_raw_value,
                    atc_asr_information_signal_raw_value,
                    abs_ebs_amber_warning_signal_raw_value,
                    ebs_red_warning_signal_raw_value,
                    abs_fully_operational_raw_value,
                    eng_retarder_selection_raw_value,
                    remote_accel_enable_switch_raw_value,
                    eng_aux_eng_shutdown_switch_raw_value,
                    eng_derate_switch_raw_value,
                    accel_interlock_switch_raw_value,
                    traction_ctrl_override_switch_raw_value,
                    asr_hill_holder_switch_raw_value,
                    asr_offroad_switch_raw_value,
                    abs_offroad_switch_raw_value,
                    ebs_brake_switch_raw_value,
                    anti_lock_braking_active_raw_value,
                    asr_brake_ctrl_active_raw_value,
                    asr_eng_ctrl_active_raw_value,
                    trctr_mntd_triler_abs_warning_signal,
                    trailer_abs_status,
                    halt_brake_switch,
                    atc_asr_information_signal,
                    abs_ebs_amber_warning_signal,
                    ebs_red_warning_signal,
                    abs_fully_operational,
                    remote_accel_enable_switch,
                    eng_aux_eng_shutdown_switch,
                    eng_derate_switch,
                    accel_interlock_switch,
                    traction_ctrl_override_switch,
                    asr_hill_holder_switch,
                    asr_offroad_switch,
                    abs_offroad_switch,
                    ebs_brake_switch,
                    anti_lock_braking_active,
                    asr_brake_ctrl_active,
                    asr_eng_ctrl_active,
                }
            }
            2565867262u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rear_axle_group_engagement_status_raw_value: u8 =
                    ((frame_payload >> 26) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let front_axle_group_engagement_status_raw_value: u8 =
                    ((frame_payload >> 24) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let diff_lock_state_central_rear_raw_value: u8 = ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let diff_lock_state_central_front_raw_value: u8 = ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let diff_lock_state_central_raw_value: u8 = ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let diff_lock_state_rear_axle2_raw_value: u8 = ((frame_payload >> 14) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let diff_lock_state_rear_axle1_raw_value: u8 = ((frame_payload >> 12) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let diff_lock_state_front_axle2_raw_value: u8 = ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let diff_lock_state_front_axle1_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let location_raw_value: u8 = (frame_payload & 255) as u8;
                let rear_axle_group_engagement_status =
                    RearAxleGroupEngagementStatus2565867262::from(
                        rear_axle_group_engagement_status_raw_value,
                    );
                let front_axle_group_engagement_status =
                    FrontAxleGroupEngagementStatus2565867262::from(
                        front_axle_group_engagement_status_raw_value,
                    );
                let diff_lock_state_central_rear = DiffLockStateCentralRear2565867262::from(
                    diff_lock_state_central_rear_raw_value,
                );
                let diff_lock_state_central_front = DiffLockStateCentralFront2565867262::from(
                    diff_lock_state_central_front_raw_value,
                );
                let diff_lock_state_central =
                    DiffLockStateCentral2565867262::from(diff_lock_state_central_raw_value);
                let diff_lock_state_rear_axle2 =
                    DiffLockStateRearAxle22565867262::from(diff_lock_state_rear_axle2_raw_value);
                let diff_lock_state_rear_axle1 =
                    DiffLockStateRearAxle12565867262::from(diff_lock_state_rear_axle1_raw_value);
                let diff_lock_state_front_axle2 =
                    DiffLockStateFrontAxle22565867262::from(diff_lock_state_front_axle2_raw_value);
                let diff_lock_state_front_axle1 =
                    DiffLockStateFrontAxle12565867262::from(diff_lock_state_front_axle1_raw_value);
                DecodedFrame::Eac1 {
                    rear_axle_group_engagement_status_raw_value,
                    front_axle_group_engagement_status_raw_value,
                    diff_lock_state_central_rear_raw_value,
                    diff_lock_state_central_front_raw_value,
                    diff_lock_state_central_raw_value,
                    diff_lock_state_rear_axle2_raw_value,
                    diff_lock_state_rear_axle1_raw_value,
                    diff_lock_state_front_axle2_raw_value,
                    diff_lock_state_front_axle1_raw_value,
                    location_raw_value,
                    rear_axle_group_engagement_status,
                    front_axle_group_engagement_status,
                    diff_lock_state_central_rear,
                    diff_lock_state_central_front,
                    diff_lock_state_central,
                    diff_lock_state_rear_axle2,
                    diff_lock_state_rear_axle1,
                    diff_lock_state_front_axle2,
                    diff_lock_state_front_axle1,
                }
            }
            2566821118u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let sea_water_pump_outlet_press_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 * 2.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_aux_coolant_temp_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 + -40.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_aux_coolant_press_raw_value: f64 = (frame_payload & 255) as f64 * 4.0;
                DecodedFrame::Eac {
                    sea_water_pump_outlet_press_raw_value,
                    eng_aux_coolant_temp_raw_value,
                    eng_aux_coolant_press_raw_value,
                }
            }
            2566810622u32 => DecodedFrame::Di {},
            2566847742u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let cargo_ambient_temp_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_oil_filter_diff_press_raw_value: f64 =
                    ((frame_payload >> 24) & 255) as f64 * 0.5;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_fuel_filter_diff_press_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 * 2.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let fuel_level_raw_value: f64 = ((frame_payload >> 8) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let washer_fluid_level_raw_value: f64 = (frame_payload & 255) as f64 * 0.4;
                DecodedFrame::Dd {
                    cargo_ambient_temp_raw_value,
                    eng_oil_filter_diff_press_raw_value,
                    eng_fuel_filter_diff_press_raw_value,
                    fuel_level_raw_value,
                    washer_fluid_level_raw_value,
                }
            }
            2566768382u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_start_enable_device2_config_raw_value: u8 =
                    ((frame_payload >> 12) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_start_enable_device1_config_raw_value: u8 =
                    ((frame_payload >> 8) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_start_enable_device2_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_start_enable_device1_raw_value: u8 = (frame_payload & 3) as u8;
                let eng_start_enable_device2_config = EngStartEnableDevice2Config2566768382::from(
                    eng_start_enable_device2_config_raw_value,
                );
                let eng_start_enable_device1_config = EngStartEnableDevice1Config2566768382::from(
                    eng_start_enable_device1_config_raw_value,
                );
                let eng_start_enable_device2 =
                    EngStartEnableDevice22566768382::from(eng_start_enable_device2_raw_value);
                let eng_start_enable_device1 =
                    EngStartEnableDevice12566768382::from(eng_start_enable_device1_raw_value);
                DecodedFrame::Csa {
                    eng_start_enable_device2_config_raw_value,
                    eng_start_enable_device1_config_raw_value,
                    eng_start_enable_device2_raw_value,
                    eng_start_enable_device1_raw_value,
                    eng_start_enable_device2_config,
                    eng_start_enable_device1_config,
                    eng_start_enable_device2,
                    eng_start_enable_device1,
                }
            }
            2566811902u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let powered_vehicle_weight_raw_value: f64 = (frame_payload & 65535) as f64 * 10.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let gross_combination_vehicle_weight_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 10.0;
                DecodedFrame::Cvw {
                    powered_vehicle_weight_raw_value,
                    gross_combination_vehicle_weight_raw_value,
                }
            }
            2563768062u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let mx_cntnuous_retarder_torque_limit_rq_raw_value: f64 =
                    ((frame_payload >> 56) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let mn_cntnuous_retarder_torque_limit_rq_raw_value: f64 =
                    ((frame_payload >> 48) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let mx_cntinuous_retarder_speed_limit_rq_raw_value: f64 =
                    ((frame_payload >> 40) & 255) as f64 * 32.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let mn_cntinuous_retarder_speed_limit_rq_raw_value: f64 =
                    ((frame_payload >> 32) & 255) as f64 * 32.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_torque_limit_rq_max_continuous_raw_value: f64 =
                    ((frame_payload >> 24) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_torque_limit_rq_min_continuous_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_speed_limit_rq_max_continuous_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 * 32.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_speed_limit_rq_min_continuous_raw_value: f64 =
                    (frame_payload & 255) as f64 * 32.0;
                DecodedFrame::Ctl {
                    mx_cntnuous_retarder_torque_limit_rq_raw_value,
                    mn_cntnuous_retarder_torque_limit_rq_raw_value,
                    mx_cntinuous_retarder_speed_limit_rq_raw_value,
                    mn_cntinuous_retarder_speed_limit_rq_raw_value,
                    eng_torque_limit_rq_max_continuous_raw_value,
                    eng_torque_limit_rq_min_continuous_raw_value,
                    eng_speed_limit_rq_max_continuous_raw_value,
                    eng_speed_limit_rq_min_continuous_raw_value,
                }
            }
            2633924862u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_average_combustion_time_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.01;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_desired_combustion_time_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.01;
                DecodedFrame::Ct6 {
                    eng_average_combustion_time_raw_value,
                    eng_desired_combustion_time_raw_value,
                }
            }
            2633924606u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl20_combustion_time_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.01;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl19_combustion_time_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.01;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl18_combustion_time_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.01;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl17_combustion_time_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.01;
                DecodedFrame::Ct5 {
                    eng_cyl20_combustion_time_raw_value,
                    eng_cyl19_combustion_time_raw_value,
                    eng_cyl18_combustion_time_raw_value,
                    eng_cyl17_combustion_time_raw_value,
                }
            }
            2633924350u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl16_combustion_time_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.01;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl15_combustion_time_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.01;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl14_combustion_time_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.01;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl13_combustion_time_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.01;
                DecodedFrame::Ct4 {
                    eng_cyl16_combustion_time_raw_value,
                    eng_cyl15_combustion_time_raw_value,
                    eng_cyl14_combustion_time_raw_value,
                    eng_cyl13_combustion_time_raw_value,
                }
            }
            2633924094u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl12_combustion_time_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.01;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl11_combustion_time_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.01;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl10_combustion_time_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.01;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl9_combustion_time_raw_value: f64 = (frame_payload & 65535) as f64 * 0.01;
                DecodedFrame::Ct3 {
                    eng_cyl12_combustion_time_raw_value,
                    eng_cyl11_combustion_time_raw_value,
                    eng_cyl10_combustion_time_raw_value,
                    eng_cyl9_combustion_time_raw_value,
                }
            }
            2633923838u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl8_combustion_time_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.01;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl7_combustion_time_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.01;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl6_combustion_time_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.01;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl5_combustion_time_raw_value: f64 = (frame_payload & 65535) as f64 * 0.01;
                DecodedFrame::Ct2 {
                    eng_cyl8_combustion_time_raw_value,
                    eng_cyl7_combustion_time_raw_value,
                    eng_cyl6_combustion_time_raw_value,
                    eng_cyl5_combustion_time_raw_value,
                }
            }
            2633923582u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl4_combustion_time_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.01;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl3_combustion_time_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.01;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl2_combustion_time_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.01;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_cyl1_combustion_time_raw_value: f64 = (frame_payload & 65535) as f64 * 0.01;
                DecodedFrame::Ct1 {
                    eng_cyl4_combustion_time_raw_value,
                    eng_cyl3_combustion_time_raw_value,
                    eng_cyl2_combustion_time_raw_value,
                    eng_cyl1_combustion_time_raw_value,
                }
            }
            2633878014u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let total_count_of_config_changes_made_raw_value: u16 =
                    (frame_payload & 65535) as u16;
                DecodedFrame::Cmi {
                    total_count_of_config_changes_made_raw_value,
                }
            }
            2566771966u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_oil_level_rq_raw_value: u8 = ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let fifth_wheel_release_ctrl_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let ffth_whl_rlase_ctrl_security_lockout_raw_value: u8 =
                    ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let transfer_case_selector_switch_raw_value: u8 = (frame_payload & 7) as u8;
                let trans_oil_level_rq =
                    TransOilLevelRq2566771966::from(trans_oil_level_rq_raw_value);
                let fifth_wheel_release_ctrl =
                    FifthWheelReleaseCtrl2566771966::from(fifth_wheel_release_ctrl_raw_value);
                let ffth_whl_rlase_ctrl_security_lockout =
                    FfthWhlRlaseCtrlSecurityLockout2566771966::from(
                        ffth_whl_rlase_ctrl_security_lockout_raw_value,
                    );
                let transfer_case_selector_switch = TransferCaseSelectorSwitch2566771966::from(
                    transfer_case_selector_switch_raw_value,
                );
                DecodedFrame::Cm3 {
                    trans_oil_level_rq_raw_value,
                    fifth_wheel_release_ctrl_raw_value,
                    ffth_whl_rlase_ctrl_security_lockout_raw_value,
                    transfer_case_selector_switch_raw_value,
                    trans_oil_level_rq,
                    fifth_wheel_release_ctrl,
                    ffth_whl_rlase_ctrl_security_lockout,
                    transfer_case_selector_switch,
                }
            }
            2564882174u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let selected_max_vehicle_speed_limit_raw_value: u8 =
                    ((frame_payload >> 56) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rq_cab_zone_heating_raw_value: u8 = ((frame_payload >> 54) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rq_eng_zone_heating_raw_value: u8 = ((frame_payload >> 52) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_heater_mode_rq_raw_value: u8 = ((frame_payload >> 48) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_automatic_start_enable_switch_raw_value: u8 =
                    ((frame_payload >> 46) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let atmatic_gear_shifting_enable_switch_raw_value: u8 =
                    ((frame_payload >> 44) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vhcl_lmtng_spd_gvernor_enable_switch_raw_value: u8 =
                    ((frame_payload >> 38) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vhcl_lmtng_spd_gvrnr_incrment_switch_raw_value: u8 =
                    ((frame_payload >> 36) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vhcl_lmtng_spd_gvrnr_dcrement_switch_raw_value: u8 =
                    ((frame_payload >> 34) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let seat_belt_switch_raw_value: u8 = ((frame_payload >> 30) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let operator_seat_direction_switch_raw_value: u8 =
                    ((frame_payload >> 28) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let battery_main_switch_hold_rq_raw_value: u8 = ((frame_payload >> 26) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_heater_coolant_pump_rq_raw_value: u8 = ((frame_payload >> 24) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let cab_interior_temp_cmd_raw_value: f64 =
                    ((frame_payload >> 8) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rqed_percent_fan_speed_raw_value: f64 = (frame_payload & 255) as f64 * 0.4;
                let rq_cab_zone_heating =
                    RqCabZoneHeating2564882174::from(rq_cab_zone_heating_raw_value);
                let rq_eng_zone_heating =
                    RqEngZoneHeating2564882174::from(rq_eng_zone_heating_raw_value);
                let aux_heater_mode_rq =
                    AuxHeaterModeRq2564882174::from(aux_heater_mode_rq_raw_value);
                let seat_belt_switch = SeatBeltSwitch2564882174::from(seat_belt_switch_raw_value);
                let operator_seat_direction_switch = OperatorSeatDirectionSwitch2564882174::from(
                    operator_seat_direction_switch_raw_value,
                );
                let battery_main_switch_hold_rq =
                    BatteryMainSwitchHoldRq2564882174::from(battery_main_switch_hold_rq_raw_value);
                let aux_heater_coolant_pump_rq =
                    AuxHeaterCoolantPumpRq2564882174::from(aux_heater_coolant_pump_rq_raw_value);
                DecodedFrame::Cm1 {
                    selected_max_vehicle_speed_limit_raw_value,
                    rq_cab_zone_heating_raw_value,
                    rq_eng_zone_heating_raw_value,
                    aux_heater_mode_rq_raw_value,
                    eng_automatic_start_enable_switch_raw_value,
                    atmatic_gear_shifting_enable_switch_raw_value,
                    vhcl_lmtng_spd_gvernor_enable_switch_raw_value,
                    vhcl_lmtng_spd_gvrnr_incrment_switch_raw_value,
                    vhcl_lmtng_spd_gvrnr_dcrement_switch_raw_value,
                    seat_belt_switch_raw_value,
                    operator_seat_direction_switch_raw_value,
                    battery_main_switch_hold_rq_raw_value,
                    aux_heater_coolant_pump_rq_raw_value,
                    cab_interior_temp_cmd_raw_value,
                    rqed_percent_fan_speed_raw_value,
                    rq_cab_zone_heating,
                    rq_eng_zone_heating,
                    aux_heater_mode_rq,
                    seat_belt_switch,
                    operator_seat_direction_switch,
                    battery_main_switch_hold_rq,
                    aux_heater_coolant_pump_rq,
                }
            }
            2563833598u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let illumination_brightness_percent_raw_value: f64 =
                    (frame_payload & 255) as f64 * 0.4;
                DecodedFrame::Cl {
                    illumination_brightness_percent_raw_value,
                }
            }
            2566843390u32 => DecodedFrame::Ci {},
            2566844926u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let park_brake_release_inhibit_rq_raw_value: u8 = ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_shutdown_override_switch_raw_value: u8 = ((frame_payload >> 62) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_test_mode_switch_raw_value: u8 = ((frame_payload >> 60) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_idle_decrement_switch_raw_value: u8 = ((frame_payload >> 58) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_idle_increment_switch_raw_value: u8 = ((frame_payload >> 56) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let cruise_ctrl_states_raw_value: u8 = ((frame_payload >> 53) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let pto_state_raw_value: u8 = ((frame_payload >> 48) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let cruise_ctrl_set_speed_raw_value: u8 = ((frame_payload >> 40) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let cruise_ctrl_accelerate_switch_raw_value: u8 = ((frame_payload >> 38) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let cruise_ctrl_resume_switch_raw_value: u8 = ((frame_payload >> 36) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let cruise_ctrl_coast_switch_raw_value: u8 = ((frame_payload >> 34) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let cruise_ctrl_set_switch_raw_value: u8 = ((frame_payload >> 32) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let clutch_switch_raw_value: u8 = ((frame_payload >> 30) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let brake_switch_raw_value: u8 = ((frame_payload >> 28) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let cruise_ctrl_enable_switch_raw_value: u8 = ((frame_payload >> 26) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let cruise_ctrl_active_raw_value: u8 = ((frame_payload >> 24) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let wheel_based_vehicle_speed_raw_value: f64 =
                    ((frame_payload >> 8) & 65535) as f64 * 0.00390625;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let cruise_ctrl_pause_switch_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let parking_brake_switch_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let two_speed_axle_switch_raw_value: u8 = (frame_payload & 3) as u8;
                let park_brake_release_inhibit_rq = ParkBrakeReleaseInhibitRq2566844926::from(
                    park_brake_release_inhibit_rq_raw_value,
                );
                let eng_shutdown_override_switch = EngShutdownOverrideSwitch2566844926::from(
                    eng_shutdown_override_switch_raw_value,
                );
                let eng_test_mode_switch =
                    EngTestModeSwitch2566844926::from(eng_test_mode_switch_raw_value);
                let eng_idle_decrement_switch =
                    EngIdleDecrementSwitch2566844926::from(eng_idle_decrement_switch_raw_value);
                let eng_idle_increment_switch =
                    EngIdleIncrementSwitch2566844926::from(eng_idle_increment_switch_raw_value);
                let cruise_ctrl_accelerate_switch = CruiseCtrlAccelerateSwitch2566844926::from(
                    cruise_ctrl_accelerate_switch_raw_value,
                );
                let cruise_ctrl_resume_switch =
                    CruiseCtrlResumeSwitch2566844926::from(cruise_ctrl_resume_switch_raw_value);
                let cruise_ctrl_coast_switch =
                    CruiseCtrlCoastSwitch2566844926::from(cruise_ctrl_coast_switch_raw_value);
                let cruise_ctrl_set_switch =
                    CruiseCtrlSetSwitch2566844926::from(cruise_ctrl_set_switch_raw_value);
                let clutch_switch = ClutchSwitch2566844926::from(clutch_switch_raw_value);
                let brake_switch = BrakeSwitch2566844926::from(brake_switch_raw_value);
                let cruise_ctrl_enable_switch =
                    CruiseCtrlEnableSwitch2566844926::from(cruise_ctrl_enable_switch_raw_value);
                let cruise_ctrl_active =
                    CruiseCtrlActive2566844926::from(cruise_ctrl_active_raw_value);
                let cruise_ctrl_pause_switch =
                    CruiseCtrlPauseSwitch2566844926::from(cruise_ctrl_pause_switch_raw_value);
                let parking_brake_switch =
                    ParkingBrakeSwitch2566844926::from(parking_brake_switch_raw_value);
                let two_speed_axle_switch =
                    TwoSpeedAxleSwitch2566844926::from(two_speed_axle_switch_raw_value);
                DecodedFrame::Ccvs {
                    park_brake_release_inhibit_rq_raw_value,
                    eng_shutdown_override_switch_raw_value,
                    eng_test_mode_switch_raw_value,
                    eng_idle_decrement_switch_raw_value,
                    eng_idle_increment_switch_raw_value,
                    cruise_ctrl_states_raw_value,
                    pto_state_raw_value,
                    cruise_ctrl_set_speed_raw_value,
                    cruise_ctrl_accelerate_switch_raw_value,
                    cruise_ctrl_resume_switch_raw_value,
                    cruise_ctrl_coast_switch_raw_value,
                    cruise_ctrl_set_switch_raw_value,
                    clutch_switch_raw_value,
                    brake_switch_raw_value,
                    cruise_ctrl_enable_switch_raw_value,
                    cruise_ctrl_active_raw_value,
                    wheel_based_vehicle_speed_raw_value,
                    cruise_ctrl_pause_switch_raw_value,
                    parking_brake_switch_raw_value,
                    two_speed_axle_switch_raw_value,
                    park_brake_release_inhibit_rq,
                    eng_shutdown_override_switch,
                    eng_test_mode_switch,
                    eng_idle_decrement_switch,
                    eng_idle_increment_switch,
                    cruise_ctrl_accelerate_switch,
                    cruise_ctrl_resume_switch,
                    cruise_ctrl_coast_switch,
                    cruise_ctrl_set_switch,
                    clutch_switch,
                    brake_switch,
                    cruise_ctrl_enable_switch,
                    cruise_ctrl_active,
                    cruise_ctrl_pause_switch,
                    parking_brake_switch,
                    two_speed_axle_switch,
                }
            }
            2566843902u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let cruise_ctrl_low_set_limit_speed_raw_value: u8 =
                    ((frame_payload >> 16) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let cruise_ctrl_high_set_limit_speed_raw_value: u8 =
                    ((frame_payload >> 8) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let max_vehicle_speed_limit_raw_value: u8 = (frame_payload & 255) as u8;
                DecodedFrame::Ccss {
                    cruise_ctrl_low_set_limit_speed_raw_value,
                    cruise_ctrl_high_set_limit_speed_raw_value,
                    max_vehicle_speed_limit_raw_value,
                }
            }
            2566809598u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_heater_max_output_power_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 2.0;
                DecodedFrame::Ccc {
                    aux_heater_max_output_power_raw_value,
                }
            }
            2633940222u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trip_compression_brake_distance_raw_value: f64 =
                    ((frame_payload >> 32) & 4294967295) as f64 * 0.125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let total_compression_brake_distance_raw_value: f64 =
                    (frame_payload & 4294967295) as f64 * 0.125;
                DecodedFrame::Cbi {
                    trip_compression_brake_distance_raw_value,
                    total_compression_brake_distance_raw_value,
                }
            }
            2566775294u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let cb_a_c_rfrgrnt_cmprssor_outlet_press_raw_value: f64 =
                    (frame_payload & 255) as f64 * 16.0;
                DecodedFrame::Caci {
                    cb_a_c_rfrgrnt_cmprssor_outlet_press_raw_value,
                }
            }
            2566803710u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let battery2_temp_raw_value: f64 = ((frame_payload >> 8) & 255) as f64 + -40.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let battery1_temp_raw_value: f64 = (frame_payload & 255) as f64 + -40.0;
                DecodedFrame::Bt1 {
                    battery2_temp_raw_value,
                    battery1_temp_raw_value,
                }
            }
            2566809342u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let battery_main_switch_hold_state_raw_value: u8 = (frame_payload & 3) as u8;
                let battery_main_switch_hold_state = BatteryMainSwitchHoldState2566809342::from(
                    battery_main_switch_hold_state_raw_value,
                );
                DecodedFrame::Bm {
                    battery_main_switch_hold_state_raw_value,
                    battery_main_switch_hold_state,
                }
            }
            2365446910u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick3_x_axis_detent_pos_status_raw_value: u8 =
                    ((frame_payload >> 38) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick3_button9_pressed_status_raw_value: u8 =
                    ((frame_payload >> 62) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick3_button10_pressed_status_raw_value: u8 =
                    ((frame_payload >> 60) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick3_button11_pressed_status_raw_value: u8 =
                    ((frame_payload >> 58) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick3_button12_pressed_status_raw_value: u8 =
                    ((frame_payload >> 56) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick3_y_axis_detent_pos_status_raw_value: u8 =
                    ((frame_payload >> 36) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick3_y_axis_pos_raw_value: f64 =
                    ((frame_payload >> 22) & 1023) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck3_y_axs_lvr_frwrd_pstv_ps_status_raw_value: u8 =
                    ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck3_y_axs_lvr_bck_ngtve_pos_status_raw_value: u8 =
                    ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick3_y_axis_neutral_pos_status_raw_value: u8 =
                    ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick3_x_axis_pos_raw_value: f64 =
                    ((frame_payload >> 6) & 1023) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck3_x_axs_lvr_rght_pstv_pos_status_raw_value: u8 =
                    ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck3_x_axs_lvr_lft_ngtve_pos_status_raw_value: u8 =
                    ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick3_x_axis_neutral_pos_status_raw_value: u8 = (frame_payload & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick3_button5_pressed_status_raw_value: u8 =
                    ((frame_payload >> 54) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick3_button6_pressed_status_raw_value: u8 =
                    ((frame_payload >> 52) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick3_button7_pressed_status_raw_value: u8 =
                    ((frame_payload >> 50) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick3_button8_pressed_status_raw_value: u8 =
                    ((frame_payload >> 48) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick3_button1_pressed_status_raw_value: u8 =
                    ((frame_payload >> 46) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick3_button2_pressed_status_raw_value: u8 =
                    ((frame_payload >> 44) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick3_button3_pressed_status_raw_value: u8 =
                    ((frame_payload >> 42) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick3_button4_pressed_status_raw_value: u8 =
                    ((frame_payload >> 40) & 3) as u8;
                let joystick3_x_axis_detent_pos_status =
                    Joystick3XAxisDetentPosStatus2365446910::from(
                        joystick3_x_axis_detent_pos_status_raw_value,
                    );
                let joystick3_button9_pressed_status =
                    Joystick3Button9PressedStatus2365446910::from(
                        joystick3_button9_pressed_status_raw_value,
                    );
                let joystick3_button10_pressed_status =
                    Joystick3Button10PressedStatus2365446910::from(
                        joystick3_button10_pressed_status_raw_value,
                    );
                let joystick3_button11_pressed_status =
                    Joystick3Button11PressedStatus2365446910::from(
                        joystick3_button11_pressed_status_raw_value,
                    );
                let joystick3_button12_pressed_status =
                    Joystick3Button12PressedStatus2365446910::from(
                        joystick3_button12_pressed_status_raw_value,
                    );
                let joystick3_y_axis_detent_pos_status =
                    Joystick3YAxisDetentPosStatus2365446910::from(
                        joystick3_y_axis_detent_pos_status_raw_value,
                    );
                let jystck3_y_axs_lvr_frwrd_pstv_ps_status =
                    Jystck3YAxsLvrFrwrdPstvPsStatus2365446910::from(
                        jystck3_y_axs_lvr_frwrd_pstv_ps_status_raw_value,
                    );
                let jystck3_y_axs_lvr_bck_ngtve_pos_status =
                    Jystck3YAxsLvrBckNgtvePosStatus2365446910::from(
                        jystck3_y_axs_lvr_bck_ngtve_pos_status_raw_value,
                    );
                let joystick3_y_axis_neutral_pos_status =
                    Joystick3YAxisNeutralPosStatus2365446910::from(
                        joystick3_y_axis_neutral_pos_status_raw_value,
                    );
                let jystck3_x_axs_lvr_rght_pstv_pos_status =
                    Jystck3XAxsLvrRghtPstvPosStatus2365446910::from(
                        jystck3_x_axs_lvr_rght_pstv_pos_status_raw_value,
                    );
                let jystck3_x_axs_lvr_lft_ngtve_pos_status =
                    Jystck3XAxsLvrLftNgtvePosStatus2365446910::from(
                        jystck3_x_axs_lvr_lft_ngtve_pos_status_raw_value,
                    );
                let joystick3_x_axis_neutral_pos_status =
                    Joystick3XAxisNeutralPosStatus2365446910::from(
                        joystick3_x_axis_neutral_pos_status_raw_value,
                    );
                let joystick3_button5_pressed_status =
                    Joystick3Button5PressedStatus2365446910::from(
                        joystick3_button5_pressed_status_raw_value,
                    );
                let joystick3_button6_pressed_status =
                    Joystick3Button6PressedStatus2365446910::from(
                        joystick3_button6_pressed_status_raw_value,
                    );
                let joystick3_button7_pressed_status =
                    Joystick3Button7PressedStatus2365446910::from(
                        joystick3_button7_pressed_status_raw_value,
                    );
                let joystick3_button8_pressed_status =
                    Joystick3Button8PressedStatus2365446910::from(
                        joystick3_button8_pressed_status_raw_value,
                    );
                let joystick3_button1_pressed_status =
                    Joystick3Button1PressedStatus2365446910::from(
                        joystick3_button1_pressed_status_raw_value,
                    );
                let joystick3_button2_pressed_status =
                    Joystick3Button2PressedStatus2365446910::from(
                        joystick3_button2_pressed_status_raw_value,
                    );
                let joystick3_button3_pressed_status =
                    Joystick3Button3PressedStatus2365446910::from(
                        joystick3_button3_pressed_status_raw_value,
                    );
                let joystick3_button4_pressed_status =
                    Joystick3Button4PressedStatus2365446910::from(
                        joystick3_button4_pressed_status_raw_value,
                    );
                DecodedFrame::Bjm3 {
                    joystick3_x_axis_detent_pos_status_raw_value,
                    joystick3_button9_pressed_status_raw_value,
                    joystick3_button10_pressed_status_raw_value,
                    joystick3_button11_pressed_status_raw_value,
                    joystick3_button12_pressed_status_raw_value,
                    joystick3_y_axis_detent_pos_status_raw_value,
                    joystick3_y_axis_pos_raw_value,
                    jystck3_y_axs_lvr_frwrd_pstv_ps_status_raw_value,
                    jystck3_y_axs_lvr_bck_ngtve_pos_status_raw_value,
                    joystick3_y_axis_neutral_pos_status_raw_value,
                    joystick3_x_axis_pos_raw_value,
                    jystck3_x_axs_lvr_rght_pstv_pos_status_raw_value,
                    jystck3_x_axs_lvr_lft_ngtve_pos_status_raw_value,
                    joystick3_x_axis_neutral_pos_status_raw_value,
                    joystick3_button5_pressed_status_raw_value,
                    joystick3_button6_pressed_status_raw_value,
                    joystick3_button7_pressed_status_raw_value,
                    joystick3_button8_pressed_status_raw_value,
                    joystick3_button1_pressed_status_raw_value,
                    joystick3_button2_pressed_status_raw_value,
                    joystick3_button3_pressed_status_raw_value,
                    joystick3_button4_pressed_status_raw_value,
                    joystick3_x_axis_detent_pos_status,
                    joystick3_button9_pressed_status,
                    joystick3_button10_pressed_status,
                    joystick3_button11_pressed_status,
                    joystick3_button12_pressed_status,
                    joystick3_y_axis_detent_pos_status,
                    jystck3_y_axs_lvr_frwrd_pstv_ps_status,
                    jystck3_y_axs_lvr_bck_ngtve_pos_status,
                    joystick3_y_axis_neutral_pos_status,
                    jystck3_x_axs_lvr_rght_pstv_pos_status,
                    jystck3_x_axs_lvr_lft_ngtve_pos_status,
                    joystick3_x_axis_neutral_pos_status,
                    joystick3_button5_pressed_status,
                    joystick3_button6_pressed_status,
                    joystick3_button7_pressed_status,
                    joystick3_button8_pressed_status,
                    joystick3_button1_pressed_status,
                    joystick3_button2_pressed_status,
                    joystick3_button3_pressed_status,
                    joystick3_button4_pressed_status,
                }
            }
            2365446398u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick2_x_axis_detent_pos_status_raw_value: u8 =
                    ((frame_payload >> 38) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick2_y_axis_detent_pos_status_raw_value: u8 =
                    ((frame_payload >> 36) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick2_y_axis_pos_raw_value: f64 =
                    ((frame_payload >> 22) & 1023) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck2_y_axs_lvr_frwrd_pstv_ps_status_raw_value: u8 =
                    ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck2_y_axs_lvr_bck_ngtve_pos_status_raw_value: u8 =
                    ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick2_y_axis_neutral_pos_status_raw_value: u8 =
                    ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick2_x_axis_pos_raw_value: f64 =
                    ((frame_payload >> 6) & 1023) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck2_x_axs_lvr_rght_pstv_pos_status_raw_value: u8 =
                    ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck2_x_axs_lvr_lft_ngtve_pos_status_raw_value: u8 =
                    ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick2_x_axis_neutral_pos_status_raw_value: u8 = (frame_payload & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick2_button9_pressed_status_raw_value: u8 =
                    ((frame_payload >> 62) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick2_button10_pressed_status_raw_value: u8 =
                    ((frame_payload >> 60) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick2_button11_pressed_status_raw_value: u8 =
                    ((frame_payload >> 58) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick2_button12_pressed_status_raw_value: u8 =
                    ((frame_payload >> 56) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick2_button5_pressed_status_raw_value: u8 =
                    ((frame_payload >> 54) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick2_button6_pressed_status_raw_value: u8 =
                    ((frame_payload >> 52) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick2_button7_pressed_status_raw_value: u8 =
                    ((frame_payload >> 50) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick2_button8_pressed_status_raw_value: u8 =
                    ((frame_payload >> 48) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick2_button1_pressed_status_raw_value: u8 =
                    ((frame_payload >> 46) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick2_button2_pressed_status_raw_value: u8 =
                    ((frame_payload >> 44) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick2_button3_pressed_status_raw_value: u8 =
                    ((frame_payload >> 42) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick2_button4_pressed_status_raw_value: u8 =
                    ((frame_payload >> 40) & 3) as u8;
                let joystick2_x_axis_detent_pos_status =
                    Joystick2XAxisDetentPosStatus2365446398::from(
                        joystick2_x_axis_detent_pos_status_raw_value,
                    );
                let joystick2_y_axis_detent_pos_status =
                    Joystick2YAxisDetentPosStatus2365446398::from(
                        joystick2_y_axis_detent_pos_status_raw_value,
                    );
                let jystck2_y_axs_lvr_frwrd_pstv_ps_status =
                    Jystck2YAxsLvrFrwrdPstvPsStatus2365446398::from(
                        jystck2_y_axs_lvr_frwrd_pstv_ps_status_raw_value,
                    );
                let jystck2_y_axs_lvr_bck_ngtve_pos_status =
                    Jystck2YAxsLvrBckNgtvePosStatus2365446398::from(
                        jystck2_y_axs_lvr_bck_ngtve_pos_status_raw_value,
                    );
                let joystick2_y_axis_neutral_pos_status =
                    Joystick2YAxisNeutralPosStatus2365446398::from(
                        joystick2_y_axis_neutral_pos_status_raw_value,
                    );
                let jystck2_x_axs_lvr_rght_pstv_pos_status =
                    Jystck2XAxsLvrRghtPstvPosStatus2365446398::from(
                        jystck2_x_axs_lvr_rght_pstv_pos_status_raw_value,
                    );
                let jystck2_x_axs_lvr_lft_ngtve_pos_status =
                    Jystck2XAxsLvrLftNgtvePosStatus2365446398::from(
                        jystck2_x_axs_lvr_lft_ngtve_pos_status_raw_value,
                    );
                let joystick2_x_axis_neutral_pos_status =
                    Joystick2XAxisNeutralPosStatus2365446398::from(
                        joystick2_x_axis_neutral_pos_status_raw_value,
                    );
                let joystick2_button9_pressed_status =
                    Joystick2Button9PressedStatus2365446398::from(
                        joystick2_button9_pressed_status_raw_value,
                    );
                let joystick2_button10_pressed_status =
                    Joystick2Button10PressedStatus2365446398::from(
                        joystick2_button10_pressed_status_raw_value,
                    );
                let joystick2_button11_pressed_status =
                    Joystick2Button11PressedStatus2365446398::from(
                        joystick2_button11_pressed_status_raw_value,
                    );
                let joystick2_button12_pressed_status =
                    Joystick2Button12PressedStatus2365446398::from(
                        joystick2_button12_pressed_status_raw_value,
                    );
                let joystick2_button5_pressed_status =
                    Joystick2Button5PressedStatus2365446398::from(
                        joystick2_button5_pressed_status_raw_value,
                    );
                let joystick2_button6_pressed_status =
                    Joystick2Button6PressedStatus2365446398::from(
                        joystick2_button6_pressed_status_raw_value,
                    );
                let joystick2_button7_pressed_status =
                    Joystick2Button7PressedStatus2365446398::from(
                        joystick2_button7_pressed_status_raw_value,
                    );
                let joystick2_button8_pressed_status =
                    Joystick2Button8PressedStatus2365446398::from(
                        joystick2_button8_pressed_status_raw_value,
                    );
                let joystick2_button1_pressed_status =
                    Joystick2Button1PressedStatus2365446398::from(
                        joystick2_button1_pressed_status_raw_value,
                    );
                let joystick2_button2_pressed_status =
                    Joystick2Button2PressedStatus2365446398::from(
                        joystick2_button2_pressed_status_raw_value,
                    );
                let joystick2_button3_pressed_status =
                    Joystick2Button3PressedStatus2365446398::from(
                        joystick2_button3_pressed_status_raw_value,
                    );
                let joystick2_button4_pressed_status =
                    Joystick2Button4PressedStatus2365446398::from(
                        joystick2_button4_pressed_status_raw_value,
                    );
                DecodedFrame::Bjm2 {
                    joystick2_x_axis_detent_pos_status_raw_value,
                    joystick2_y_axis_detent_pos_status_raw_value,
                    joystick2_y_axis_pos_raw_value,
                    jystck2_y_axs_lvr_frwrd_pstv_ps_status_raw_value,
                    jystck2_y_axs_lvr_bck_ngtve_pos_status_raw_value,
                    joystick2_y_axis_neutral_pos_status_raw_value,
                    joystick2_x_axis_pos_raw_value,
                    jystck2_x_axs_lvr_rght_pstv_pos_status_raw_value,
                    jystck2_x_axs_lvr_lft_ngtve_pos_status_raw_value,
                    joystick2_x_axis_neutral_pos_status_raw_value,
                    joystick2_button9_pressed_status_raw_value,
                    joystick2_button10_pressed_status_raw_value,
                    joystick2_button11_pressed_status_raw_value,
                    joystick2_button12_pressed_status_raw_value,
                    joystick2_button5_pressed_status_raw_value,
                    joystick2_button6_pressed_status_raw_value,
                    joystick2_button7_pressed_status_raw_value,
                    joystick2_button8_pressed_status_raw_value,
                    joystick2_button1_pressed_status_raw_value,
                    joystick2_button2_pressed_status_raw_value,
                    joystick2_button3_pressed_status_raw_value,
                    joystick2_button4_pressed_status_raw_value,
                    joystick2_x_axis_detent_pos_status,
                    joystick2_y_axis_detent_pos_status,
                    jystck2_y_axs_lvr_frwrd_pstv_ps_status,
                    jystck2_y_axs_lvr_bck_ngtve_pos_status,
                    joystick2_y_axis_neutral_pos_status,
                    jystck2_x_axs_lvr_rght_pstv_pos_status,
                    jystck2_x_axs_lvr_lft_ngtve_pos_status,
                    joystick2_x_axis_neutral_pos_status,
                    joystick2_button9_pressed_status,
                    joystick2_button10_pressed_status,
                    joystick2_button11_pressed_status,
                    joystick2_button12_pressed_status,
                    joystick2_button5_pressed_status,
                    joystick2_button6_pressed_status,
                    joystick2_button7_pressed_status,
                    joystick2_button8_pressed_status,
                    joystick2_button1_pressed_status,
                    joystick2_button2_pressed_status,
                    joystick2_button3_pressed_status,
                    joystick2_button4_pressed_status,
                }
            }
            2365445886u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick1_x_axis_detent_pos_status_raw_value: u8 =
                    ((frame_payload >> 38) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick1_y_axis_detent_pos_status_raw_value: u8 =
                    ((frame_payload >> 36) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick1_y_axis_pos_raw_value: f64 =
                    ((frame_payload >> 22) & 1023) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck1_y_axs_lvr_frwrd_pstv_ps_status_raw_value: u8 =
                    ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck1_y_axs_lvr_bck_ngtve_pos_status_raw_value: u8 =
                    ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick1_y_axis_neutral_pos_status_raw_value: u8 =
                    ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick1_x_axis_pos_raw_value: f64 =
                    ((frame_payload >> 6) & 1023) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick1_button9_pressed_status_raw_value: u8 =
                    ((frame_payload >> 62) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick1_button10_pressed_status_raw_value: u8 =
                    ((frame_payload >> 60) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick1_button11_pressed_status_raw_value: u8 =
                    ((frame_payload >> 58) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick1_button12_pressed_status_raw_value: u8 =
                    ((frame_payload >> 56) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick1_button5_pressed_status_raw_value: u8 =
                    ((frame_payload >> 54) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick1_button6_pressed_status_raw_value: u8 =
                    ((frame_payload >> 52) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick1_button7_pressed_status_raw_value: u8 =
                    ((frame_payload >> 50) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick1_button8_pressed_status_raw_value: u8 =
                    ((frame_payload >> 48) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick1_button1_pressed_status_raw_value: u8 =
                    ((frame_payload >> 46) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick1_button2_pressed_status_raw_value: u8 =
                    ((frame_payload >> 44) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick1_button3_pressed_status_raw_value: u8 =
                    ((frame_payload >> 42) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick1_button4_pressed_status_raw_value: u8 =
                    ((frame_payload >> 40) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck1_x_axs_lvr_rght_pstv_pos_status_raw_value: u8 =
                    ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let jystck1_x_axs_lvr_lft_ngtve_pos_status_raw_value: u8 =
                    ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let joystick1_x_axis_neutral_pos_status_raw_value: u8 = (frame_payload & 3) as u8;
                let joystick1_x_axis_detent_pos_status =
                    Joystick1XAxisDetentPosStatus2365445886::from(
                        joystick1_x_axis_detent_pos_status_raw_value,
                    );
                let joystick1_y_axis_detent_pos_status =
                    Joystick1YAxisDetentPosStatus2365445886::from(
                        joystick1_y_axis_detent_pos_status_raw_value,
                    );
                let jystck1_y_axs_lvr_frwrd_pstv_ps_status =
                    Jystck1YAxsLvrFrwrdPstvPsStatus2365445886::from(
                        jystck1_y_axs_lvr_frwrd_pstv_ps_status_raw_value,
                    );
                let jystck1_y_axs_lvr_bck_ngtve_pos_status =
                    Jystck1YAxsLvrBckNgtvePosStatus2365445886::from(
                        jystck1_y_axs_lvr_bck_ngtve_pos_status_raw_value,
                    );
                let joystick1_y_axis_neutral_pos_status =
                    Joystick1YAxisNeutralPosStatus2365445886::from(
                        joystick1_y_axis_neutral_pos_status_raw_value,
                    );
                let joystick1_button9_pressed_status =
                    Joystick1Button9PressedStatus2365445886::from(
                        joystick1_button9_pressed_status_raw_value,
                    );
                let joystick1_button10_pressed_status =
                    Joystick1Button10PressedStatus2365445886::from(
                        joystick1_button10_pressed_status_raw_value,
                    );
                let joystick1_button11_pressed_status =
                    Joystick1Button11PressedStatus2365445886::from(
                        joystick1_button11_pressed_status_raw_value,
                    );
                let joystick1_button12_pressed_status =
                    Joystick1Button12PressedStatus2365445886::from(
                        joystick1_button12_pressed_status_raw_value,
                    );
                let joystick1_button5_pressed_status =
                    Joystick1Button5PressedStatus2365445886::from(
                        joystick1_button5_pressed_status_raw_value,
                    );
                let joystick1_button6_pressed_status =
                    Joystick1Button6PressedStatus2365445886::from(
                        joystick1_button6_pressed_status_raw_value,
                    );
                let joystick1_button7_pressed_status =
                    Joystick1Button7PressedStatus2365445886::from(
                        joystick1_button7_pressed_status_raw_value,
                    );
                let joystick1_button8_pressed_status =
                    Joystick1Button8PressedStatus2365445886::from(
                        joystick1_button8_pressed_status_raw_value,
                    );
                let joystick1_button1_pressed_status =
                    Joystick1Button1PressedStatus2365445886::from(
                        joystick1_button1_pressed_status_raw_value,
                    );
                let joystick1_button2_pressed_status =
                    Joystick1Button2PressedStatus2365445886::from(
                        joystick1_button2_pressed_status_raw_value,
                    );
                let joystick1_button3_pressed_status =
                    Joystick1Button3PressedStatus2365445886::from(
                        joystick1_button3_pressed_status_raw_value,
                    );
                let joystick1_button4_pressed_status =
                    Joystick1Button4PressedStatus2365445886::from(
                        joystick1_button4_pressed_status_raw_value,
                    );
                let jystck1_x_axs_lvr_rght_pstv_pos_status =
                    Jystck1XAxsLvrRghtPstvPosStatus2365445886::from(
                        jystck1_x_axs_lvr_rght_pstv_pos_status_raw_value,
                    );
                let jystck1_x_axs_lvr_lft_ngtve_pos_status =
                    Jystck1XAxsLvrLftNgtvePosStatus2365445886::from(
                        jystck1_x_axs_lvr_lft_ngtve_pos_status_raw_value,
                    );
                let joystick1_x_axis_neutral_pos_status =
                    Joystick1XAxisNeutralPosStatus2365445886::from(
                        joystick1_x_axis_neutral_pos_status_raw_value,
                    );
                DecodedFrame::Bjm1 {
                    joystick1_x_axis_detent_pos_status_raw_value,
                    joystick1_y_axis_detent_pos_status_raw_value,
                    joystick1_y_axis_pos_raw_value,
                    jystck1_y_axs_lvr_frwrd_pstv_ps_status_raw_value,
                    jystck1_y_axs_lvr_bck_ngtve_pos_status_raw_value,
                    joystick1_y_axis_neutral_pos_status_raw_value,
                    joystick1_x_axis_pos_raw_value,
                    joystick1_button9_pressed_status_raw_value,
                    joystick1_button10_pressed_status_raw_value,
                    joystick1_button11_pressed_status_raw_value,
                    joystick1_button12_pressed_status_raw_value,
                    joystick1_button5_pressed_status_raw_value,
                    joystick1_button6_pressed_status_raw_value,
                    joystick1_button7_pressed_status_raw_value,
                    joystick1_button8_pressed_status_raw_value,
                    joystick1_button1_pressed_status_raw_value,
                    joystick1_button2_pressed_status_raw_value,
                    joystick1_button3_pressed_status_raw_value,
                    joystick1_button4_pressed_status_raw_value,
                    jystck1_x_axs_lvr_rght_pstv_pos_status_raw_value,
                    jystck1_x_axs_lvr_lft_ngtve_pos_status_raw_value,
                    joystick1_x_axis_neutral_pos_status_raw_value,
                    joystick1_x_axis_detent_pos_status,
                    joystick1_y_axis_detent_pos_status,
                    jystck1_y_axs_lvr_frwrd_pstv_ps_status,
                    jystck1_y_axs_lvr_bck_ngtve_pos_status,
                    joystick1_y_axis_neutral_pos_status,
                    joystick1_button9_pressed_status,
                    joystick1_button10_pressed_status,
                    joystick1_button11_pressed_status,
                    joystick1_button12_pressed_status,
                    joystick1_button5_pressed_status,
                    joystick1_button6_pressed_status,
                    joystick1_button7_pressed_status,
                    joystick1_button8_pressed_status,
                    joystick1_button1_pressed_status,
                    joystick1_button2_pressed_status,
                    joystick1_button3_pressed_status,
                    joystick1_button4_pressed_status,
                    jystck1_x_axs_lvr_rght_pstv_pos_status,
                    jystck1_x_axs_lvr_lft_ngtve_pos_status,
                    joystick1_x_axis_neutral_pos_status,
                }
            }
            2566847230u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let parking_brake_red_warning_signal_raw_value: u8 =
                    ((frame_payload >> 26) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let park_brake_release_inhibit_status_raw_value: u8 =
                    ((frame_payload >> 28) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let parking_brake_actuator_raw_value: u8 = ((frame_payload >> 24) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let brake_second_press_raw_value: f64 = ((frame_payload >> 16) & 255) as f64 * 4.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let brake_primary_press_raw_value: f64 = ((frame_payload >> 8) & 255) as f64 * 4.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let brake_app_press_raw_value: f64 = (frame_payload & 255) as f64 * 4.0;
                let parking_brake_red_warning_signal = ParkingBrakeRedWarningSignal2566847230::from(
                    parking_brake_red_warning_signal_raw_value,
                );
                let park_brake_release_inhibit_status =
                    ParkBrakeReleaseInhibitStatus2566847230::from(
                        park_brake_release_inhibit_status_raw_value,
                    );
                let parking_brake_actuator =
                    ParkingBrakeActuator2566847230::from(parking_brake_actuator_raw_value);
                DecodedFrame::B {
                    parking_brake_red_warning_signal_raw_value,
                    park_brake_release_inhibit_status_raw_value,
                    parking_brake_actuator_raw_value,
                    brake_second_press_raw_value,
                    brake_primary_press_raw_value,
                    brake_app_press_raw_value,
                    parking_brake_red_warning_signal,
                    park_brake_release_inhibit_status,
                    parking_brake_actuator,
                }
            }
            2566848254u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_pump_press_raw_value: f64 = (frame_payload & 255) as f64 * 16.0;
                DecodedFrame::Awpp {
                    aux_pump_press_raw_value,
                }
            }
            2631728894u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let antitheft_random_number_raw_value: u64 =
                    ((frame_payload >> 8) & 72057594037927935) as u64;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let antitheft_component_status_states_raw_value: u8 =
                    ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let antthft_encryptn_sd_prsnt_indicator_raw_value: u8 = (frame_payload & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let antitheft_modify_pwd_states_raw_value: u8 = ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let antitheft_pwd_valid_indicator_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let antitheft_component_status_states =
                    AntitheftComponentStatusStates2631728894::from(
                        antitheft_component_status_states_raw_value,
                    );
                let antthft_encryptn_sd_prsnt_indicator =
                    AntthftEncryptnSdPrsntIndicator2631728894::from(
                        antthft_encryptn_sd_prsnt_indicator_raw_value,
                    );
                let antitheft_modify_pwd_states =
                    AntitheftModifyPwdStates2631728894::from(antitheft_modify_pwd_states_raw_value);
                let antitheft_pwd_valid_indicator = AntitheftPwdValidIndicator2631728894::from(
                    antitheft_pwd_valid_indicator_raw_value,
                );
                DecodedFrame::Ats {
                    antitheft_random_number_raw_value,
                    antitheft_component_status_states_raw_value,
                    antthft_encryptn_sd_prsnt_indicator_raw_value,
                    antitheft_modify_pwd_states_raw_value,
                    antitheft_pwd_valid_indicator_raw_value,
                    antitheft_component_status_states,
                    antthft_encryptn_sd_prsnt_indicator,
                    antitheft_modify_pwd_states,
                    antitheft_pwd_valid_indicator,
                }
            }
            2631794430u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let antitheft_password_representation_raw_value: u64 =
                    ((frame_payload >> 8) & 72057594037927935) as u64;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let antitheft_cmd_states_raw_value: u8 = ((frame_payload >> 5) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let antitheft_desired_exit_mode_states_raw_value: u8 =
                    ((frame_payload >> 3) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let antthft_encrypton_indicator_states_raw_value: u8 =
                    ((frame_payload >> 1) & 3) as u8;
                let antitheft_cmd_states =
                    AntitheftCmdStates2631794430::from(antitheft_cmd_states_raw_value);
                let antitheft_desired_exit_mode_states =
                    AntitheftDesiredExitModeStates2631794430::from(
                        antitheft_desired_exit_mode_states_raw_value,
                    );
                let antthft_encrypton_indicator_states =
                    AntthftEncryptonIndicatorStates2631794430::from(
                        antthft_encrypton_indicator_states_raw_value,
                    );
                DecodedFrame::Atr {
                    antitheft_password_representation_raw_value,
                    antitheft_cmd_states_raw_value,
                    antitheft_desired_exit_mode_states_raw_value,
                    antthft_encrypton_indicator_states_raw_value,
                    antitheft_cmd_states,
                    antitheft_desired_exit_mode_states,
                    antthft_encrypton_indicator_states,
                }
            }
            2633934846u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_alt_winding3_temp_raw_value: f64 =
                    ((frame_payload >> 32) & 255) as f64 + -40.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_alt_winding2_temp_raw_value: f64 =
                    ((frame_payload >> 24) & 255) as f64 + -40.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_alt_winding1_temp_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 + -40.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_alt_bearing2_temp_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 + -40.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_alt_bearing1_temp_raw_value: f64 = (frame_payload & 255) as f64 + -40.0;
                DecodedFrame::At {
                    eng_alt_winding3_temp_raw_value,
                    eng_alt_winding2_temp_raw_value,
                    eng_alt_winding1_temp_raw_value,
                    eng_alt_bearing2_temp_raw_value,
                    eng_alt_bearing1_temp_raw_value,
                }
            }
            2362572542u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let level_preset_rear_axle_right_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.1 + -3200.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let level_preset_rear_axle_left_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.1 + -3200.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let level_preset_front_axle_right_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.1 + -3200.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let level_preset_front_axle_left_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.1 + -3200.0;
                DecodedFrame::Asc6 {
                    level_preset_rear_axle_right_raw_value,
                    level_preset_rear_axle_left_raw_value,
                    level_preset_front_axle_right_raw_value,
                    level_preset_front_axle_left_raw_value,
                }
            }
            2365478910u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let elctrnc_shck_absrbr_ctrl_md_lft_tg_axl_raw_value: u8 =
                    ((frame_payload >> 28) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let elctrnc_shck_absrbr_ctrl_md_rear_axle_raw_value: u8 =
                    ((frame_payload >> 26) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let elctrnc_shck_absrbr_ctrl_md_frnt_axle_raw_value: u8 =
                    ((frame_payload >> 24) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let damper_stiffness_lift_tag_axle_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let damper_stiffness_rear_axle_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let damper_stiffness_front_axle_raw_value: f64 = (frame_payload & 255) as f64 * 0.4;
                let elctrnc_shck_absrbr_ctrl_md_lft_tg_axl =
                    ElctrncShckAbsrbrCtrlMdLftTgAxl2365478910::from(
                        elctrnc_shck_absrbr_ctrl_md_lft_tg_axl_raw_value,
                    );
                let elctrnc_shck_absrbr_ctrl_md_rear_axle =
                    ElctrncShckAbsrbrCtrlMdRearAxle2365478910::from(
                        elctrnc_shck_absrbr_ctrl_md_rear_axle_raw_value,
                    );
                let elctrnc_shck_absrbr_ctrl_md_frnt_axle =
                    ElctrncShckAbsrbrCtrlMdFrntAxle2365478910::from(
                        elctrnc_shck_absrbr_ctrl_md_frnt_axle_raw_value,
                    );
                DecodedFrame::Asc5 {
                    elctrnc_shck_absrbr_ctrl_md_lft_tg_axl_raw_value,
                    elctrnc_shck_absrbr_ctrl_md_rear_axle_raw_value,
                    elctrnc_shck_absrbr_ctrl_md_frnt_axle_raw_value,
                    damper_stiffness_lift_tag_axle_raw_value,
                    damper_stiffness_rear_axle_raw_value,
                    damper_stiffness_front_axle_raw_value,
                    elctrnc_shck_absrbr_ctrl_md_lft_tg_axl,
                    elctrnc_shck_absrbr_ctrl_md_rear_axle,
                    elctrnc_shck_absrbr_ctrl_md_frnt_axle,
                }
            }
            2566805758u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let bellow_press_rear_axle_right_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let bellow_press_rear_axle_left_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let bellow_press_front_axle_right_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let bellow_press_front_axle_left_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.1;
                DecodedFrame::Asc4 {
                    bellow_press_rear_axle_right_raw_value,
                    bellow_press_rear_axle_left_raw_value,
                    bellow_press_front_axle_right_raw_value,
                    bellow_press_front_axle_left_raw_value,
                }
            }
            2566806014u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let relative_level_rear_axle_right_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.1 + -3200.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let relative_level_rear_axle_left_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.1 + -3200.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let relative_level_front_axle_right_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.1 + -3200.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let relative_level_front_axle_left_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.1 + -3200.0;
                DecodedFrame::Asc3 {
                    relative_level_rear_axle_right_raw_value,
                    relative_level_rear_axle_left_raw_value,
                    relative_level_front_axle_right_raw_value,
                    relative_level_front_axle_left_raw_value,
                }
            }
            2362638078u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let prohibit_air_suspension_ctrl_raw_value: u8 = ((frame_payload >> 52) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let kneeling_cmd_rear_axle_raw_value: u8 = ((frame_payload >> 50) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let kneeling_cmd_front_axle_raw_value: u8 = ((frame_payload >> 48) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let damper_stiffness_rq_lift_tag_axle_raw_value: f64 =
                    ((frame_payload >> 40) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let damper_stiffness_rq_rear_axle_raw_value: f64 =
                    ((frame_payload >> 32) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let damper_stiffness_rq_front_axle_raw_value: f64 =
                    ((frame_payload >> 24) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let level_ctrl_mode_rq_raw_value: u8 = ((frame_payload >> 16) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let nominal_level_rq_rear_axle_raw_value: u8 = ((frame_payload >> 12) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let nominal_level_rq_front_axle_raw_value: u8 = ((frame_payload >> 8) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let kneeling_ctrl_mode_rq_raw_value: u8 = ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let kneeling_rq_right_side_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let kneeling_rq_left_side_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let automatic_traction_help_raw_value: u8 = (frame_payload & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lift_axle2_pos_cmd_raw_value: u8 = ((frame_payload >> 22) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lift_axle1_pos_cmd_raw_value: u8 = ((frame_payload >> 20) & 3) as u8;
                let prohibit_air_suspension_ctrl = ProhibitAirSuspensionCtrl2362638078::from(
                    prohibit_air_suspension_ctrl_raw_value,
                );
                let kneeling_cmd_rear_axle =
                    KneelingCmdRearAxle2362638078::from(kneeling_cmd_rear_axle_raw_value);
                let kneeling_cmd_front_axle =
                    KneelingCmdFrontAxle2362638078::from(kneeling_cmd_front_axle_raw_value);
                let level_ctrl_mode_rq =
                    LevelCtrlModeRq2362638078::from(level_ctrl_mode_rq_raw_value);
                let nominal_level_rq_rear_axle =
                    NominalLevelRqRearAxle2362638078::from(nominal_level_rq_rear_axle_raw_value);
                let nominal_level_rq_front_axle =
                    NominalLevelRqFrontAxle2362638078::from(nominal_level_rq_front_axle_raw_value);
                let kneeling_ctrl_mode_rq =
                    KneelingCtrlModeRq2362638078::from(kneeling_ctrl_mode_rq_raw_value);
                let kneeling_rq_right_side =
                    KneelingRqRightSide2362638078::from(kneeling_rq_right_side_raw_value);
                let kneeling_rq_left_side =
                    KneelingRqLeftSide2362638078::from(kneeling_rq_left_side_raw_value);
                let automatic_traction_help =
                    AutomaticTractionHelp2362638078::from(automatic_traction_help_raw_value);
                let lift_axle2_pos_cmd =
                    LiftAxle2PosCmd2362638078::from(lift_axle2_pos_cmd_raw_value);
                let lift_axle1_pos_cmd =
                    LiftAxle1PosCmd2362638078::from(lift_axle1_pos_cmd_raw_value);
                DecodedFrame::Asc2 {
                    prohibit_air_suspension_ctrl_raw_value,
                    kneeling_cmd_rear_axle_raw_value,
                    kneeling_cmd_front_axle_raw_value,
                    damper_stiffness_rq_lift_tag_axle_raw_value,
                    damper_stiffness_rq_rear_axle_raw_value,
                    damper_stiffness_rq_front_axle_raw_value,
                    level_ctrl_mode_rq_raw_value,
                    nominal_level_rq_rear_axle_raw_value,
                    nominal_level_rq_front_axle_raw_value,
                    kneeling_ctrl_mode_rq_raw_value,
                    kneeling_rq_right_side_raw_value,
                    kneeling_rq_left_side_raw_value,
                    automatic_traction_help_raw_value,
                    lift_axle2_pos_cmd_raw_value,
                    lift_axle1_pos_cmd_raw_value,
                    prohibit_air_suspension_ctrl,
                    kneeling_cmd_rear_axle,
                    kneeling_cmd_front_axle,
                    level_ctrl_mode_rq,
                    nominal_level_rq_rear_axle,
                    nominal_level_rq_front_axle,
                    kneeling_ctrl_mode_rq,
                    kneeling_rq_right_side,
                    kneeling_rq_left_side,
                    automatic_traction_help,
                    lift_axle2_pos_cmd,
                    lift_axle1_pos_cmd,
                }
            }
            2365479678u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let sspension_ctrl_refusal_information_raw_value: u8 =
                    ((frame_payload >> 56) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let suspension_remote_ctrl2_raw_value: u8 = ((frame_payload >> 50) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let suspension_remote_ctrl1_raw_value: u8 = ((frame_payload >> 48) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rear_axle_in_bumper_range_raw_value: u8 = ((frame_payload >> 42) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let front_axle_in_bumper_range_raw_value: u8 = ((frame_payload >> 40) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let door_release_raw_value: u8 = ((frame_payload >> 36) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vehicle_motion_inhibit_raw_value: u8 = ((frame_payload >> 34) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let security_device_raw_value: u8 = ((frame_payload >> 32) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let level_ctrl_mode_raw_value: u8 = ((frame_payload >> 28) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let kneeling_information_raw_value: u8 = ((frame_payload >> 24) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lifting_ctrl_mode_rear_axle_raw_value: u8 = ((frame_payload >> 22) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lifting_ctrl_mode_front_axle_raw_value: u8 = ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lowering_ctrl_mode_rear_axle_raw_value: u8 = ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lowering_ctrl_mode_front_axle_raw_value: u8 = ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let above_nominal_level_rear_axle_raw_value: u8 = ((frame_payload >> 14) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let above_nominal_level_front_axle_raw_value: u8 =
                    ((frame_payload >> 12) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let below_nominal_level_rear_axle_raw_value: u8 = ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let below_nominal_level_front_axle_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let nominal_level_rear_axle_raw_value: u8 = ((frame_payload >> 4) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let nominal_level_front_axle_raw_value: u8 = (frame_payload & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lift_axle2_pos_raw_value: u8 = ((frame_payload >> 46) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let lift_axle1_pos_raw_value: u8 = ((frame_payload >> 38) & 3) as u8;
                let sspension_ctrl_refusal_information =
                    SspensionCtrlRefusalInformation2365479678::from(
                        sspension_ctrl_refusal_information_raw_value,
                    );
                let suspension_remote_ctrl2 =
                    SuspensionRemoteCtrl22365479678::from(suspension_remote_ctrl2_raw_value);
                let suspension_remote_ctrl1 =
                    SuspensionRemoteCtrl12365479678::from(suspension_remote_ctrl1_raw_value);
                let rear_axle_in_bumper_range =
                    RearAxleInBumperRange2365479678::from(rear_axle_in_bumper_range_raw_value);
                let front_axle_in_bumper_range =
                    FrontAxleInBumperRange2365479678::from(front_axle_in_bumper_range_raw_value);
                let door_release = DoorRelease2365479678::from(door_release_raw_value);
                let vehicle_motion_inhibit =
                    VehicleMotionInhibit2365479678::from(vehicle_motion_inhibit_raw_value);
                let security_device = SecurityDevice2365479678::from(security_device_raw_value);
                let level_ctrl_mode = LevelCtrlMode2365479678::from(level_ctrl_mode_raw_value);
                let kneeling_information =
                    KneelingInformation2365479678::from(kneeling_information_raw_value);
                let lifting_ctrl_mode_rear_axle =
                    LiftingCtrlModeRearAxle2365479678::from(lifting_ctrl_mode_rear_axle_raw_value);
                let lifting_ctrl_mode_front_axle = LiftingCtrlModeFrontAxle2365479678::from(
                    lifting_ctrl_mode_front_axle_raw_value,
                );
                let lowering_ctrl_mode_rear_axle = LoweringCtrlModeRearAxle2365479678::from(
                    lowering_ctrl_mode_rear_axle_raw_value,
                );
                let lowering_ctrl_mode_front_axle = LoweringCtrlModeFrontAxle2365479678::from(
                    lowering_ctrl_mode_front_axle_raw_value,
                );
                let above_nominal_level_rear_axle = AboveNominalLevelRearAxle2365479678::from(
                    above_nominal_level_rear_axle_raw_value,
                );
                let above_nominal_level_front_axle = AboveNominalLevelFrontAxle2365479678::from(
                    above_nominal_level_front_axle_raw_value,
                );
                let below_nominal_level_rear_axle = BelowNominalLevelRearAxle2365479678::from(
                    below_nominal_level_rear_axle_raw_value,
                );
                let below_nominal_level_front_axle = BelowNominalLevelFrontAxle2365479678::from(
                    below_nominal_level_front_axle_raw_value,
                );
                let nominal_level_rear_axle =
                    NominalLevelRearAxle2365479678::from(nominal_level_rear_axle_raw_value);
                let nominal_level_front_axle =
                    NominalLevelFrontAxle2365479678::from(nominal_level_front_axle_raw_value);
                let lift_axle2_pos = LiftAxle2Pos2365479678::from(lift_axle2_pos_raw_value);
                let lift_axle1_pos = LiftAxle1Pos2365479678::from(lift_axle1_pos_raw_value);
                DecodedFrame::Asc1 {
                    sspension_ctrl_refusal_information_raw_value,
                    suspension_remote_ctrl2_raw_value,
                    suspension_remote_ctrl1_raw_value,
                    rear_axle_in_bumper_range_raw_value,
                    front_axle_in_bumper_range_raw_value,
                    door_release_raw_value,
                    vehicle_motion_inhibit_raw_value,
                    security_device_raw_value,
                    level_ctrl_mode_raw_value,
                    kneeling_information_raw_value,
                    lifting_ctrl_mode_rear_axle_raw_value,
                    lifting_ctrl_mode_front_axle_raw_value,
                    lowering_ctrl_mode_rear_axle_raw_value,
                    lowering_ctrl_mode_front_axle_raw_value,
                    above_nominal_level_rear_axle_raw_value,
                    above_nominal_level_front_axle_raw_value,
                    below_nominal_level_rear_axle_raw_value,
                    below_nominal_level_front_axle_raw_value,
                    nominal_level_rear_axle_raw_value,
                    nominal_level_front_axle_raw_value,
                    lift_axle2_pos_raw_value,
                    lift_axle1_pos_raw_value,
                    sspension_ctrl_refusal_information,
                    suspension_remote_ctrl2,
                    suspension_remote_ctrl1,
                    rear_axle_in_bumper_range,
                    front_axle_in_bumper_range,
                    door_release,
                    vehicle_motion_inhibit,
                    security_device,
                    level_ctrl_mode,
                    kneeling_information,
                    lifting_ctrl_mode_rear_axle,
                    lifting_ctrl_mode_front_axle,
                    lowering_ctrl_mode_rear_axle,
                    lowering_ctrl_mode_front_axle,
                    above_nominal_level_rear_axle,
                    above_nominal_level_front_axle,
                    below_nominal_level_rear_axle,
                    below_nominal_level_front_axle,
                    nominal_level_rear_axle,
                    nominal_level_front_axle,
                    lift_axle2_pos,
                    lift_axle1_pos,
                }
            }
            2566837758u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let alt4_status_raw_value: u8 = ((frame_payload >> 22) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let alt3_status_raw_value: u8 = ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let alt2_status_raw_value: u8 = ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let alt1_status_raw_value: u8 = ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let alt_speed_raw_value: f64 = (frame_payload & 65535) as f64 * 0.5;
                let alt4_status = Alt4Status2566837758::from(alt4_status_raw_value);
                let alt3_status = Alt3Status2566837758::from(alt3_status_raw_value);
                let alt2_status = Alt2Status2566837758::from(alt2_status_raw_value);
                let alt1_status = Alt1Status2566837758::from(alt1_status_raw_value);
                DecodedFrame::As {
                    alt4_status_raw_value,
                    alt3_status_raw_value,
                    alt2_status_raw_value,
                    alt1_status_raw_value,
                    alt_speed_raw_value,
                    alt4_status,
                    alt3_status,
                    alt2_status,
                    alt1_status,
                }
            }
            2633922558u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_abs_press_reading_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.5;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_gage_press_reading1_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.5;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_vacuum_press_reading_raw_value: f64 = (frame_payload & 65535) as f64 * 0.5;
                DecodedFrame::Ap {
                    aux_abs_press_reading_raw_value,
                    aux_gage_press_reading1_raw_value,
                    aux_vacuum_press_reading_raw_value,
                }
            }
            2566775038u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let solar_sensor_max_raw_value: f64 = ((frame_payload >> 8) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let solar_intensity_percent_raw_value: f64 = (frame_payload & 255) as f64 * 0.4;
                DecodedFrame::Amb2 {
                    solar_sensor_max_raw_value,
                    solar_intensity_percent_raw_value,
                }
            }
            2633895166u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let arbitrary_address_capable_raw_value: bool = ((frame_payload >> 63) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let industry_group_raw_value: u8 = ((frame_payload >> 60) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vehicle_system_instance_raw_value: u8 = ((frame_payload >> 56) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vehicle_system_raw_value: u8 = ((frame_payload >> 49) & 127) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let function_raw_value: u8 = ((frame_payload >> 40) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let function_instance_raw_value: u8 = ((frame_payload >> 35) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let ecu_instance_raw_value: u8 = ((frame_payload >> 32) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let manufacturer_code_raw_value: u16 = ((frame_payload >> 21) & 2047) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let identity_number_raw_value: u32 = (frame_payload & 2097151) as u32;
                let industry_group = IndustryGroup2633895166::from(industry_group_raw_value);
                DecodedFrame::Wsmem {
                    arbitrary_address_capable_raw_value,
                    industry_group_raw_value,
                    vehicle_system_instance_raw_value,
                    vehicle_system_raw_value,
                    function_raw_value,
                    function_instance_raw_value,
                    ecu_instance_raw_value,
                    manufacturer_code_raw_value,
                    identity_number_raw_value,
                    industry_group,
                }
            }
            2566836478u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let test_limit_minimum_raw_value: u16 = ((frame_payload >> 48) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let test_limit_maximum_raw_value: u16 = ((frame_payload >> 32) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let test_value_raw_value: u16 = ((frame_payload >> 16) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let test_type_raw_value: u8 = ((frame_payload >> 8) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let test_identifier_raw_value: u8 = (frame_payload & 255) as u8;
                DecodedFrame::Dm8 {
                    test_limit_minimum_raw_value,
                    test_limit_maximum_raw_value,
                    test_value_raw_value,
                    test_type_raw_value,
                    test_identifier_raw_value,
                }
            }
            2565078782u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let test_identifier_raw_value: u8 = (frame_payload & 255) as u8;
                DecodedFrame::Dm7 {
                    test_identifier_raw_value,
                }
            }
            2566836222u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn2_raw_value: u16 = ((frame_payload >> 48) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let flash_red_stop_lamp_raw_value: u8 = ((frame_payload >> 12) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let flash_protect_lamp_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let flash_malfunc_indicator_lamp_raw_value: u8 = ((frame_payload >> 14) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let flash_amber_warning_lamp_raw_value: u8 = ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let occurence_count1_raw_value: u8 = ((frame_payload >> 40) & 127) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn_conversion_method1_raw_value: bool = ((frame_payload >> 47) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let failure_mode_identifier1_raw_value: u8 = ((frame_payload >> 32) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn1_raw_value: u16 = ((frame_payload >> 16) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let malfunction_indicator_lamp_status_raw_value: u8 =
                    ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let red_stop_lamp_state_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let amber_warning_lamp_status_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let protect_lamp_status_raw_value: u8 = (frame_payload & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn1_high_raw_value: u8 = ((frame_payload >> 37) & 7) as u8;
                let flash_red_stop_lamp =
                    FlashRedStopLamp2566836222::from(flash_red_stop_lamp_raw_value);
                let flash_protect_lamp =
                    FlashProtectLamp2566836222::from(flash_protect_lamp_raw_value);
                let flash_malfunc_indicator_lamp = FlashMalfuncIndicatorLamp2566836222::from(
                    flash_malfunc_indicator_lamp_raw_value,
                );
                let flash_amber_warning_lamp =
                    FlashAmberWarningLamp2566836222::from(flash_amber_warning_lamp_raw_value);
                let failure_mode_identifier1 =
                    FailureModeIdentifier12566836222::from(failure_mode_identifier1_raw_value);
                let malfunction_indicator_lamp_status =
                    MalfunctionIndicatorLampStatus2566836222::from(
                        malfunction_indicator_lamp_status_raw_value,
                    );
                let red_stop_lamp_state =
                    RedStopLampState2566836222::from(red_stop_lamp_state_raw_value);
                let amber_warning_lamp_status =
                    AmberWarningLampStatus2566836222::from(amber_warning_lamp_status_raw_value);
                let protect_lamp_status =
                    ProtectLampStatus2566836222::from(protect_lamp_status_raw_value);
                DecodedFrame::Dm6 {
                    spn2_raw_value,
                    flash_red_stop_lamp_raw_value,
                    flash_protect_lamp_raw_value,
                    flash_malfunc_indicator_lamp_raw_value,
                    flash_amber_warning_lamp_raw_value,
                    occurence_count1_raw_value,
                    spn_conversion_method1_raw_value,
                    failure_mode_identifier1_raw_value,
                    spn1_raw_value,
                    malfunction_indicator_lamp_status_raw_value,
                    red_stop_lamp_state_raw_value,
                    amber_warning_lamp_status_raw_value,
                    protect_lamp_status_raw_value,
                    spn1_high_raw_value,
                    flash_red_stop_lamp,
                    flash_protect_lamp,
                    flash_malfunc_indicator_lamp,
                    flash_amber_warning_lamp,
                    failure_mode_identifier1,
                    malfunction_indicator_lamp_status,
                    red_stop_lamp_state,
                    amber_warning_lamp_status,
                    protect_lamp_status,
                }
            }
            2566835966u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let misfire_monitoring_support_raw_value: bool = ((frame_payload >> 24) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let obd_compliance_raw_value: u8 = ((frame_payload >> 16) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let previously_active_trouble_codes_raw_value: u8 =
                    ((frame_payload >> 8) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let active_trouble_codes_raw_value: u8 = (frame_payload & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let second_air_system_mon_status_raw_value: bool = ((frame_payload >> 51) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let evaporative_system_mon_status_raw_value: bool =
                    ((frame_payload >> 50) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let ac_system_refrigerant_mon_status_raw_value: bool =
                    ((frame_payload >> 52) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let oxygen_sensor_heater_mon_status_raw_value: bool =
                    ((frame_payload >> 54) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let oxygen_sensor_mon_status_raw_value: bool = ((frame_payload >> 53) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let egr_system_monitoring_status_raw_value: bool = ((frame_payload >> 55) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let catalyst_mon_status_raw_value: bool = ((frame_payload >> 48) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let cold_start_aid_system_mon_status_raw_value: bool =
                    ((frame_payload >> 56) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let heated_catalyst_mon_status_raw_value: bool = ((frame_payload >> 49) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let catalyst_mon_supp_raw_value: bool = ((frame_payload >> 32) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let cold_start_aid_system_mon_supp_raw_value: bool =
                    ((frame_payload >> 40) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let heated_catalyst_mon_supp_raw_value: bool = ((frame_payload >> 33) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let evaporative_system_mon_supp_raw_value: bool = ((frame_payload >> 34) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let second_air_system_mon_supp_raw_value: bool = ((frame_payload >> 35) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let ac_system_refrigerant_mon_supp_raw_value: bool =
                    ((frame_payload >> 36) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let oxygen_sensor_mon_supp_raw_value: bool = ((frame_payload >> 37) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let oxygen_sensor_heater_mon_supp_raw_value: bool =
                    ((frame_payload >> 38) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let egr_system_monitoring_supp_raw_value: bool = ((frame_payload >> 39) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let misfire_monitoring_status_raw_value: bool = ((frame_payload >> 28) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let comprehensive_comp_mon_status_raw_value: bool =
                    ((frame_payload >> 30) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let fuel_system_monitoring_status_raw_value: bool =
                    ((frame_payload >> 29) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let comprehensive_component_mon_supp_raw_value: bool =
                    ((frame_payload >> 26) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let fuel_system_monitoring_support_raw_value: bool =
                    ((frame_payload >> 25) & 1) == 1;
                let misfire_monitoring_support =
                    MisfireMonitoringSupport2566835966::from(misfire_monitoring_support_raw_value);
                let obd_compliance = ObdCompliance2566835966::from(obd_compliance_raw_value);
                let second_air_system_mon_status = SecondAirSystemMonStatus2566835966::from(
                    second_air_system_mon_status_raw_value,
                );
                let evaporative_system_mon_status = EvaporativeSystemMonStatus2566835966::from(
                    evaporative_system_mon_status_raw_value,
                );
                let ac_system_refrigerant_mon_status = AcSystemRefrigerantMonStatus2566835966::from(
                    ac_system_refrigerant_mon_status_raw_value,
                );
                let oxygen_sensor_heater_mon_status = OxygenSensorHeaterMonStatus2566835966::from(
                    oxygen_sensor_heater_mon_status_raw_value,
                );
                let oxygen_sensor_mon_status =
                    OxygenSensorMonStatus2566835966::from(oxygen_sensor_mon_status_raw_value);
                let egr_system_monitoring_status = EgrSystemMonitoringStatus2566835966::from(
                    egr_system_monitoring_status_raw_value,
                );
                let catalyst_mon_status =
                    CatalystMonStatus2566835966::from(catalyst_mon_status_raw_value);
                let cold_start_aid_system_mon_status = ColdStartAidSystemMonStatus2566835966::from(
                    cold_start_aid_system_mon_status_raw_value,
                );
                let heated_catalyst_mon_status =
                    HeatedCatalystMonStatus2566835966::from(heated_catalyst_mon_status_raw_value);
                let catalyst_mon_supp =
                    CatalystMonSupp2566835966::from(catalyst_mon_supp_raw_value);
                let cold_start_aid_system_mon_supp = ColdStartAidSystemMonSupp2566835966::from(
                    cold_start_aid_system_mon_supp_raw_value,
                );
                let heated_catalyst_mon_supp =
                    HeatedCatalystMonSupp2566835966::from(heated_catalyst_mon_supp_raw_value);
                let evaporative_system_mon_supp =
                    EvaporativeSystemMonSupp2566835966::from(evaporative_system_mon_supp_raw_value);
                let second_air_system_mon_supp =
                    SecondAirSystemMonSupp2566835966::from(second_air_system_mon_supp_raw_value);
                let ac_system_refrigerant_mon_supp = AcSystemRefrigerantMonSupp2566835966::from(
                    ac_system_refrigerant_mon_supp_raw_value,
                );
                let oxygen_sensor_mon_supp =
                    OxygenSensorMonSupp2566835966::from(oxygen_sensor_mon_supp_raw_value);
                let oxygen_sensor_heater_mon_supp = OxygenSensorHeaterMonSupp2566835966::from(
                    oxygen_sensor_heater_mon_supp_raw_value,
                );
                let egr_system_monitoring_supp =
                    EgrSystemMonitoringSupp2566835966::from(egr_system_monitoring_supp_raw_value);
                let misfire_monitoring_status =
                    MisfireMonitoringStatus2566835966::from(misfire_monitoring_status_raw_value);
                let comprehensive_comp_mon_status = ComprehensiveCompMonStatus2566835966::from(
                    comprehensive_comp_mon_status_raw_value,
                );
                let fuel_system_monitoring_status = FuelSystemMonitoringStatus2566835966::from(
                    fuel_system_monitoring_status_raw_value,
                );
                let comprehensive_component_mon_supp =
                    ComprehensiveComponentMonSupp2566835966::from(
                        comprehensive_component_mon_supp_raw_value,
                    );
                let fuel_system_monitoring_support = FuelSystemMonitoringSupport2566835966::from(
                    fuel_system_monitoring_support_raw_value,
                );
                DecodedFrame::Dm5 {
                    misfire_monitoring_support_raw_value,
                    obd_compliance_raw_value,
                    previously_active_trouble_codes_raw_value,
                    active_trouble_codes_raw_value,
                    second_air_system_mon_status_raw_value,
                    evaporative_system_mon_status_raw_value,
                    ac_system_refrigerant_mon_status_raw_value,
                    oxygen_sensor_heater_mon_status_raw_value,
                    oxygen_sensor_mon_status_raw_value,
                    egr_system_monitoring_status_raw_value,
                    catalyst_mon_status_raw_value,
                    cold_start_aid_system_mon_status_raw_value,
                    heated_catalyst_mon_status_raw_value,
                    catalyst_mon_supp_raw_value,
                    cold_start_aid_system_mon_supp_raw_value,
                    heated_catalyst_mon_supp_raw_value,
                    evaporative_system_mon_supp_raw_value,
                    second_air_system_mon_supp_raw_value,
                    ac_system_refrigerant_mon_supp_raw_value,
                    oxygen_sensor_mon_supp_raw_value,
                    oxygen_sensor_heater_mon_supp_raw_value,
                    egr_system_monitoring_supp_raw_value,
                    misfire_monitoring_status_raw_value,
                    comprehensive_comp_mon_status_raw_value,
                    fuel_system_monitoring_status_raw_value,
                    comprehensive_component_mon_supp_raw_value,
                    fuel_system_monitoring_support_raw_value,
                    misfire_monitoring_support,
                    obd_compliance,
                    second_air_system_mon_status,
                    evaporative_system_mon_status,
                    ac_system_refrigerant_mon_status,
                    oxygen_sensor_heater_mon_status,
                    oxygen_sensor_mon_status,
                    egr_system_monitoring_status,
                    catalyst_mon_status,
                    cold_start_aid_system_mon_status,
                    heated_catalyst_mon_status,
                    catalyst_mon_supp,
                    cold_start_aid_system_mon_supp,
                    heated_catalyst_mon_supp,
                    evaporative_system_mon_supp,
                    second_air_system_mon_supp,
                    ac_system_refrigerant_mon_supp,
                    oxygen_sensor_mon_supp,
                    oxygen_sensor_heater_mon_supp,
                    egr_system_monitoring_supp,
                    misfire_monitoring_status,
                    comprehensive_comp_mon_status,
                    fuel_system_monitoring_status,
                    comprehensive_component_mon_supp,
                    fuel_system_monitoring_support,
                }
            }
            2566835710u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let occurence_count1_raw_value: u8 = ((frame_payload >> 32) & 127) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn_conversion_method1_raw_value: bool = ((frame_payload >> 39) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let failure_mode_identifier1_raw_value: u8 = ((frame_payload >> 24) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn1_raw_value: u16 = ((frame_payload >> 8) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let freeze_frame_length_raw_value: u8 = (frame_payload & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_speed_raw_value: f64 = ((frame_payload >> 56) & 65535) as f64 * 0.125;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_torque_mode_raw_value: u8 = ((frame_payload >> 40) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo_boost_press_raw_value: f64 =
                    ((frame_payload >> 48) & 255) as f64 * 2.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn1_high_raw_value: u8 = ((frame_payload >> 29) & 7) as u8;
                let failure_mode_identifier1 =
                    FailureModeIdentifier12566835710::from(failure_mode_identifier1_raw_value);
                let eng_torque_mode = EngTorqueMode2566835710::from(eng_torque_mode_raw_value);
                DecodedFrame::Dm4 {
                    occurence_count1_raw_value,
                    spn_conversion_method1_raw_value,
                    failure_mode_identifier1_raw_value,
                    spn1_raw_value,
                    freeze_frame_length_raw_value,
                    eng_speed_raw_value,
                    eng_torque_mode_raw_value,
                    eng_turbo_boost_press_raw_value,
                    spn1_high_raw_value,
                    failure_mode_identifier1,
                    eng_torque_mode,
                }
            }
            2566835454u32 => DecodedFrame::Dm3 {},
            2566764542u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let occurence_count1_raw_value: u8 = ((frame_payload >> 32) & 127) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn_conversion_method1_raw_value: bool = ((frame_payload >> 39) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let failure_mode_identifier1_raw_value: u8 = ((frame_payload >> 24) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn1_raw_value: u16 = ((frame_payload >> 8) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let expanded_freeze_frame_length_raw_value: u8 = (frame_payload & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn1_high_raw_value: u8 = ((frame_payload >> 29) & 7) as u8;
                let failure_mode_identifier1 =
                    FailureModeIdentifier12566764542::from(failure_mode_identifier1_raw_value);
                DecodedFrame::Dm25 {
                    occurence_count1_raw_value,
                    spn_conversion_method1_raw_value,
                    failure_mode_identifier1_raw_value,
                    spn1_raw_value,
                    expanded_freeze_frame_length_raw_value,
                    spn1_high_raw_value,
                    failure_mode_identifier1,
                }
            }
            2566764286u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn_supported1_high_raw_value: u8 = ((frame_payload >> 21) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn_support_type_eff2_raw_value: bool = ((frame_payload >> 48) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn_support_type_ds3_raw_value: bool = ((frame_payload >> 50) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn_support_type_ds2_raw_value: bool = ((frame_payload >> 49) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn_supported2_high_raw_value: u8 = ((frame_payload >> 53) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn_supported2_raw_value: u16 = ((frame_payload >> 32) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn_support_type_str1_raw_value: bool = ((frame_payload >> 18) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn_support_type_ds1_raw_value: bool = ((frame_payload >> 17) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn_support_type_eff1_raw_value: bool = ((frame_payload >> 16) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn_data_length2_raw_value: u8 = ((frame_payload >> 56) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn_data_length1_raw_value: u8 = ((frame_payload >> 24) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn_supported1_raw_value: u16 = (frame_payload & 65535) as u16;
                let spn_support_type_eff2 =
                    SpnSupportTypeEff22566764286::from(spn_support_type_eff2_raw_value);
                let spn_support_type_ds3 =
                    SpnSupportTypeDs32566764286::from(spn_support_type_ds3_raw_value);
                let spn_support_type_ds2 =
                    SpnSupportTypeDs22566764286::from(spn_support_type_ds2_raw_value);
                let spn_support_type_str1 =
                    SpnSupportTypeStr12566764286::from(spn_support_type_str1_raw_value);
                let spn_support_type_ds1 =
                    SpnSupportTypeDs12566764286::from(spn_support_type_ds1_raw_value);
                let spn_support_type_eff1 =
                    SpnSupportTypeEff12566764286::from(spn_support_type_eff1_raw_value);
                DecodedFrame::Dm24 {
                    spn_supported1_high_raw_value,
                    spn_support_type_eff2_raw_value,
                    spn_support_type_ds3_raw_value,
                    spn_support_type_ds2_raw_value,
                    spn_supported2_high_raw_value,
                    spn_supported2_raw_value,
                    spn_support_type_str1_raw_value,
                    spn_support_type_ds1_raw_value,
                    spn_support_type_eff1_raw_value,
                    spn_data_length2_raw_value,
                    spn_data_length1_raw_value,
                    spn_supported1_raw_value,
                    spn_support_type_eff2,
                    spn_support_type_ds3,
                    spn_support_type_ds2,
                    spn_support_type_str1,
                    spn_support_type_ds1,
                    spn_support_type_eff1,
                }
            }
            2555576062u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let flash_red_stop_lamp_raw_value: u8 = ((frame_payload >> 12) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let flash_protect_lamp_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let flash_malfunc_indicator_lamp_raw_value: u8 = ((frame_payload >> 14) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn2_raw_value: u16 = ((frame_payload >> 48) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let flash_amber_warning_lamp_raw_value: u8 = ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let occurence_count1_raw_value: u8 = ((frame_payload >> 40) & 127) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn_conversion_method1_raw_value: bool = ((frame_payload >> 47) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let failure_mode_identifier1_raw_value: u8 = ((frame_payload >> 32) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn1_raw_value: u16 = ((frame_payload >> 16) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let malfunction_indicator_lamp_status_raw_value: u8 =
                    ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let red_stop_lamp_state_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let amber_warning_lamp_status_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let protect_lamp_status_raw_value: u8 = (frame_payload & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn1_high_raw_value: u8 = ((frame_payload >> 37) & 7) as u8;
                let flash_red_stop_lamp =
                    FlashRedStopLamp2555576062::from(flash_red_stop_lamp_raw_value);
                let flash_protect_lamp =
                    FlashProtectLamp2555576062::from(flash_protect_lamp_raw_value);
                let flash_malfunc_indicator_lamp = FlashMalfuncIndicatorLamp2555576062::from(
                    flash_malfunc_indicator_lamp_raw_value,
                );
                let flash_amber_warning_lamp =
                    FlashAmberWarningLamp2555576062::from(flash_amber_warning_lamp_raw_value);
                let failure_mode_identifier1 =
                    FailureModeIdentifier12555576062::from(failure_mode_identifier1_raw_value);
                let malfunction_indicator_lamp_status =
                    MalfunctionIndicatorLampStatus2555576062::from(
                        malfunction_indicator_lamp_status_raw_value,
                    );
                let red_stop_lamp_state =
                    RedStopLampState2555576062::from(red_stop_lamp_state_raw_value);
                let amber_warning_lamp_status =
                    AmberWarningLampStatus2555576062::from(amber_warning_lamp_status_raw_value);
                let protect_lamp_status =
                    ProtectLampStatus2555576062::from(protect_lamp_status_raw_value);
                DecodedFrame::Dm23 {
                    flash_red_stop_lamp_raw_value,
                    flash_protect_lamp_raw_value,
                    flash_malfunc_indicator_lamp_raw_value,
                    spn2_raw_value,
                    flash_amber_warning_lamp_raw_value,
                    occurence_count1_raw_value,
                    spn_conversion_method1_raw_value,
                    failure_mode_identifier1_raw_value,
                    spn1_raw_value,
                    malfunction_indicator_lamp_status_raw_value,
                    red_stop_lamp_state_raw_value,
                    amber_warning_lamp_status_raw_value,
                    protect_lamp_status_raw_value,
                    spn1_high_raw_value,
                    flash_red_stop_lamp,
                    flash_protect_lamp,
                    flash_malfunc_indicator_lamp,
                    flash_amber_warning_lamp,
                    failure_mode_identifier1,
                    malfunction_indicator_lamp_status,
                    red_stop_lamp_state,
                    amber_warning_lamp_status,
                    protect_lamp_status,
                }
            }
            2562981630u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let individual_dtc_clear_control_byte_raw_value: u8 = (frame_payload & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let ctrl_byte_indic_individual_dtc_clear_raw_value: u8 =
                    ((frame_payload >> 8) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn1_raw_value: u16 = ((frame_payload >> 40) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn1_high_raw_value: u8 = ((frame_payload >> 61) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let failure_mode_identifier1_raw_value: u8 = ((frame_payload >> 56) & 31) as u8;
                let failure_mode_identifier1 =
                    FailureModeIdentifier12562981630::from(failure_mode_identifier1_raw_value);
                DecodedFrame::Dm22 {
                    individual_dtc_clear_control_byte_raw_value,
                    ctrl_byte_indic_individual_dtc_clear_raw_value,
                    spn1_raw_value,
                    spn1_high_raw_value,
                    failure_mode_identifier1_raw_value,
                    failure_mode_identifier1,
                }
            }
            2562850558u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let time_since_dt_cs_cleared_raw_value: u16 =
                    ((frame_payload >> 48) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let minutes_run_by_engine_mil_activated_raw_value: u16 =
                    ((frame_payload >> 32) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let distance_since_dt_cs_cleared_raw_value: u16 =
                    ((frame_payload >> 16) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let distance_while_mi_lis_activated_raw_value: u16 = (frame_payload & 65535) as u16;
                DecodedFrame::Dm21 {
                    time_since_dt_cs_cleared_raw_value,
                    minutes_run_by_engine_mil_activated_raw_value,
                    distance_since_dt_cs_cleared_raw_value,
                    distance_while_mi_lis_activated_raw_value,
                }
            }
            2562916094u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let appl_sys_monitor_numerator_raw_value: u16 =
                    ((frame_payload >> 56) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let sp_nof_appl_sys_monitor_raw_value: u32 =
                    ((frame_payload >> 32) & 16777215) as u32;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let obd_monitoring_cond_encountered_raw_value: u16 =
                    ((frame_payload >> 16) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let ignition_cycle_counter_raw_value: u16 = (frame_payload & 65535) as u16;
                DecodedFrame::Dm20 {
                    appl_sys_monitor_numerator_raw_value,
                    sp_nof_appl_sys_monitor_raw_value,
                    obd_monitoring_cond_encountered_raw_value,
                    ignition_cycle_counter_raw_value,
                }
            }
            2566835198u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn2_raw_value: u16 = ((frame_payload >> 48) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let occurence_count1_raw_value: u8 = ((frame_payload >> 40) & 127) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn_conversion_method1_raw_value: bool = ((frame_payload >> 47) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let failure_mode_identifier1_raw_value: u8 = ((frame_payload >> 32) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn1_raw_value: u16 = ((frame_payload >> 16) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let malfunction_indicator_lamp_status_raw_value: u8 =
                    ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let red_stop_lamp_state_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let amber_warning_lamp_status_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let protect_lamp_status_raw_value: u8 = (frame_payload & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let flash_red_stop_lamp_raw_value: u8 = ((frame_payload >> 12) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let flash_protect_lamp_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let flash_malfunc_indicator_lamp_raw_value: u8 = ((frame_payload >> 14) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let flash_amber_warning_lamp_raw_value: u8 = ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn1_high_raw_value: u8 = ((frame_payload >> 37) & 7) as u8;
                let failure_mode_identifier1 =
                    FailureModeIdentifier12566835198::from(failure_mode_identifier1_raw_value);
                let malfunction_indicator_lamp_status =
                    MalfunctionIndicatorLampStatus2566835198::from(
                        malfunction_indicator_lamp_status_raw_value,
                    );
                let red_stop_lamp_state =
                    RedStopLampState2566835198::from(red_stop_lamp_state_raw_value);
                let amber_warning_lamp_status =
                    AmberWarningLampStatus2566835198::from(amber_warning_lamp_status_raw_value);
                let protect_lamp_status =
                    ProtectLampStatus2566835198::from(protect_lamp_status_raw_value);
                let flash_red_stop_lamp =
                    FlashRedStopLamp2566835198::from(flash_red_stop_lamp_raw_value);
                let flash_protect_lamp =
                    FlashProtectLamp2566835198::from(flash_protect_lamp_raw_value);
                let flash_malfunc_indicator_lamp = FlashMalfuncIndicatorLamp2566835198::from(
                    flash_malfunc_indicator_lamp_raw_value,
                );
                let flash_amber_warning_lamp =
                    FlashAmberWarningLamp2566835198::from(flash_amber_warning_lamp_raw_value);
                DecodedFrame::Dm2 {
                    spn2_raw_value,
                    occurence_count1_raw_value,
                    spn_conversion_method1_raw_value,
                    failure_mode_identifier1_raw_value,
                    spn1_raw_value,
                    malfunction_indicator_lamp_status_raw_value,
                    red_stop_lamp_state_raw_value,
                    amber_warning_lamp_status_raw_value,
                    protect_lamp_status_raw_value,
                    flash_red_stop_lamp_raw_value,
                    flash_protect_lamp_raw_value,
                    flash_malfunc_indicator_lamp_raw_value,
                    flash_amber_warning_lamp_raw_value,
                    spn1_high_raw_value,
                    failure_mode_identifier1,
                    malfunction_indicator_lamp_status,
                    red_stop_lamp_state,
                    amber_warning_lamp_status,
                    protect_lamp_status,
                    flash_red_stop_lamp,
                    flash_protect_lamp,
                    flash_malfunc_indicator_lamp,
                    flash_amber_warning_lamp,
                }
            }
            2564030206u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let calibration_id1_raw_value: u32 = ((frame_payload >> 32) & 4294967295) as u32;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let calibration_verification_number_raw_value: u32 =
                    (frame_payload & 4294967295) as u32;
                DecodedFrame::Dm19 {
                    calibration_id1_raw_value,
                    calibration_verification_number_raw_value,
                }
            }
            2564226814u32 => DecodedFrame::Dm17 {},
            2564292350u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let number_of_occurance_raw_value: u8 = (frame_payload & 255) as u8;
                DecodedFrame::Dm16 {
                    number_of_occurance_raw_value,
                }
            }
            2564357886u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let number_allowed_raw_value: u8 = (frame_payload & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let seed_raw_value: u16 = ((frame_payload >> 48) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let edcp_extension_raw_value: u8 = ((frame_payload >> 40) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let error_indicator_raw_value: u32 = ((frame_payload >> 16) & 16777215) as u32;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let status_raw_value: u8 = ((frame_payload >> 9) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let number_allowed_high_raw_value: u8 = ((frame_payload >> 13) & 7) as u8;
                let seed = Seed2564357886::from(seed_raw_value);
                let edcp_extension = EdcpExtension2564357886::from(edcp_extension_raw_value);
                let error_indicator = ErrorIndicator2564357886::from(error_indicator_raw_value);
                let status = Status2564357886::from(status_raw_value);
                DecodedFrame::Dm15 {
                    number_allowed_raw_value,
                    seed_raw_value,
                    edcp_extension_raw_value,
                    error_indicator_raw_value,
                    status_raw_value,
                    number_allowed_high_raw_value,
                    seed,
                    edcp_extension,
                    error_indicator,
                    status,
                }
            }
            2564423422u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let key_or_user_level_raw_value: u16 = ((frame_payload >> 48) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let pointer_extension_raw_value: u8 = ((frame_payload >> 40) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let pointer_raw_value: u32 = ((frame_payload >> 16) & 16777215) as u32;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let command_raw_value: u8 = ((frame_payload >> 9) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let pointer_type_raw_value: bool = ((frame_payload >> 12) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let number_requested_raw_value: u8 = (frame_payload & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let number_requested_high_raw_value: u8 = ((frame_payload >> 13) & 7) as u8;
                let key_or_user_level = KeyOrUserLevel2564423422::from(key_or_user_level_raw_value);
                let pointer_extension =
                    PointerExtension2564423422::from(pointer_extension_raw_value);
                let command = Command2564423422::from(command_raw_value);
                let pointer_type = PointerType2564423422::from(pointer_type_raw_value);
                DecodedFrame::Dm14 {
                    key_or_user_level_raw_value,
                    pointer_extension_raw_value,
                    pointer_raw_value,
                    command_raw_value,
                    pointer_type_raw_value,
                    number_requested_raw_value,
                    number_requested_high_raw_value,
                    key_or_user_level,
                    pointer_extension,
                    command,
                    pointer_type,
                }
            }
            2564816638u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let hold_signal_raw_value: u8 = ((frame_payload >> 28) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let j1939_network3_raw_value: u8 = ((frame_payload >> 22) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let j1939_network2_raw_value: u8 = ((frame_payload >> 14) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let iso9141_raw_value: u8 = ((frame_payload >> 12) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let sae_j1850_raw_value: u8 = ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let manufacturer_specific_port_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let current_data_link_raw_value: u8 = ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let sae_j1587_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let sae_j1922_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let j1939_network1_raw_value: u8 = (frame_payload & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let suspend_signal_raw_value: u8 = ((frame_payload >> 24) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let suspend_duration_raw_value: u16 = ((frame_payload >> 32) & 65535) as u16;
                let hold_signal = HoldSignal2564816638::from(hold_signal_raw_value);
                let j1939_network3 = J1939Network32564816638::from(j1939_network3_raw_value);
                let j1939_network2 = J1939Network22564816638::from(j1939_network2_raw_value);
                let iso9141 = Iso91412564816638::from(iso9141_raw_value);
                let sae_j1850 = SaeJ18502564816638::from(sae_j1850_raw_value);
                let manufacturer_specific_port =
                    ManufacturerSpecificPort2564816638::from(manufacturer_specific_port_raw_value);
                let current_data_link =
                    CurrentDataLink2564816638::from(current_data_link_raw_value);
                let sae_j1587 = SaeJ15872564816638::from(sae_j1587_raw_value);
                let sae_j1922 = SaeJ19222564816638::from(sae_j1922_raw_value);
                let j1939_network1 = J1939Network12564816638::from(j1939_network1_raw_value);
                let suspend_signal = SuspendSignal2564816638::from(suspend_signal_raw_value);
                DecodedFrame::Dm13 {
                    hold_signal_raw_value,
                    j1939_network3_raw_value,
                    j1939_network2_raw_value,
                    iso9141_raw_value,
                    sae_j1850_raw_value,
                    manufacturer_specific_port_raw_value,
                    current_data_link_raw_value,
                    sae_j1587_raw_value,
                    sae_j1922_raw_value,
                    j1939_network1_raw_value,
                    suspend_signal_raw_value,
                    suspend_duration_raw_value,
                    hold_signal,
                    j1939_network3,
                    j1939_network2,
                    iso9141,
                    sae_j1850,
                    manufacturer_specific_port,
                    current_data_link,
                    sae_j1587,
                    sae_j1922,
                    j1939_network1,
                    suspend_signal,
                }
            }
            2566837502u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn2_raw_value: u16 = ((frame_payload >> 48) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let flash_red_stop_lamp_raw_value: u8 = ((frame_payload >> 12) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let flash_protect_lamp_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let occurence_count1_raw_value: u8 = ((frame_payload >> 40) & 127) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn_conversion_method1_raw_value: bool = ((frame_payload >> 47) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let failure_mode_identifier1_raw_value: u8 = ((frame_payload >> 32) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn1_raw_value: u16 = ((frame_payload >> 16) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let malfunction_indicator_lamp_status_raw_value: u8 =
                    ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let red_stop_lamp_state_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let amber_warning_lamp_status_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let protect_lamp_status_raw_value: u8 = (frame_payload & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let flash_malfunc_indicator_lamp_raw_value: u8 = ((frame_payload >> 14) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let flash_amber_warning_lamp_raw_value: u8 = ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn1_high_raw_value: u8 = ((frame_payload >> 37) & 7) as u8;
                let flash_red_stop_lamp =
                    FlashRedStopLamp2566837502::from(flash_red_stop_lamp_raw_value);
                let flash_protect_lamp =
                    FlashProtectLamp2566837502::from(flash_protect_lamp_raw_value);
                let failure_mode_identifier1 =
                    FailureModeIdentifier12566837502::from(failure_mode_identifier1_raw_value);
                let malfunction_indicator_lamp_status =
                    MalfunctionIndicatorLampStatus2566837502::from(
                        malfunction_indicator_lamp_status_raw_value,
                    );
                let red_stop_lamp_state =
                    RedStopLampState2566837502::from(red_stop_lamp_state_raw_value);
                let amber_warning_lamp_status =
                    AmberWarningLampStatus2566837502::from(amber_warning_lamp_status_raw_value);
                let protect_lamp_status =
                    ProtectLampStatus2566837502::from(protect_lamp_status_raw_value);
                let flash_malfunc_indicator_lamp = FlashMalfuncIndicatorLamp2566837502::from(
                    flash_malfunc_indicator_lamp_raw_value,
                );
                let flash_amber_warning_lamp =
                    FlashAmberWarningLamp2566837502::from(flash_amber_warning_lamp_raw_value);
                DecodedFrame::Dm12 {
                    spn2_raw_value,
                    flash_red_stop_lamp_raw_value,
                    flash_protect_lamp_raw_value,
                    occurence_count1_raw_value,
                    spn_conversion_method1_raw_value,
                    failure_mode_identifier1_raw_value,
                    spn1_raw_value,
                    malfunction_indicator_lamp_status_raw_value,
                    red_stop_lamp_state_raw_value,
                    amber_warning_lamp_status_raw_value,
                    protect_lamp_status_raw_value,
                    flash_malfunc_indicator_lamp_raw_value,
                    flash_amber_warning_lamp_raw_value,
                    spn1_high_raw_value,
                    flash_red_stop_lamp,
                    flash_protect_lamp,
                    failure_mode_identifier1,
                    malfunction_indicator_lamp_status,
                    red_stop_lamp_state,
                    amber_warning_lamp_status,
                    protect_lamp_status,
                    flash_malfunc_indicator_lamp,
                    flash_amber_warning_lamp,
                }
            }
            2566837246u32 => DecodedFrame::Dm11 {},
            2566836990u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let test_identifier_supported_raw_value: u64 =
                    (frame_payload & 18446744073709551614) as u64;
                DecodedFrame::Dm10 {
                    test_identifier_supported_raw_value,
                }
            }
            2566834942u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn2_raw_value: u16 = ((frame_payload >> 48) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let flash_red_stop_lamp_raw_value: u8 = ((frame_payload >> 12) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let flash_protect_lamp_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let flash_malfunc_indicator_lamp_raw_value: u8 = ((frame_payload >> 14) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let flash_amber_warning_lamp_raw_value: u8 = ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let malfunction_indicator_lamp_status_raw_value: u8 =
                    ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let amber_warning_lamp_status_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let occurence_count1_raw_value: u8 = ((frame_payload >> 40) & 127) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn_conversion_method1_raw_value: bool = ((frame_payload >> 47) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let failure_mode_identifier1_raw_value: u8 = ((frame_payload >> 32) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn1_raw_value: u16 = ((frame_payload >> 16) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let red_stop_lamp_state_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let protect_lamp_status_raw_value: u8 = (frame_payload & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn1_high_raw_value: u8 = ((frame_payload >> 37) & 7) as u8;
                let flash_red_stop_lamp =
                    FlashRedStopLamp2566834942::from(flash_red_stop_lamp_raw_value);
                let flash_protect_lamp =
                    FlashProtectLamp2566834942::from(flash_protect_lamp_raw_value);
                let flash_malfunc_indicator_lamp = FlashMalfuncIndicatorLamp2566834942::from(
                    flash_malfunc_indicator_lamp_raw_value,
                );
                let flash_amber_warning_lamp =
                    FlashAmberWarningLamp2566834942::from(flash_amber_warning_lamp_raw_value);
                let malfunction_indicator_lamp_status =
                    MalfunctionIndicatorLampStatus2566834942::from(
                        malfunction_indicator_lamp_status_raw_value,
                    );
                let amber_warning_lamp_status =
                    AmberWarningLampStatus2566834942::from(amber_warning_lamp_status_raw_value);
                let failure_mode_identifier1 =
                    FailureModeIdentifier12566834942::from(failure_mode_identifier1_raw_value);
                let red_stop_lamp_state =
                    RedStopLampState2566834942::from(red_stop_lamp_state_raw_value);
                let protect_lamp_status =
                    ProtectLampStatus2566834942::from(protect_lamp_status_raw_value);
                DecodedFrame::Dm1 {
                    spn2_raw_value,
                    flash_red_stop_lamp_raw_value,
                    flash_protect_lamp_raw_value,
                    flash_malfunc_indicator_lamp_raw_value,
                    flash_amber_warning_lamp_raw_value,
                    malfunction_indicator_lamp_status_raw_value,
                    amber_warning_lamp_status_raw_value,
                    occurence_count1_raw_value,
                    spn_conversion_method1_raw_value,
                    failure_mode_identifier1_raw_value,
                    spn1_raw_value,
                    red_stop_lamp_state_raw_value,
                    protect_lamp_status_raw_value,
                    spn1_high_raw_value,
                    flash_red_stop_lamp,
                    flash_protect_lamp,
                    flash_malfunc_indicator_lamp,
                    flash_amber_warning_lamp,
                    malfunction_indicator_lamp_status,
                    amber_warning_lamp_status,
                    failure_mode_identifier1,
                    red_stop_lamp_state,
                    protect_lamp_status,
                }
            }
            2566780926u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utlity_overall_power_factor_lagging_raw_value: u8 =
                    ((frame_payload >> 48) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utility_overall_power_factor_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 + -1.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utility_total_reactive_power_raw_value: f64 =
                    (frame_payload & 4294967295) as f64 + -2000000000.0;
                DecodedFrame::Utacr {
                    utlity_overall_power_factor_lagging_raw_value,
                    utility_overall_power_factor_raw_value,
                    utility_total_reactive_power_raw_value,
                }
            }
            2566781182u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utility_total_apparent_power_raw_value: f64 =
                    ((frame_payload >> 32) & 4294967295) as f64 + -2000000000.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utility_total_real_power_raw_value: f64 =
                    (frame_payload & 4294967295) as f64 + -2000000000.0;
                DecodedFrame::Utacp {
                    utility_total_apparent_power_raw_value,
                    utility_total_real_power_raw_value,
                }
            }
            2566778366u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utility_total_kw_hours_import_raw_value: u32 =
                    ((frame_payload >> 32) & 4294967295) as u32;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utility_total_kw_hours_export_raw_value: u32 =
                    (frame_payload & 4294967295) as u32;
                DecodedFrame::Utace {
                    utility_total_kw_hours_import_raw_value,
                    utility_total_kw_hours_export_raw_value,
                }
            }
            2566778622u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utility_phase_c_power_factor_lagging_raw_value: u8 =
                    ((frame_payload >> 48) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utility_phase_c_power_factor_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 + -1.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utility_phase_c_reactive_power_raw_value: f64 =
                    (frame_payload & 4294967295) as f64 + -2000000000.0;
                DecodedFrame::Upcacr {
                    utility_phase_c_power_factor_lagging_raw_value,
                    utility_phase_c_power_factor_raw_value,
                    utility_phase_c_reactive_power_raw_value,
                }
            }
            2566778878u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utility_phase_c_apparent_power_raw_value: f64 =
                    ((frame_payload >> 32) & 4294967295) as f64 + -2000000000.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utility_phase_c_real_power_raw_value: f64 =
                    (frame_payload & 4294967295) as f64 + -2000000000.0;
                DecodedFrame::Upcacp {
                    utility_phase_c_apparent_power_raw_value,
                    utility_phase_c_real_power_raw_value,
                }
            }
            2566779134u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utility_phase_cacrms_current_raw_value: u16 =
                    ((frame_payload >> 48) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utility_phase_cac_frequency_raw_value: u16 =
                    ((frame_payload >> 32) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utlty_phs_c_lne_neutral_acrms_voltage_raw_value: u16 =
                    ((frame_payload >> 16) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utlty_phse_ca_line_line_acrms_voltage_raw_value: u16 =
                    (frame_payload & 65535) as u16;
                DecodedFrame::Upcac {
                    utility_phase_cacrms_current_raw_value,
                    utility_phase_cac_frequency_raw_value,
                    utlty_phs_c_lne_neutral_acrms_voltage_raw_value,
                    utlty_phse_ca_line_line_acrms_voltage_raw_value,
                }
            }
            2566779390u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utility_phase_b_power_factor_lagging_raw_value: u8 =
                    ((frame_payload >> 48) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utility_phase_b_power_factor_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 + -1.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utility_phase_b_reactive_power_raw_value: f64 =
                    (frame_payload & 4294967295) as f64 + -2000000000.0;
                DecodedFrame::Upbacr {
                    utility_phase_b_power_factor_lagging_raw_value,
                    utility_phase_b_power_factor_raw_value,
                    utility_phase_b_reactive_power_raw_value,
                }
            }
            2566779646u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utility_phase_b_apparent_power_raw_value: f64 =
                    ((frame_payload >> 32) & 4294967295) as f64 + -2000000000.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utility_phase_b_real_power_raw_value: f64 =
                    (frame_payload & 4294967295) as f64 + -2000000000.0;
                DecodedFrame::Upbacp {
                    utility_phase_b_apparent_power_raw_value,
                    utility_phase_b_real_power_raw_value,
                }
            }
            2566779902u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utility_phase_bacrms_current_raw_value: u16 =
                    ((frame_payload >> 48) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utility_phase_bac_frequency_raw_value: u16 =
                    ((frame_payload >> 32) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utlty_phs_b_lne_neutral_acrms_voltage_raw_value: u16 =
                    ((frame_payload >> 16) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utlty_phse_bc_line_line_acrms_voltage_raw_value: u16 =
                    (frame_payload & 65535) as u16;
                DecodedFrame::Upbac {
                    utility_phase_bacrms_current_raw_value,
                    utility_phase_bac_frequency_raw_value,
                    utlty_phs_b_lne_neutral_acrms_voltage_raw_value,
                    utlty_phse_bc_line_line_acrms_voltage_raw_value,
                }
            }
            2566780158u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utility_phase_a_power_factor_lagging_raw_value: u8 =
                    ((frame_payload >> 48) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utility_phase_a_power_factor_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 + -1.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utility_phase_a_reactive_power_raw_value: f64 =
                    (frame_payload & 4294967295) as f64 + -2000000000.0;
                DecodedFrame::Upaccr {
                    utility_phase_a_power_factor_lagging_raw_value,
                    utility_phase_a_power_factor_raw_value,
                    utility_phase_a_reactive_power_raw_value,
                }
            }
            2566780414u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utility_phase_a_apparent_power_raw_value: f64 =
                    ((frame_payload >> 32) & 4294967295) as f64 + -2000000000.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utility_phase_a_real_power_raw_value: f64 =
                    (frame_payload & 4294967295) as f64 + -2000000000.0;
                DecodedFrame::Upaacp {
                    utility_phase_a_apparent_power_raw_value,
                    utility_phase_a_real_power_raw_value,
                }
            }
            2566780670u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utility_phase_aacrms_current_raw_value: u16 =
                    ((frame_payload >> 48) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utility_phase_aac_frequency_raw_value: u16 =
                    ((frame_payload >> 32) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utlty_phs_a_lne_neutral_acrms_voltage_raw_value: u16 =
                    ((frame_payload >> 16) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utlty_phse_ab_line_line_acrms_voltage_raw_value: u16 =
                    (frame_payload & 65535) as u16;
                DecodedFrame::Upaac {
                    utility_phase_aacrms_current_raw_value,
                    utility_phase_aac_frequency_raw_value,
                    utlty_phs_a_lne_neutral_acrms_voltage_raw_value,
                    utlty_phse_ab_line_line_acrms_voltage_raw_value,
                }
            }
            2566781438u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utility_average_acrms_current_raw_value: u16 =
                    ((frame_payload >> 48) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utility_average_ac_frequency_raw_value: u16 =
                    ((frame_payload >> 32) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utlty_avrg_lne_neutral_acrms_voltage_raw_value: u16 =
                    ((frame_payload >> 16) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let utlty_avrage_line_line_acrms_voltage_raw_value: u16 =
                    (frame_payload & 65535) as u16;
                DecodedFrame::Uaac {
                    utility_average_acrms_current_raw_value,
                    utility_average_ac_frequency_raw_value,
                    utlty_avrg_lne_neutral_acrms_voltage_raw_value,
                    utlty_avrage_line_line_acrms_voltage_raw_value,
                }
            }
            2566784254u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let gnrtor_overall_power_factor_lagging_raw_value: u8 =
                    ((frame_payload >> 48) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let generator_overall_power_factor_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 + -1.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let generator_total_reactive_power_raw_value: f64 =
                    (frame_payload & 4294967295) as f64 + -2000000000.0;
                DecodedFrame::Gtacr {
                    gnrtor_overall_power_factor_lagging_raw_value,
                    generator_overall_power_factor_raw_value,
                    generator_total_reactive_power_raw_value,
                }
            }
            2566784510u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let generator_total_apparent_power_raw_value: f64 =
                    ((frame_payload >> 32) & 4294967295) as f64 + -2000000000.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let generator_total_real_power_raw_value: f64 =
                    (frame_payload & 4294967295) as f64 + -2000000000.0;
                DecodedFrame::Gtacp {
                    generator_total_apparent_power_raw_value,
                    generator_total_real_power_raw_value,
                }
            }
            2566781694u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let generator_total_kw_hours_import_raw_value: u32 =
                    ((frame_payload >> 32) & 4294967295) as u32;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let generator_total_kw_hours_export_raw_value: u32 =
                    (frame_payload & 4294967295) as u32;
                DecodedFrame::Gtace {
                    generator_total_kw_hours_import_raw_value,
                    generator_total_kw_hours_export_raw_value,
                }
            }
            2566781950u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let gnrator_phase_c_power_factor_lagging_raw_value: u8 =
                    ((frame_payload >> 48) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let generator_phase_c_power_factor_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 + -1.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let generator_phase_c_reactive_power_raw_value: f64 =
                    (frame_payload & 4294967295) as f64 + -2000000000.0;
                DecodedFrame::Gpcacr {
                    gnrator_phase_c_power_factor_lagging_raw_value,
                    generator_phase_c_power_factor_raw_value,
                    generator_phase_c_reactive_power_raw_value,
                }
            }
            2566782206u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let generator_phase_c_apparent_power_raw_value: f64 =
                    ((frame_payload >> 32) & 4294967295) as f64 + -2000000000.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let generator_phase_c_real_power_raw_value: f64 =
                    (frame_payload & 4294967295) as f64 + -2000000000.0;
                DecodedFrame::Gpcacp {
                    generator_phase_c_apparent_power_raw_value,
                    generator_phase_c_real_power_raw_value,
                }
            }
            2566782462u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let generator_phase_cacrms_current_raw_value: u16 =
                    ((frame_payload >> 48) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let generator_phase_cac_frequency_raw_value: u16 =
                    ((frame_payload >> 32) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let gnrtr_phs_c_lne_neutral_acrms_voltage_raw_value: u16 =
                    ((frame_payload >> 16) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let gnrtr_phse_ca_line_line_acrms_voltage_raw_value: u16 =
                    (frame_payload & 65535) as u16;
                DecodedFrame::Gpcac {
                    generator_phase_cacrms_current_raw_value,
                    generator_phase_cac_frequency_raw_value,
                    gnrtr_phs_c_lne_neutral_acrms_voltage_raw_value,
                    gnrtr_phse_ca_line_line_acrms_voltage_raw_value,
                }
            }
            2566782718u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let gnrator_phase_b_power_factor_lagging_raw_value: u8 =
                    ((frame_payload >> 48) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let generator_phase_b_power_factor_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 + -1.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let generator_phase_b_reactive_power_raw_value: f64 =
                    (frame_payload & 4294967295) as f64 + -2000000000.0;
                DecodedFrame::Gpbacrp {
                    gnrator_phase_b_power_factor_lagging_raw_value,
                    generator_phase_b_power_factor_raw_value,
                    generator_phase_b_reactive_power_raw_value,
                }
            }
            2566782974u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let generator_phase_b_apparent_power_raw_value: f64 =
                    ((frame_payload >> 32) & 4294967295) as f64 + -2000000000.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let generator_phase_b_real_power_raw_value: f64 =
                    (frame_payload & 4294967295) as f64 + -2000000000.0;
                DecodedFrame::Gpbacp {
                    generator_phase_b_apparent_power_raw_value,
                    generator_phase_b_real_power_raw_value,
                }
            }
            2566783230u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let generator_phase_bacrms_current_raw_value: u16 =
                    ((frame_payload >> 48) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let generator_phase_bac_frequency_raw_value: u16 =
                    ((frame_payload >> 32) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let gnrtr_phs_b_lne_neutral_acrms_voltage_raw_value: u16 =
                    ((frame_payload >> 16) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let gnrtr_phse_bc_line_line_acrms_voltage_raw_value: u16 =
                    (frame_payload & 65535) as u16;
                DecodedFrame::Gpbac {
                    generator_phase_bacrms_current_raw_value,
                    generator_phase_bac_frequency_raw_value,
                    gnrtr_phs_b_lne_neutral_acrms_voltage_raw_value,
                    gnrtr_phse_bc_line_line_acrms_voltage_raw_value,
                }
            }
            2566783486u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let gnrator_phase_a_power_factor_lagging_raw_value: u8 =
                    ((frame_payload >> 48) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let generator_phase_a_power_factor_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 + -1.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let generator_phase_a_reactive_power_raw_value: f64 =
                    (frame_payload & 4294967295) as f64 + -2000000000.0;
                DecodedFrame::Gpaacr {
                    gnrator_phase_a_power_factor_lagging_raw_value,
                    generator_phase_a_power_factor_raw_value,
                    generator_phase_a_reactive_power_raw_value,
                }
            }
            2566783742u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let generator_phase_a_apparent_power_raw_value: f64 =
                    ((frame_payload >> 32) & 4294967295) as f64 + -2000000000.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let generator_phase_a_real_power_raw_value: f64 =
                    (frame_payload & 4294967295) as f64 + -2000000000.0;
                DecodedFrame::Gpaacp {
                    generator_phase_a_apparent_power_raw_value,
                    generator_phase_a_real_power_raw_value,
                }
            }
            2566783998u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let generator_phase_aacrms_current_raw_value: u16 =
                    ((frame_payload >> 48) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let generator_phase_aac_frequency_raw_value: u16 =
                    ((frame_payload >> 32) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let gnrtr_phs_a_lne_neutral_acrms_voltage_raw_value: u16 =
                    ((frame_payload >> 16) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let gnrtr_phse_ab_line_line_acrms_voltage_raw_value: u16 =
                    (frame_payload & 65535) as u16;
                DecodedFrame::Gpaac {
                    generator_phase_aacrms_current_raw_value,
                    generator_phase_aac_frequency_raw_value,
                    gnrtr_phs_a_lne_neutral_acrms_voltage_raw_value,
                    gnrtr_phse_ab_line_line_acrms_voltage_raw_value,
                }
            }
            2566784766u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let generator_average_acrms_current_raw_value: u16 =
                    ((frame_payload >> 48) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let generator_average_ac_frequency_raw_value: u16 =
                    ((frame_payload >> 32) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let gnrtr_avrg_lne_neutral_acrms_voltage_raw_value: u16 =
                    ((frame_payload >> 16) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let gnrtr_avrage_line_line_acrms_voltage_raw_value: u16 =
                    (frame_payload & 65535) as u16;
                DecodedFrame::Gaac {
                    generator_average_acrms_current_raw_value,
                    generator_average_ac_frequency_raw_value,
                    gnrtr_avrg_lne_neutral_acrms_voltage_raw_value,
                    gnrtr_avrage_line_line_acrms_voltage_raw_value,
                }
            }
            2566776830u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let bus1_utility_ac_phase_difference_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 + -200.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let bus1_utility_in_sync_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let bus1_utility_voltage_match_raw_value: u8 = ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let bus1_utility_frequency_match_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let bus1_utility_phase_match_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let bus1_utility_dead_bus_raw_value: u8 = (frame_payload & 3) as u8;
                DecodedFrame::Busc {
                    bus1_utility_ac_phase_difference_raw_value,
                    bus1_utility_in_sync_raw_value,
                    bus1_utility_voltage_match_raw_value,
                    bus1_utility_frequency_match_raw_value,
                    bus1_utility_phase_match_raw_value,
                    bus1_utility_dead_bus_raw_value,
                }
            }
            2566777342u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let bus1_phase_cac_frequency_raw_value: u16 =
                    ((frame_payload >> 32) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let bs1_phse_c_line_neutral_acrms_voltage_raw_value: u16 =
                    ((frame_payload >> 16) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let bus1_phase_ca_line_line_acrms_voltage_raw_value: u16 =
                    (frame_payload & 65535) as u16;
                DecodedFrame::Bpcac {
                    bus1_phase_cac_frequency_raw_value,
                    bs1_phse_c_line_neutral_acrms_voltage_raw_value,
                    bus1_phase_ca_line_line_acrms_voltage_raw_value,
                }
            }
            2566777598u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let bus1_phase_bac_frequency_raw_value: u16 =
                    ((frame_payload >> 32) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let bs1_phse_b_line_neutral_acrms_voltage_raw_value: u16 =
                    ((frame_payload >> 16) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let bus1_phase_bc_line_line_acrms_voltage_raw_value: u16 =
                    (frame_payload & 65535) as u16;
                DecodedFrame::Bpbac {
                    bus1_phase_bac_frequency_raw_value,
                    bs1_phse_b_line_neutral_acrms_voltage_raw_value,
                    bus1_phase_bc_line_line_acrms_voltage_raw_value,
                }
            }
            2566777854u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let bus1_phase_aac_frequency_raw_value: u16 =
                    ((frame_payload >> 32) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let bs1_phse_a_line_neutral_acrms_voltage_raw_value: u16 =
                    ((frame_payload >> 16) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let bus1_phase_ab_line_line_acrms_voltage_raw_value: u16 =
                    (frame_payload & 65535) as u16;
                DecodedFrame::Bpaac {
                    bus1_phase_aac_frequency_raw_value,
                    bs1_phse_a_line_neutral_acrms_voltage_raw_value,
                    bus1_phase_ab_line_line_acrms_voltage_raw_value,
                }
            }
            2566777086u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let bus1_generator_ac_phase_difference_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 + -200.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let bus1_generator_in_sync_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let bus1_generator_voltage_match_raw_value: u8 = ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let bus1_generator_frequency_match_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let bus1_generator_phase_match_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let bus1_generator_dead_bus_raw_value: u8 = (frame_payload & 3) as u8;
                DecodedFrame::Bgsc {
                    bus1_generator_ac_phase_difference_raw_value,
                    bus1_generator_in_sync_raw_value,
                    bus1_generator_voltage_match_raw_value,
                    bus1_generator_frequency_match_raw_value,
                    bus1_generator_phase_match_raw_value,
                    bus1_generator_dead_bus_raw_value,
                }
            }
            2566778110u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let bus1_average_ac_frequency_raw_value: u16 =
                    ((frame_payload >> 32) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let bs1_avrge_line_neutral_acrms_voltage_raw_value: u16 =
                    ((frame_payload >> 16) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let bus1_average_line_line_acrms_voltage_raw_value: u16 =
                    (frame_payload & 65535) as u16;
                DecodedFrame::Baac {
                    bus1_average_ac_frequency_raw_value,
                    bs1_avrge_line_neutral_acrms_voltage_raw_value,
                    bus1_average_line_line_acrms_voltage_raw_value,
                }
            }
            2633895422u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let number_of_members_raw_value: u8 = (frame_payload & 255) as u8;
                DecodedFrame::Wsmstr {
                    number_of_members_raw_value,
                }
            }
            2566838526u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let arbitrary_address_capable_raw_value: bool = ((frame_payload >> 63) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let industry_group_raw_value: u8 = ((frame_payload >> 60) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vehicle_system_instance_raw_value: u8 = ((frame_payload >> 56) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vehicle_system_raw_value: u8 = ((frame_payload >> 49) & 127) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let function_raw_value: u8 = ((frame_payload >> 40) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let function_instance_raw_value: u8 = ((frame_payload >> 35) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let ecu_instance_raw_value: u8 = ((frame_payload >> 32) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let manufacturer_code_raw_value: u16 = ((frame_payload >> 21) & 2047) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let identity_number_raw_value: u32 = (frame_payload & 2097151) as u32;
                let industry_group = IndustryGroup2566838526::from(industry_group_raw_value);
                DecodedFrame::Ca {
                    arbitrary_address_capable_raw_value,
                    industry_group_raw_value,
                    vehicle_system_instance_raw_value,
                    vehicle_system_raw_value,
                    function_raw_value,
                    function_instance_raw_value,
                    ecu_instance_raw_value,
                    manufacturer_code_raw_value,
                    identity_number_raw_value,
                    industry_group,
                }
            }
            2565799678u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let arbitrary_address_capable_raw_value: bool = ((frame_payload >> 63) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let industry_group_raw_value: u8 = ((frame_payload >> 60) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vehicle_system_instance_raw_value: u8 = ((frame_payload >> 56) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vehicle_system_raw_value: u8 = ((frame_payload >> 49) & 127) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let function_raw_value: u8 = ((frame_payload >> 40) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let function_instance_raw_value: u8 = ((frame_payload >> 35) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let ecu_instance_raw_value: u8 = ((frame_payload >> 32) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let manufacturer_code_raw_value: u16 = ((frame_payload >> 21) & 2047) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let identity_number_raw_value: u32 = (frame_payload & 2097151) as u32;
                let industry_group = IndustryGroup2565799678::from(industry_group_raw_value);
                DecodedFrame::Acl {
                    arbitrary_address_capable_raw_value,
                    industry_group_raw_value,
                    vehicle_system_instance_raw_value,
                    vehicle_system_raw_value,
                    function_raw_value,
                    function_instance_raw_value,
                    ecu_instance_raw_value,
                    manufacturer_code_raw_value,
                    identity_number_raw_value,
                    industry_group,
                }
            }
            2563440382u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let shrt_name_of_actual_reporting_device_raw_value: u32 =
                    ((frame_payload >> 32) & 4294967295) as u32;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let length_of_data_for_the_reported_pgn_raw_value: u8 =
                    ((frame_payload >> 24) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let pg_nof_requsted_information_raw_value: u32 = (frame_payload & 16777215) as u32;
                DecodedFrame::Xfer {
                    shrt_name_of_actual_reporting_device_raw_value,
                    length_of_data_for_the_reported_pgn_raw_value,
                    pg_nof_requsted_information_raw_value,
                }
            }
            2565603070u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let sequence_number_raw_value: u8 = (frame_payload & 255) as u8;
                DecodedFrame::Tpdt {
                    sequence_number_raw_value,
                }
            }
            2565668606u32 => {
                todo!();
                let frame_payload: u64 = LE::read_u64(frame.data());
                let total_number_of_packets_eo_ma_raw_value: Option<u8> =
                    Some(((frame_payload >> 24) & 255) as u8);
                todo!();
                let frame_payload: u64 = LE::read_u64(frame.data());
                let total_message_size_eo_ma_raw_value: Option<u16> =
                    Some(((frame_payload >> 8) & 65535) as u16);
                todo!();
                let frame_payload: u64 = LE::read_u64(frame.data());
                let total_message_size_bam_raw_value: Option<u16> =
                    Some(((frame_payload >> 8) & 65535) as u16);
                todo!();
                let frame_payload: u64 = LE::read_u64(frame.data());
                let total_number_of_packets_bam_raw_value: Option<u8> =
                    Some(((frame_payload >> 24) & 255) as u8);
                todo!();
                let frame_payload: u64 = LE::read_u64(frame.data());
                let connection_abort_reason_raw_value: Option<u8> =
                    Some(((frame_payload >> 8) & 255) as u8);
                todo!();
                let frame_payload: u64 = LE::read_u64(frame.data());
                let next_packet_number_to_be_sent_raw_value: Option<u8> =
                    Some(((frame_payload >> 16) & 255) as u8);
                todo!();
                let frame_payload: u64 = LE::read_u64(frame.data());
                let number_of_packets_that_can_be_sent_raw_value: Option<u8> =
                    Some(((frame_payload >> 8) & 255) as u8);
                let frame_payload: u64 = LE::read_u64(frame.data());
                let pg_number_raw_value: u32 = ((frame_payload >> 40) & 16777215) as u32;
                todo!();
                let frame_payload: u64 = LE::read_u64(frame.data());
                let maximum_number_of_packets_raw_value: Option<u8> =
                    Some(((frame_payload >> 32) & 255) as u8);
                todo!();
                let frame_payload: u64 = LE::read_u64(frame.data());
                let total_number_of_packets_raw_value: Option<u8> =
                    Some(((frame_payload >> 24) & 255) as u8);
                todo!();
                let frame_payload: u64 = LE::read_u64(frame.data());
                let total_message_size_raw_value: Option<u16> =
                    Some(((frame_payload >> 8) & 65535) as u16);
                let frame_payload: u64 = LE::read_u64(frame.data());
                let control_byte_raw_value: u8 = (frame_payload & 255) as u8;
                let pg_number = PgNumber2565668606::from(pg_number_raw_value);
                let control_byte = ControlByte2565668606::from(control_byte_raw_value);
                DecodedFrame::Tpcm {
                    total_number_of_packets_eo_ma_raw_value,
                    total_message_size_eo_ma_raw_value,
                    total_message_size_bam_raw_value,
                    total_number_of_packets_bam_raw_value,
                    connection_abort_reason_raw_value,
                    next_packet_number_to_be_sent_raw_value,
                    number_of_packets_that_can_be_sent_raw_value,
                    pg_number_raw_value,
                    maximum_number_of_packets_raw_value,
                    total_number_of_packets_raw_value,
                    total_message_size_raw_value,
                    control_byte_raw_value,
                    pg_number,
                    control_byte,
                }
            }
            2563374846u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let use_transfer_mode_raw_value: u8 = ((frame_payload >> 24) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let parameter_group_number_raw_value: u32 = (frame_payload & 16777215) as u32;
                let use_transfer_mode =
                    UseTransferMode2563374846::from(use_transfer_mode_raw_value);
                DecodedFrame::Rqst2 {
                    use_transfer_mode_raw_value,
                    parameter_group_number_raw_value,
                    use_transfer_mode,
                }
            }
            2565537534u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let parameter_group_number_raw_value: u32 = (frame_payload & 16777215) as u32;
                DecodedFrame::Rqst {
                    parameter_group_number_raw_value,
                }
            }
            2560556798u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let permanent_dt_cs_raw_value: u8 = ((frame_payload >> 32) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let previously_mil_on_dt_cs_raw_value: u8 = ((frame_payload >> 24) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let mil_on_dt_cs_raw_value: u8 = ((frame_payload >> 16) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let all_pending_dt_cs_raw_value: u8 = ((frame_payload >> 8) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let pending_dt_cs_raw_value: u8 = (frame_payload & 255) as u8;
                DecodedFrame::Dm29 {
                    permanent_dt_cs_raw_value,
                    previously_mil_on_dt_cs_raw_value,
                    mil_on_dt_cs_raw_value,
                    all_pending_dt_cs_raw_value,
                    pending_dt_cs_raw_value,
                }
            }
            2566750462u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn2_raw_value: u16 = ((frame_payload >> 48) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let flash_red_stop_lamp_raw_value: u8 = ((frame_payload >> 12) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let flash_protect_lamp_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let flash_malfunc_indicator_lamp_raw_value: u8 = ((frame_payload >> 14) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let flash_amber_warning_lamp_raw_value: u8 = ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let malfunction_indicator_lamp_status_raw_value: u8 =
                    ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let amber_warning_lamp_status_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let occurence_count1_raw_value: u8 = ((frame_payload >> 40) & 127) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn_conversion_method1_raw_value: bool = ((frame_payload >> 47) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let failure_mode_identifier1_raw_value: u8 = ((frame_payload >> 32) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn1_raw_value: u16 = ((frame_payload >> 16) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let red_stop_lamp_state_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let protect_lamp_status_raw_value: u8 = (frame_payload & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn1_high_raw_value: u8 = ((frame_payload >> 37) & 7) as u8;
                let flash_red_stop_lamp =
                    FlashRedStopLamp2566750462::from(flash_red_stop_lamp_raw_value);
                let flash_protect_lamp =
                    FlashProtectLamp2566750462::from(flash_protect_lamp_raw_value);
                let flash_malfunc_indicator_lamp = FlashMalfuncIndicatorLamp2566750462::from(
                    flash_malfunc_indicator_lamp_raw_value,
                );
                let flash_amber_warning_lamp =
                    FlashAmberWarningLamp2566750462::from(flash_amber_warning_lamp_raw_value);
                let malfunction_indicator_lamp_status =
                    MalfunctionIndicatorLampStatus2566750462::from(
                        malfunction_indicator_lamp_status_raw_value,
                    );
                let amber_warning_lamp_status =
                    AmberWarningLampStatus2566750462::from(amber_warning_lamp_status_raw_value);
                let failure_mode_identifier1 =
                    FailureModeIdentifier12566750462::from(failure_mode_identifier1_raw_value);
                let red_stop_lamp_state =
                    RedStopLampState2566750462::from(red_stop_lamp_state_raw_value);
                let protect_lamp_status =
                    ProtectLampStatus2566750462::from(protect_lamp_status_raw_value);
                DecodedFrame::Dm28 {
                    spn2_raw_value,
                    flash_red_stop_lamp_raw_value,
                    flash_protect_lamp_raw_value,
                    flash_malfunc_indicator_lamp_raw_value,
                    flash_amber_warning_lamp_raw_value,
                    malfunction_indicator_lamp_status_raw_value,
                    amber_warning_lamp_status_raw_value,
                    occurence_count1_raw_value,
                    spn_conversion_method1_raw_value,
                    failure_mode_identifier1_raw_value,
                    spn1_raw_value,
                    red_stop_lamp_state_raw_value,
                    protect_lamp_status_raw_value,
                    spn1_high_raw_value,
                    flash_red_stop_lamp,
                    flash_protect_lamp,
                    flash_malfunc_indicator_lamp,
                    flash_amber_warning_lamp,
                    malfunction_indicator_lamp_status,
                    amber_warning_lamp_status,
                    failure_mode_identifier1,
                    red_stop_lamp_state,
                    protect_lamp_status,
                }
            }
            2566750974u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn2_raw_value: u16 = ((frame_payload >> 48) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let flash_red_stop_lamp_raw_value: u8 = ((frame_payload >> 12) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let flash_protect_lamp_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let flash_malfunc_indicator_lamp_raw_value: u8 = ((frame_payload >> 14) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let flash_amber_warning_lamp_raw_value: u8 = ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let malfunction_indicator_lamp_status_raw_value: u8 =
                    ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let amber_warning_lamp_status_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let occurence_count1_raw_value: u8 = ((frame_payload >> 40) & 127) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn_conversion_method1_raw_value: bool = ((frame_payload >> 47) & 1) == 1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let failure_mode_identifier1_raw_value: u8 = ((frame_payload >> 32) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn1_raw_value: u16 = ((frame_payload >> 16) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let red_stop_lamp_state_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let protect_lamp_status_raw_value: u8 = (frame_payload & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let spn1_high_raw_value: u8 = ((frame_payload >> 37) & 7) as u8;
                let flash_red_stop_lamp =
                    FlashRedStopLamp2566750974::from(flash_red_stop_lamp_raw_value);
                let flash_protect_lamp =
                    FlashProtectLamp2566750974::from(flash_protect_lamp_raw_value);
                let flash_malfunc_indicator_lamp = FlashMalfuncIndicatorLamp2566750974::from(
                    flash_malfunc_indicator_lamp_raw_value,
                );
                let flash_amber_warning_lamp =
                    FlashAmberWarningLamp2566750974::from(flash_amber_warning_lamp_raw_value);
                let malfunction_indicator_lamp_status =
                    MalfunctionIndicatorLampStatus2566750974::from(
                        malfunction_indicator_lamp_status_raw_value,
                    );
                let amber_warning_lamp_status =
                    AmberWarningLampStatus2566750974::from(amber_warning_lamp_status_raw_value);
                let failure_mode_identifier1 =
                    FailureModeIdentifier12566750974::from(failure_mode_identifier1_raw_value);
                let red_stop_lamp_state =
                    RedStopLampState2566750974::from(red_stop_lamp_state_raw_value);
                let protect_lamp_status =
                    ProtectLampStatus2566750974::from(protect_lamp_status_raw_value);
                DecodedFrame::Dm27 {
                    spn2_raw_value,
                    flash_red_stop_lamp_raw_value,
                    flash_protect_lamp_raw_value,
                    flash_malfunc_indicator_lamp_raw_value,
                    flash_amber_warning_lamp_raw_value,
                    malfunction_indicator_lamp_status_raw_value,
                    amber_warning_lamp_status_raw_value,
                    occurence_count1_raw_value,
                    spn_conversion_method1_raw_value,
                    failure_mode_identifier1_raw_value,
                    spn1_raw_value,
                    red_stop_lamp_state_raw_value,
                    protect_lamp_status_raw_value,
                    spn1_high_raw_value,
                    flash_red_stop_lamp,
                    flash_protect_lamp,
                    flash_malfunc_indicator_lamp,
                    flash_amber_warning_lamp,
                    malfunction_indicator_lamp_status,
                    amber_warning_lamp_status,
                    failure_mode_identifier1,
                    red_stop_lamp_state,
                    protect_lamp_status,
                }
            }
            2566748414u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt2_trp_actv_rgnration_time_raw_value: u32 =
                    ((frame_payload >> 32) & 4294967295) as u32;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment2_trip_fuel_used_raw_value: f64 =
                    (frame_payload & 4294967295) as f64 * 0.5;
                DecodedFrame::Ati2 {
                    aftrtrtmnt2_trp_actv_rgnration_time_raw_value,
                    aftertreatment2_trip_fuel_used_raw_value,
                }
            }
            2566748670u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt1_trp_actv_rgnration_time_raw_value: u32 =
                    ((frame_payload >> 32) & 4294967295) as u32;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment1_trip_fuel_used_raw_value: f64 =
                    (frame_payload & 4294967295) as f64 * 0.5;
                DecodedFrame::Ati1 {
                    aftrtrtmnt1_trp_actv_rgnration_time_raw_value,
                    aftertreatment1_trip_fuel_used_raw_value,
                }
            }
            2566745598u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment1_second_air_press_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtreatment1_second_air_mass_flow_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.2;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment1_second_air_temp_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtratment1_second_air_diff_press_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.0078125 + -250.0;
                DecodedFrame::Aac3 {
                    aftertreatment1_second_air_press_raw_value,
                    aftrtreatment1_second_air_mass_flow_raw_value,
                    aftertreatment1_second_air_temp_raw_value,
                    aftrtratment1_second_air_diff_press_raw_value,
                }
            }
            2566745342u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment2_second_air_press_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtreatment2_second_air_mass_flow_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.2;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment2_second_air_temp_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtratment2_second_air_diff_press_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.0078125 + -250.0;
                DecodedFrame::Aac4 {
                    aftertreatment2_second_air_press_raw_value,
                    aftrtreatment2_second_air_mass_flow_raw_value,
                    aftertreatment2_second_air_temp_raw_value,
                    aftrtratment2_second_air_diff_press_raw_value,
                }
            }
            2566754558u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let number_of_aetc_data_points_raw_value: u8 = ((frame_payload >> 4) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aetc_data_collection_standard_raw_value: u8 = (frame_payload & 15) as u8;
                let aetc_data_collection_standard = AetcDataCollectionStandard2566754558::from(
                    aetc_data_collection_standard_raw_value,
                );
                DecodedFrame::Aetc {
                    number_of_aetc_data_points_raw_value,
                    aetc_data_collection_standard_raw_value,
                    aetc_data_collection_standard,
                }
            }
            2566749950u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let right_headlamp_light_distribution_raw_value: u8 =
                    ((frame_payload >> 12) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let left_headlamp_light_distribution_raw_value: u8 =
                    ((frame_payload >> 8) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rght_headlamp_dynamic_bending_light_raw_value: u8 =
                    ((frame_payload >> 3) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let left_headlamp_dynamic_bending_light_raw_value: u8 = (frame_payload & 7) as u8;
                let right_headlamp_light_distribution =
                    RightHeadlampLightDistribution2566749950::from(
                        right_headlamp_light_distribution_raw_value,
                    );
                let left_headlamp_light_distribution =
                    LeftHeadlampLightDistribution2566749950::from(
                        left_headlamp_light_distribution_raw_value,
                    );
                let rght_headlamp_dynamic_bending_light =
                    RghtHeadlampDynamicBendingLight2566749950::from(
                        rght_headlamp_dynamic_bending_light_raw_value,
                    );
                let left_headlamp_dynamic_bending_light =
                    LeftHeadlampDynamicBendingLight2566749950::from(
                        left_headlamp_dynamic_bending_light_raw_value,
                    );
                DecodedFrame::Afss {
                    right_headlamp_light_distribution_raw_value,
                    left_headlamp_light_distribution_raw_value,
                    rght_headlamp_dynamic_bending_light_raw_value,
                    left_headlamp_dynamic_bending_light_raw_value,
                    right_headlamp_light_distribution,
                    left_headlamp_light_distribution,
                    rght_headlamp_dynamic_bending_light,
                    left_headlamp_dynamic_bending_light,
                }
            }
            2565869310u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt1_intk_oxygn_snsr_prlmnry_f_raw_value: u8 =
                    ((frame_payload >> 56) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt1_intk_n_ox_snsr_prlmnry_fmi_raw_value: u8 =
                    ((frame_payload >> 48) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt1_intk_gs_snsr_heater_ctrl_raw_value: u8 =
                    ((frame_payload >> 45) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt1_intk_gs_snsr_htr_prlmnry_f_raw_value: u8 =
                    ((frame_payload >> 40) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt1_intk_wd_rng_o2_rdng_stble_raw_value: u8 =
                    ((frame_payload >> 38) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt1_intk_n_ox_reading_stable_raw_value: u8 =
                    ((frame_payload >> 36) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt1_intke_gas_sensor_at_temp_raw_value: u8 =
                    ((frame_payload >> 34) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt1_intk_gs_snsr_pwr_in_range_raw_value: u8 =
                    ((frame_payload >> 32) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment1_intake_o2_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.000514 + -12.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment1_intake_n_ox_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.05 + -200.0;
                let aftrtrtmnt1_intk_gs_snsr_heater_ctrl =
                    Aftrtrtmnt1IntkGsSnsrHeaterCtrl2565869310::from(
                        aftrtrtmnt1_intk_gs_snsr_heater_ctrl_raw_value,
                    );
                let aftrtrtmnt1_intk_wd_rng_o2_rdng_stble =
                    Aftrtrtmnt1IntkWdRngO2RdngStble2565869310::from(
                        aftrtrtmnt1_intk_wd_rng_o2_rdng_stble_raw_value,
                    );
                let aftrtrtmnt1_intk_n_ox_reading_stable =
                    Aftrtrtmnt1IntkNOxReadingStable2565869310::from(
                        aftrtrtmnt1_intk_n_ox_reading_stable_raw_value,
                    );
                let aftrtrtmnt1_intk_gs_snsr_pwr_in_range =
                    Aftrtrtmnt1IntkGsSnsrPwrInRange2565869310::from(
                        aftrtrtmnt1_intk_gs_snsr_pwr_in_range_raw_value,
                    );
                DecodedFrame::At1i1 {
                    aftrtrtmnt1_intk_oxygn_snsr_prlmnry_f_raw_value,
                    aftrtrtmnt1_intk_n_ox_snsr_prlmnry_fmi_raw_value,
                    aftrtrtmnt1_intk_gs_snsr_heater_ctrl_raw_value,
                    aftrtrtmnt1_intk_gs_snsr_htr_prlmnry_f_raw_value,
                    aftrtrtmnt1_intk_wd_rng_o2_rdng_stble_raw_value,
                    aftrtrtmnt1_intk_n_ox_reading_stable_raw_value,
                    aftrtrtmnt1_intke_gas_sensor_at_temp_raw_value,
                    aftrtrtmnt1_intk_gs_snsr_pwr_in_range_raw_value,
                    aftertreatment1_intake_o2_raw_value,
                    aftertreatment1_intake_n_ox_raw_value,
                    aftrtrtmnt1_intk_gs_snsr_heater_ctrl,
                    aftrtrtmnt1_intk_wd_rng_o2_rdng_stble,
                    aftrtrtmnt1_intk_n_ox_reading_stable,
                    aftrtrtmnt1_intk_gs_snsr_pwr_in_range,
                }
            }
            2566763774u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt1_prtclt_trp_intk_gs_tmp_prl_raw_value: u8 =
                    ((frame_payload >> 40) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt1_exhst_gs_tmp1_prlmnry_fmi_raw_value: u8 =
                    ((frame_payload >> 32) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt1_prtclt_trp_intk_gas_temp_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment1_exhaust_gas_temp1_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.03125 + -273.0;
                DecodedFrame::At1i2 {
                    aftrtrtmnt1_prtclt_trp_intk_gs_tmp_prl_raw_value,
                    aftrtrtmnt1_exhst_gs_tmp1_prlmnry_fmi_raw_value,
                    aftrtrtmnt1_prtclt_trp_intk_gas_temp_raw_value,
                    aftertreatment1_exhaust_gas_temp1_raw_value,
                }
            }
            2565869566u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt1_otlt_oxygn_snsr_prlmnry_f_raw_value: u8 =
                    ((frame_payload >> 56) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt1_otlt_n_ox_snsr_prlmnry_fmi_raw_value: u8 =
                    ((frame_payload >> 48) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt1_otlt_gs_snsr_heater_ctrl_raw_value: u8 =
                    ((frame_payload >> 45) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt1_otlt_gs_snsr_htr_prlmnry_f_raw_value: u8 =
                    ((frame_payload >> 40) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt1_otlt_wd_rng_o2_rdng_stble_raw_value: u8 =
                    ((frame_payload >> 38) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt1_otlt_n_ox_reading_stable_raw_value: u8 =
                    ((frame_payload >> 36) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt1_otlet_gas_sensor_at_temp_raw_value: u8 =
                    ((frame_payload >> 34) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt1_otlt_gs_snsr_pwr_in_range_raw_value: u8 =
                    ((frame_payload >> 32) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment1_outlet_o2_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.000514 + -12.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment1_outlet_n_ox_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.05 + -200.0;
                let aftrtrtmnt1_otlt_gs_snsr_heater_ctrl =
                    Aftrtrtmnt1OtltGsSnsrHeaterCtrl2565869566::from(
                        aftrtrtmnt1_otlt_gs_snsr_heater_ctrl_raw_value,
                    );
                let aftrtrtmnt1_otlt_wd_rng_o2_rdng_stble =
                    Aftrtrtmnt1OtltWdRngO2RdngStble2565869566::from(
                        aftrtrtmnt1_otlt_wd_rng_o2_rdng_stble_raw_value,
                    );
                let aftrtrtmnt1_otlt_n_ox_reading_stable =
                    Aftrtrtmnt1OtltNOxReadingStable2565869566::from(
                        aftrtrtmnt1_otlt_n_ox_reading_stable_raw_value,
                    );
                let aftrtrtmnt1_otlet_gas_sensor_at_temp =
                    Aftrtrtmnt1OtletGasSensorAtTemp2565869566::from(
                        aftrtrtmnt1_otlet_gas_sensor_at_temp_raw_value,
                    );
                let aftrtrtmnt1_otlt_gs_snsr_pwr_in_range =
                    Aftrtrtmnt1OtltGsSnsrPwrInRange2565869566::from(
                        aftrtrtmnt1_otlt_gs_snsr_pwr_in_range_raw_value,
                    );
                DecodedFrame::At1o1 {
                    aftrtrtmnt1_otlt_oxygn_snsr_prlmnry_f_raw_value,
                    aftrtrtmnt1_otlt_n_ox_snsr_prlmnry_fmi_raw_value,
                    aftrtrtmnt1_otlt_gs_snsr_heater_ctrl_raw_value,
                    aftrtrtmnt1_otlt_gs_snsr_htr_prlmnry_f_raw_value,
                    aftrtrtmnt1_otlt_wd_rng_o2_rdng_stble_raw_value,
                    aftrtrtmnt1_otlt_n_ox_reading_stable_raw_value,
                    aftrtrtmnt1_otlet_gas_sensor_at_temp_raw_value,
                    aftrtrtmnt1_otlt_gs_snsr_pwr_in_range_raw_value,
                    aftertreatment1_outlet_o2_raw_value,
                    aftertreatment1_outlet_n_ox_raw_value,
                    aftrtrtmnt1_otlt_gs_snsr_heater_ctrl,
                    aftrtrtmnt1_otlt_wd_rng_o2_rdng_stble,
                    aftrtrtmnt1_otlt_n_ox_reading_stable,
                    aftrtrtmnt1_otlet_gas_sensor_at_temp,
                    aftrtrtmnt1_otlt_gs_snsr_pwr_in_range,
                }
            }
            2566763518u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt1_prtclt_trp_otlt_exhst_gs_t_raw_value: u8 =
                    ((frame_payload >> 40) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt1_exhst_gs_tmp3_prlmnry_fmi_raw_value: u8 =
                    ((frame_payload >> 32) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt1_prtclt_trp_otlt_gas_temp_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment1_exhaust_gas_temp3_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.03125 + -273.0;
                DecodedFrame::At1o2 {
                    aftrtrtmnt1_prtclt_trp_otlt_exhst_gs_t_raw_value,
                    aftrtrtmnt1_exhst_gs_tmp3_prlmnry_fmi_raw_value,
                    aftrtrtmnt1_prtclt_trp_otlt_gas_temp_raw_value,
                    aftertreatment1_exhaust_gas_temp3_raw_value,
                }
            }
            2565869822u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt2_intk_oxygn_snsr_prlmnry_f_raw_value: u8 =
                    ((frame_payload >> 56) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt2_intk_n_ox_snsr_prlmnry_fmi_raw_value: u8 =
                    ((frame_payload >> 48) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt2_intk_gs_snsr_heater_ctrl_raw_value: u8 =
                    ((frame_payload >> 45) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt2_intk_gs_snsr_htr_prlmnry_f_raw_value: u8 =
                    ((frame_payload >> 40) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt2_intk_wd_rng_o2_rdng_stble_raw_value: u8 =
                    ((frame_payload >> 38) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt2_intk_n_ox_reading_stable_raw_value: u8 =
                    ((frame_payload >> 36) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt2_intke_gas_sensor_at_temp_raw_value: u8 =
                    ((frame_payload >> 34) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt2_intk_gs_snsr_pwr_in_range_raw_value: u8 =
                    ((frame_payload >> 32) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment2_intake_o2_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.000514 + -12.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment2_intake_n_ox_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.05 + -200.0;
                let aftrtrtmnt2_intk_gs_snsr_heater_ctrl =
                    Aftrtrtmnt2IntkGsSnsrHeaterCtrl2565869822::from(
                        aftrtrtmnt2_intk_gs_snsr_heater_ctrl_raw_value,
                    );
                let aftrtrtmnt2_intk_wd_rng_o2_rdng_stble =
                    Aftrtrtmnt2IntkWdRngO2RdngStble2565869822::from(
                        aftrtrtmnt2_intk_wd_rng_o2_rdng_stble_raw_value,
                    );
                let aftrtrtmnt2_intk_n_ox_reading_stable =
                    Aftrtrtmnt2IntkNOxReadingStable2565869822::from(
                        aftrtrtmnt2_intk_n_ox_reading_stable_raw_value,
                    );
                let aftrtrtmnt2_intke_gas_sensor_at_temp =
                    Aftrtrtmnt2IntkeGasSensorAtTemp2565869822::from(
                        aftrtrtmnt2_intke_gas_sensor_at_temp_raw_value,
                    );
                let aftrtrtmnt2_intk_gs_snsr_pwr_in_range =
                    Aftrtrtmnt2IntkGsSnsrPwrInRange2565869822::from(
                        aftrtrtmnt2_intk_gs_snsr_pwr_in_range_raw_value,
                    );
                DecodedFrame::At2i1 {
                    aftrtrtmnt2_intk_oxygn_snsr_prlmnry_f_raw_value,
                    aftrtrtmnt2_intk_n_ox_snsr_prlmnry_fmi_raw_value,
                    aftrtrtmnt2_intk_gs_snsr_heater_ctrl_raw_value,
                    aftrtrtmnt2_intk_gs_snsr_htr_prlmnry_f_raw_value,
                    aftrtrtmnt2_intk_wd_rng_o2_rdng_stble_raw_value,
                    aftrtrtmnt2_intk_n_ox_reading_stable_raw_value,
                    aftrtrtmnt2_intke_gas_sensor_at_temp_raw_value,
                    aftrtrtmnt2_intk_gs_snsr_pwr_in_range_raw_value,
                    aftertreatment2_intake_o2_raw_value,
                    aftertreatment2_intake_n_ox_raw_value,
                    aftrtrtmnt2_intk_gs_snsr_heater_ctrl,
                    aftrtrtmnt2_intk_wd_rng_o2_rdng_stble,
                    aftrtrtmnt2_intk_n_ox_reading_stable,
                    aftrtrtmnt2_intke_gas_sensor_at_temp,
                    aftrtrtmnt2_intk_gs_snsr_pwr_in_range,
                }
            }
            2566763006u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt2_prtclt_trp_intk_gs_tmp_prl_raw_value: u8 =
                    ((frame_payload >> 40) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt2_exhst_gs_tmp1_prlmnry_fmi_raw_value: u8 =
                    ((frame_payload >> 32) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt2_prtclt_trp_intk_gas_temp_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment2_exhaust_gas_temp1_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.03125 + -273.0;
                DecodedFrame::At2i2 {
                    aftrtrtmnt2_prtclt_trp_intk_gs_tmp_prl_raw_value,
                    aftrtrtmnt2_exhst_gs_tmp1_prlmnry_fmi_raw_value,
                    aftrtrtmnt2_prtclt_trp_intk_gas_temp_raw_value,
                    aftertreatment2_exhaust_gas_temp1_raw_value,
                }
            }
            2565870078u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt2_otlt_oxygn_snsr_prlmnry_f_raw_value: u8 =
                    ((frame_payload >> 56) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt2_otlt_n_ox_snsr_prlmnry_fmi_raw_value: u8 =
                    ((frame_payload >> 48) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt2_otlt_gs_snsr_heater_ctrl_raw_value: u8 =
                    ((frame_payload >> 45) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt2_otlt_gs_snsr_htr_prlmnry_f_raw_value: u8 =
                    ((frame_payload >> 40) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt2_otlt_wd_rng_o2_rdng_stble_raw_value: u8 =
                    ((frame_payload >> 38) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt2_otlt_n_ox_reading_stable_raw_value: u8 =
                    ((frame_payload >> 36) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt2_otlet_gas_sensor_at_temp_raw_value: u8 =
                    ((frame_payload >> 34) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt2_otlt_gs_snsr_pwr_in_range_raw_value: u8 =
                    ((frame_payload >> 32) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment2_outlet_o2_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.000514 + -12.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment2_outlet_n_ox_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.05 + -200.0;
                let aftrtrtmnt2_otlt_gs_snsr_heater_ctrl =
                    Aftrtrtmnt2OtltGsSnsrHeaterCtrl2565870078::from(
                        aftrtrtmnt2_otlt_gs_snsr_heater_ctrl_raw_value,
                    );
                let aftrtrtmnt2_otlt_wd_rng_o2_rdng_stble =
                    Aftrtrtmnt2OtltWdRngO2RdngStble2565870078::from(
                        aftrtrtmnt2_otlt_wd_rng_o2_rdng_stble_raw_value,
                    );
                let aftrtrtmnt2_otlt_n_ox_reading_stable =
                    Aftrtrtmnt2OtltNOxReadingStable2565870078::from(
                        aftrtrtmnt2_otlt_n_ox_reading_stable_raw_value,
                    );
                let aftrtrtmnt2_otlet_gas_sensor_at_temp =
                    Aftrtrtmnt2OtletGasSensorAtTemp2565870078::from(
                        aftrtrtmnt2_otlet_gas_sensor_at_temp_raw_value,
                    );
                let aftrtrtmnt2_otlt_gs_snsr_pwr_in_range =
                    Aftrtrtmnt2OtltGsSnsrPwrInRange2565870078::from(
                        aftrtrtmnt2_otlt_gs_snsr_pwr_in_range_raw_value,
                    );
                DecodedFrame::At2o1 {
                    aftrtrtmnt2_otlt_oxygn_snsr_prlmnry_f_raw_value,
                    aftrtrtmnt2_otlt_n_ox_snsr_prlmnry_fmi_raw_value,
                    aftrtrtmnt2_otlt_gs_snsr_heater_ctrl_raw_value,
                    aftrtrtmnt2_otlt_gs_snsr_htr_prlmnry_f_raw_value,
                    aftrtrtmnt2_otlt_wd_rng_o2_rdng_stble_raw_value,
                    aftrtrtmnt2_otlt_n_ox_reading_stable_raw_value,
                    aftrtrtmnt2_otlet_gas_sensor_at_temp_raw_value,
                    aftrtrtmnt2_otlt_gs_snsr_pwr_in_range_raw_value,
                    aftertreatment2_outlet_o2_raw_value,
                    aftertreatment2_outlet_n_ox_raw_value,
                    aftrtrtmnt2_otlt_gs_snsr_heater_ctrl,
                    aftrtrtmnt2_otlt_wd_rng_o2_rdng_stble,
                    aftrtrtmnt2_otlt_n_ox_reading_stable,
                    aftrtrtmnt2_otlet_gas_sensor_at_temp,
                    aftrtrtmnt2_otlt_gs_snsr_pwr_in_range,
                }
            }
            2566762750u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt2_prtclt_trp_exhst_gs_tmp_pr_raw_value: u8 =
                    ((frame_payload >> 40) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt2_exhst_gs_tmp3_prlmnry_fmi_raw_value: u8 =
                    ((frame_payload >> 32) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt2_prtclt_trp_otlt_gas_temp_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment2_exhaust_gas_temp3_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.03125 + -273.0;
                DecodedFrame::At2o2 {
                    aftrtrtmnt2_prtclt_trp_exhst_gs_tmp_pr_raw_value,
                    aftrtrtmnt2_exhst_gs_tmp3_prlmnry_fmi_raw_value,
                    aftrtrtmnt2_prtclt_trp_otlt_gas_temp_raw_value,
                    aftertreatment2_exhaust_gas_temp3_raw_value,
                }
            }
            2566753534u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let particulate_trap_outlet_press1_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let particulate_trap_intake_press1_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.1;
                DecodedFrame::Atgp1 {
                    particulate_trap_outlet_press1_raw_value,
                    particulate_trap_intake_press1_raw_value,
                }
            }
            2566753278u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let particulate_trap_outlet_press2_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let particulate_trap_intake_press2_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.1;
                DecodedFrame::Atgp2 {
                    particulate_trap_outlet_press2_raw_value,
                    particulate_trap_intake_press2_raw_value,
                }
            }
            2566762494u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt2_prtclt_trp_dlt_prss_prlmn_raw_value: u8 =
                    ((frame_payload >> 53) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt2_exhst_gs_tmp2_prlmnry_fmi_raw_value: u8 =
                    ((frame_payload >> 48) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt2_prtclte_trap_diff_press_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftrtrtmnt2_prtclt_trp_intrmdt_gs_tmp_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aftertreatment2_exhaust_gas_temp2_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.03125 + -273.0;
                DecodedFrame::Atm2 {
                    aftrtrtmnt2_prtclt_trp_dlt_prss_prlmn_raw_value,
                    aftrtrtmnt2_exhst_gs_tmp2_prlmnry_fmi_raw_value,
                    aftrtrtmnt2_prtclte_trap_diff_press_raw_value,
                    aftrtrtmnt2_prtclt_trp_intrmdt_gs_tmp_raw_value,
                    aftertreatment2_exhaust_gas_temp2_raw_value,
                }
            }
            2566749182u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let prtclt_trp1_tm_snc_lst_actv_rgnration_raw_value: u32 =
                    ((frame_payload >> 16) & 4294967295) as u32;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let particulate_trap1_ash_load_percent_raw_value: u8 =
                    ((frame_payload >> 8) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let particulate_trap1_soot_load_percent_raw_value: u8 = (frame_payload & 255) as u8;
                let particulate_trap1_ash_load_percent =
                    ParticulateTrap1AshLoadPercent2566749182::from(
                        particulate_trap1_ash_load_percent_raw_value,
                    );
                let particulate_trap1_soot_load_percent =
                    ParticulateTrap1SootLoadPercent2566749182::from(
                        particulate_trap1_soot_load_percent_raw_value,
                    );
                DecodedFrame::Ats1 {
                    prtclt_trp1_tm_snc_lst_actv_rgnration_raw_value,
                    particulate_trap1_ash_load_percent_raw_value,
                    particulate_trap1_soot_load_percent_raw_value,
                    particulate_trap1_ash_load_percent,
                    particulate_trap1_soot_load_percent,
                }
            }
            2566748926u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let prtclt_trp2_tm_snc_lst_actv_rgnration_raw_value: u32 =
                    ((frame_payload >> 16) & 4294967295) as u32;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let particulate_trap2_ash_load_percent_raw_value: u8 =
                    ((frame_payload >> 8) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let particulate_trap2_soot_load_percent_raw_value: u8 = (frame_payload & 255) as u8;
                let particulate_trap2_ash_load_percent =
                    ParticulateTrap2AshLoadPercent2566748926::from(
                        particulate_trap2_ash_load_percent_raw_value,
                    );
                let particulate_trap2_soot_load_percent =
                    ParticulateTrap2SootLoadPercent2566748926::from(
                        particulate_trap2_soot_load_percent_raw_value,
                    );
                DecodedFrame::Ats2 {
                    prtclt_trp2_tm_snc_lst_actv_rgnration_raw_value,
                    particulate_trap2_ash_load_percent_raw_value,
                    particulate_trap2_soot_load_percent_raw_value,
                    particulate_trap2_ash_load_percent,
                    particulate_trap2_soot_load_percent,
                }
            }
            2566838782u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o_channel2_raw_value: u16 = ((frame_payload >> 48) & 65535) as u16;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o_channel1_raw_value: u16 = ((frame_payload >> 32) & 65535) as u16;
                DecodedFrame::Auxio1 {
                    aux_i_o_channel2_raw_value,
                    aux_i_o_channel1_raw_value,
                }
            }
            2561146622u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o45_raw_value: u8 = ((frame_payload >> 62) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o46_raw_value: u8 = ((frame_payload >> 60) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o47_raw_value: u8 = ((frame_payload >> 58) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o48_raw_value: u8 = ((frame_payload >> 56) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o41_raw_value: u8 = ((frame_payload >> 54) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o42_raw_value: u8 = ((frame_payload >> 52) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o43_raw_value: u8 = ((frame_payload >> 50) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o44_raw_value: u8 = ((frame_payload >> 48) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o37_raw_value: u8 = ((frame_payload >> 46) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o38_raw_value: u8 = ((frame_payload >> 44) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o39_raw_value: u8 = ((frame_payload >> 42) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o40_raw_value: u8 = ((frame_payload >> 40) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o33_raw_value: u8 = ((frame_payload >> 38) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o34_raw_value: u8 = ((frame_payload >> 36) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o35_raw_value: u8 = ((frame_payload >> 34) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o36_raw_value: u8 = ((frame_payload >> 32) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o29_raw_value: u8 = ((frame_payload >> 30) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o30_raw_value: u8 = ((frame_payload >> 28) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o31_raw_value: u8 = ((frame_payload >> 26) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o32_raw_value: u8 = ((frame_payload >> 24) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o25_raw_value: u8 = ((frame_payload >> 22) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o26_raw_value: u8 = ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o27_raw_value: u8 = ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o28_raw_value: u8 = ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o21_raw_value: u8 = ((frame_payload >> 14) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o22_raw_value: u8 = ((frame_payload >> 12) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o23_raw_value: u8 = ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o24_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o17_raw_value: u8 = ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o18_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o19_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o20_raw_value: u8 = (frame_payload & 3) as u8;
                let aux_i_o45 = AuxIO452561146622::from(aux_i_o45_raw_value);
                let aux_i_o46 = AuxIO462561146622::from(aux_i_o46_raw_value);
                let aux_i_o47 = AuxIO472561146622::from(aux_i_o47_raw_value);
                let aux_i_o48 = AuxIO482561146622::from(aux_i_o48_raw_value);
                let aux_i_o41 = AuxIO412561146622::from(aux_i_o41_raw_value);
                let aux_i_o42 = AuxIO422561146622::from(aux_i_o42_raw_value);
                let aux_i_o43 = AuxIO432561146622::from(aux_i_o43_raw_value);
                let aux_i_o44 = AuxIO442561146622::from(aux_i_o44_raw_value);
                let aux_i_o37 = AuxIO372561146622::from(aux_i_o37_raw_value);
                let aux_i_o38 = AuxIO382561146622::from(aux_i_o38_raw_value);
                let aux_i_o39 = AuxIO392561146622::from(aux_i_o39_raw_value);
                let aux_i_o40 = AuxIO402561146622::from(aux_i_o40_raw_value);
                let aux_i_o33 = AuxIO332561146622::from(aux_i_o33_raw_value);
                let aux_i_o34 = AuxIO342561146622::from(aux_i_o34_raw_value);
                let aux_i_o35 = AuxIO352561146622::from(aux_i_o35_raw_value);
                let aux_i_o36 = AuxIO362561146622::from(aux_i_o36_raw_value);
                let aux_i_o29 = AuxIO292561146622::from(aux_i_o29_raw_value);
                let aux_i_o30 = AuxIO302561146622::from(aux_i_o30_raw_value);
                let aux_i_o31 = AuxIO312561146622::from(aux_i_o31_raw_value);
                let aux_i_o32 = AuxIO322561146622::from(aux_i_o32_raw_value);
                let aux_i_o25 = AuxIO252561146622::from(aux_i_o25_raw_value);
                let aux_i_o26 = AuxIO262561146622::from(aux_i_o26_raw_value);
                let aux_i_o27 = AuxIO272561146622::from(aux_i_o27_raw_value);
                let aux_i_o28 = AuxIO282561146622::from(aux_i_o28_raw_value);
                let aux_i_o21 = AuxIO212561146622::from(aux_i_o21_raw_value);
                let aux_i_o22 = AuxIO222561146622::from(aux_i_o22_raw_value);
                let aux_i_o23 = AuxIO232561146622::from(aux_i_o23_raw_value);
                let aux_i_o24 = AuxIO242561146622::from(aux_i_o24_raw_value);
                let aux_i_o17 = AuxIO172561146622::from(aux_i_o17_raw_value);
                let aux_i_o18 = AuxIO182561146622::from(aux_i_o18_raw_value);
                let aux_i_o19 = AuxIO192561146622::from(aux_i_o19_raw_value);
                let aux_i_o20 = AuxIO202561146622::from(aux_i_o20_raw_value);
                DecodedFrame::Auxio2 {
                    aux_i_o45_raw_value,
                    aux_i_o46_raw_value,
                    aux_i_o47_raw_value,
                    aux_i_o48_raw_value,
                    aux_i_o41_raw_value,
                    aux_i_o42_raw_value,
                    aux_i_o43_raw_value,
                    aux_i_o44_raw_value,
                    aux_i_o37_raw_value,
                    aux_i_o38_raw_value,
                    aux_i_o39_raw_value,
                    aux_i_o40_raw_value,
                    aux_i_o33_raw_value,
                    aux_i_o34_raw_value,
                    aux_i_o35_raw_value,
                    aux_i_o36_raw_value,
                    aux_i_o29_raw_value,
                    aux_i_o30_raw_value,
                    aux_i_o31_raw_value,
                    aux_i_o32_raw_value,
                    aux_i_o25_raw_value,
                    aux_i_o26_raw_value,
                    aux_i_o27_raw_value,
                    aux_i_o28_raw_value,
                    aux_i_o21_raw_value,
                    aux_i_o22_raw_value,
                    aux_i_o23_raw_value,
                    aux_i_o24_raw_value,
                    aux_i_o17_raw_value,
                    aux_i_o18_raw_value,
                    aux_i_o19_raw_value,
                    aux_i_o20_raw_value,
                    aux_i_o45,
                    aux_i_o46,
                    aux_i_o47,
                    aux_i_o48,
                    aux_i_o41,
                    aux_i_o42,
                    aux_i_o43,
                    aux_i_o44,
                    aux_i_o37,
                    aux_i_o38,
                    aux_i_o39,
                    aux_i_o40,
                    aux_i_o33,
                    aux_i_o34,
                    aux_i_o35,
                    aux_i_o36,
                    aux_i_o29,
                    aux_i_o30,
                    aux_i_o31,
                    aux_i_o32,
                    aux_i_o25,
                    aux_i_o26,
                    aux_i_o27,
                    aux_i_o28,
                    aux_i_o21,
                    aux_i_o22,
                    aux_i_o23,
                    aux_i_o24,
                    aux_i_o17,
                    aux_i_o18,
                    aux_i_o19,
                    aux_i_o20,
                }
            }
            2561081086u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o77_raw_value: u8 = ((frame_payload >> 62) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o78_raw_value: u8 = ((frame_payload >> 60) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o79_raw_value: u8 = ((frame_payload >> 58) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o80_raw_value: u8 = ((frame_payload >> 56) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o73_raw_value: u8 = ((frame_payload >> 54) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o74_raw_value: u8 = ((frame_payload >> 52) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o75_raw_value: u8 = ((frame_payload >> 50) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o76_raw_value: u8 = ((frame_payload >> 48) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o69_raw_value: u8 = ((frame_payload >> 46) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o70_raw_value: u8 = ((frame_payload >> 44) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o71_raw_value: u8 = ((frame_payload >> 42) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o72_raw_value: u8 = ((frame_payload >> 40) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o65_raw_value: u8 = ((frame_payload >> 38) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o66_raw_value: u8 = ((frame_payload >> 36) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o67_raw_value: u8 = ((frame_payload >> 34) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o68_raw_value: u8 = ((frame_payload >> 32) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o61_raw_value: u8 = ((frame_payload >> 30) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o62_raw_value: u8 = ((frame_payload >> 28) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o63_raw_value: u8 = ((frame_payload >> 26) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o64_raw_value: u8 = ((frame_payload >> 24) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o57_raw_value: u8 = ((frame_payload >> 22) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o58_raw_value: u8 = ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o59_raw_value: u8 = ((frame_payload >> 18) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o60_raw_value: u8 = ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o53_raw_value: u8 = ((frame_payload >> 14) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o54_raw_value: u8 = ((frame_payload >> 12) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o55_raw_value: u8 = ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o56_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o49_raw_value: u8 = ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o50_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o51_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o52_raw_value: u8 = (frame_payload & 3) as u8;
                let aux_i_o77 = AuxIO772561081086::from(aux_i_o77_raw_value);
                let aux_i_o78 = AuxIO782561081086::from(aux_i_o78_raw_value);
                let aux_i_o79 = AuxIO792561081086::from(aux_i_o79_raw_value);
                let aux_i_o80 = AuxIO802561081086::from(aux_i_o80_raw_value);
                let aux_i_o73 = AuxIO732561081086::from(aux_i_o73_raw_value);
                let aux_i_o74 = AuxIO742561081086::from(aux_i_o74_raw_value);
                let aux_i_o75 = AuxIO752561081086::from(aux_i_o75_raw_value);
                let aux_i_o76 = AuxIO762561081086::from(aux_i_o76_raw_value);
                let aux_i_o69 = AuxIO692561081086::from(aux_i_o69_raw_value);
                let aux_i_o70 = AuxIO702561081086::from(aux_i_o70_raw_value);
                let aux_i_o71 = AuxIO712561081086::from(aux_i_o71_raw_value);
                let aux_i_o72 = AuxIO722561081086::from(aux_i_o72_raw_value);
                let aux_i_o65 = AuxIO652561081086::from(aux_i_o65_raw_value);
                let aux_i_o66 = AuxIO662561081086::from(aux_i_o66_raw_value);
                let aux_i_o67 = AuxIO672561081086::from(aux_i_o67_raw_value);
                let aux_i_o68 = AuxIO682561081086::from(aux_i_o68_raw_value);
                let aux_i_o61 = AuxIO612561081086::from(aux_i_o61_raw_value);
                let aux_i_o62 = AuxIO622561081086::from(aux_i_o62_raw_value);
                let aux_i_o63 = AuxIO632561081086::from(aux_i_o63_raw_value);
                let aux_i_o64 = AuxIO642561081086::from(aux_i_o64_raw_value);
                let aux_i_o57 = AuxIO572561081086::from(aux_i_o57_raw_value);
                let aux_i_o58 = AuxIO582561081086::from(aux_i_o58_raw_value);
                let aux_i_o59 = AuxIO592561081086::from(aux_i_o59_raw_value);
                let aux_i_o60 = AuxIO602561081086::from(aux_i_o60_raw_value);
                let aux_i_o53 = AuxIO532561081086::from(aux_i_o53_raw_value);
                let aux_i_o54 = AuxIO542561081086::from(aux_i_o54_raw_value);
                let aux_i_o55 = AuxIO552561081086::from(aux_i_o55_raw_value);
                let aux_i_o56 = AuxIO562561081086::from(aux_i_o56_raw_value);
                let aux_i_o49 = AuxIO492561081086::from(aux_i_o49_raw_value);
                let aux_i_o50 = AuxIO502561081086::from(aux_i_o50_raw_value);
                let aux_i_o51 = AuxIO512561081086::from(aux_i_o51_raw_value);
                let aux_i_o52 = AuxIO522561081086::from(aux_i_o52_raw_value);
                DecodedFrame::Auxio3 {
                    aux_i_o77_raw_value,
                    aux_i_o78_raw_value,
                    aux_i_o79_raw_value,
                    aux_i_o80_raw_value,
                    aux_i_o73_raw_value,
                    aux_i_o74_raw_value,
                    aux_i_o75_raw_value,
                    aux_i_o76_raw_value,
                    aux_i_o69_raw_value,
                    aux_i_o70_raw_value,
                    aux_i_o71_raw_value,
                    aux_i_o72_raw_value,
                    aux_i_o65_raw_value,
                    aux_i_o66_raw_value,
                    aux_i_o67_raw_value,
                    aux_i_o68_raw_value,
                    aux_i_o61_raw_value,
                    aux_i_o62_raw_value,
                    aux_i_o63_raw_value,
                    aux_i_o64_raw_value,
                    aux_i_o57_raw_value,
                    aux_i_o58_raw_value,
                    aux_i_o59_raw_value,
                    aux_i_o60_raw_value,
                    aux_i_o53_raw_value,
                    aux_i_o54_raw_value,
                    aux_i_o55_raw_value,
                    aux_i_o56_raw_value,
                    aux_i_o49_raw_value,
                    aux_i_o50_raw_value,
                    aux_i_o51_raw_value,
                    aux_i_o52_raw_value,
                    aux_i_o77,
                    aux_i_o78,
                    aux_i_o79,
                    aux_i_o80,
                    aux_i_o73,
                    aux_i_o74,
                    aux_i_o75,
                    aux_i_o76,
                    aux_i_o69,
                    aux_i_o70,
                    aux_i_o71,
                    aux_i_o72,
                    aux_i_o65,
                    aux_i_o66,
                    aux_i_o67,
                    aux_i_o68,
                    aux_i_o61,
                    aux_i_o62,
                    aux_i_o63,
                    aux_i_o64,
                    aux_i_o57,
                    aux_i_o58,
                    aux_i_o59,
                    aux_i_o60,
                    aux_i_o53,
                    aux_i_o54,
                    aux_i_o55,
                    aux_i_o56,
                    aux_i_o49,
                    aux_i_o50,
                    aux_i_o51,
                    aux_i_o52,
                }
            }
            2561015550u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o92_raw_value: u8 = ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o85_raw_value: u8 = ((frame_payload >> 14) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o86_raw_value: u8 = ((frame_payload >> 12) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o87_raw_value: u8 = ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o88_raw_value: u8 = ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o81_raw_value: u8 = ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o82_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o83_raw_value: u8 = ((frame_payload >> 2) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o84_raw_value: u8 = (frame_payload & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o109_raw_value: u8 = ((frame_payload >> 62) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o110_raw_value: u8 = ((frame_payload >> 60) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o111_raw_value: u8 = ((frame_payload >> 58) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o112_raw_value: u8 = ((frame_payload >> 56) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o105_raw_value: u8 = ((frame_payload >> 54) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o106_raw_value: u8 = ((frame_payload >> 52) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o107_raw_value: u8 = ((frame_payload >> 50) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o108_raw_value: u8 = ((frame_payload >> 48) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o101_raw_value: u8 = ((frame_payload >> 46) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o102_raw_value: u8 = ((frame_payload >> 44) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o103_raw_value: u8 = ((frame_payload >> 42) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o104_raw_value: u8 = ((frame_payload >> 40) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o97_raw_value: u8 = ((frame_payload >> 38) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o98_raw_value: u8 = ((frame_payload >> 36) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o99_raw_value: u8 = ((frame_payload >> 34) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o100_raw_value: u8 = ((frame_payload >> 32) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o93_raw_value: u8 = ((frame_payload >> 30) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o94_raw_value: u8 = ((frame_payload >> 28) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o95_raw_value: u8 = ((frame_payload >> 26) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o96_raw_value: u8 = ((frame_payload >> 24) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o89_raw_value: u8 = ((frame_payload >> 22) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o90_raw_value: u8 = ((frame_payload >> 20) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_i_o91_raw_value: u8 = ((frame_payload >> 18) & 3) as u8;
                let aux_i_o92 = AuxIO922561015550::from(aux_i_o92_raw_value);
                let aux_i_o85 = AuxIO852561015550::from(aux_i_o85_raw_value);
                let aux_i_o86 = AuxIO862561015550::from(aux_i_o86_raw_value);
                let aux_i_o87 = AuxIO872561015550::from(aux_i_o87_raw_value);
                let aux_i_o88 = AuxIO882561015550::from(aux_i_o88_raw_value);
                let aux_i_o81 = AuxIO812561015550::from(aux_i_o81_raw_value);
                let aux_i_o82 = AuxIO822561015550::from(aux_i_o82_raw_value);
                let aux_i_o83 = AuxIO832561015550::from(aux_i_o83_raw_value);
                let aux_i_o84 = AuxIO842561015550::from(aux_i_o84_raw_value);
                let aux_i_o109 = AuxIO1092561015550::from(aux_i_o109_raw_value);
                let aux_i_o110 = AuxIO1102561015550::from(aux_i_o110_raw_value);
                let aux_i_o111 = AuxIO1112561015550::from(aux_i_o111_raw_value);
                let aux_i_o112 = AuxIO1122561015550::from(aux_i_o112_raw_value);
                let aux_i_o105 = AuxIO1052561015550::from(aux_i_o105_raw_value);
                let aux_i_o106 = AuxIO1062561015550::from(aux_i_o106_raw_value);
                let aux_i_o107 = AuxIO1072561015550::from(aux_i_o107_raw_value);
                let aux_i_o108 = AuxIO1082561015550::from(aux_i_o108_raw_value);
                let aux_i_o101 = AuxIO1012561015550::from(aux_i_o101_raw_value);
                let aux_i_o102 = AuxIO1022561015550::from(aux_i_o102_raw_value);
                let aux_i_o103 = AuxIO1032561015550::from(aux_i_o103_raw_value);
                let aux_i_o104 = AuxIO1042561015550::from(aux_i_o104_raw_value);
                let aux_i_o97 = AuxIO972561015550::from(aux_i_o97_raw_value);
                let aux_i_o98 = AuxIO982561015550::from(aux_i_o98_raw_value);
                let aux_i_o99 = AuxIO992561015550::from(aux_i_o99_raw_value);
                let aux_i_o100 = AuxIO1002561015550::from(aux_i_o100_raw_value);
                let aux_i_o93 = AuxIO932561015550::from(aux_i_o93_raw_value);
                let aux_i_o94 = AuxIO942561015550::from(aux_i_o94_raw_value);
                let aux_i_o95 = AuxIO952561015550::from(aux_i_o95_raw_value);
                let aux_i_o96 = AuxIO962561015550::from(aux_i_o96_raw_value);
                let aux_i_o89 = AuxIO892561015550::from(aux_i_o89_raw_value);
                let aux_i_o90 = AuxIO902561015550::from(aux_i_o90_raw_value);
                let aux_i_o91 = AuxIO912561015550::from(aux_i_o91_raw_value);
                DecodedFrame::Auxio4 {
                    aux_i_o92_raw_value,
                    aux_i_o85_raw_value,
                    aux_i_o86_raw_value,
                    aux_i_o87_raw_value,
                    aux_i_o88_raw_value,
                    aux_i_o81_raw_value,
                    aux_i_o82_raw_value,
                    aux_i_o83_raw_value,
                    aux_i_o84_raw_value,
                    aux_i_o109_raw_value,
                    aux_i_o110_raw_value,
                    aux_i_o111_raw_value,
                    aux_i_o112_raw_value,
                    aux_i_o105_raw_value,
                    aux_i_o106_raw_value,
                    aux_i_o107_raw_value,
                    aux_i_o108_raw_value,
                    aux_i_o101_raw_value,
                    aux_i_o102_raw_value,
                    aux_i_o103_raw_value,
                    aux_i_o104_raw_value,
                    aux_i_o97_raw_value,
                    aux_i_o98_raw_value,
                    aux_i_o99_raw_value,
                    aux_i_o100_raw_value,
                    aux_i_o93_raw_value,
                    aux_i_o94_raw_value,
                    aux_i_o95_raw_value,
                    aux_i_o96_raw_value,
                    aux_i_o89_raw_value,
                    aux_i_o90_raw_value,
                    aux_i_o91_raw_value,
                    aux_i_o92,
                    aux_i_o85,
                    aux_i_o86,
                    aux_i_o87,
                    aux_i_o88,
                    aux_i_o81,
                    aux_i_o82,
                    aux_i_o83,
                    aux_i_o84,
                    aux_i_o109,
                    aux_i_o110,
                    aux_i_o111,
                    aux_i_o112,
                    aux_i_o105,
                    aux_i_o106,
                    aux_i_o107,
                    aux_i_o108,
                    aux_i_o101,
                    aux_i_o102,
                    aux_i_o103,
                    aux_i_o104,
                    aux_i_o97,
                    aux_i_o98,
                    aux_i_o99,
                    aux_i_o100,
                    aux_i_o93,
                    aux_i_o94,
                    aux_i_o95,
                    aux_i_o96,
                    aux_i_o89,
                    aux_i_o90,
                    aux_i_o91,
                }
            }
            2566746622u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_brake_stroke_axle5_right_raw_value: u8 =
                    ((frame_payload >> 57) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_brake_stroke_axle5_left_raw_value: u8 =
                    ((frame_payload >> 54) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_brake_stroke_axle4_right_raw_value: u8 =
                    ((frame_payload >> 51) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_brake_stroke_axle4_left_raw_value: u8 =
                    ((frame_payload >> 48) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_brake_stroke_axle3_right_raw_value: u8 =
                    ((frame_payload >> 45) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_brake_stroke_axle3_left_raw_value: u8 =
                    ((frame_payload >> 42) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_brake_stroke_axle2_right_raw_value: u8 =
                    ((frame_payload >> 39) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_brake_stroke_axle2_left_raw_value: u8 =
                    ((frame_payload >> 36) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_brake_stroke_axle1_right_raw_value: u8 =
                    ((frame_payload >> 33) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trailer_brake_stroke_axle1_left_raw_value: u8 =
                    ((frame_payload >> 30) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tractor_brake_stroke_axle5_right_raw_value: u8 =
                    ((frame_payload >> 27) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tractor_brake_stroke_axle5_left_raw_value: u8 =
                    ((frame_payload >> 24) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tractor_brake_stroke_axle4_right_raw_value: u8 =
                    ((frame_payload >> 21) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tractor_brake_stroke_axle4_left_raw_value: u8 =
                    ((frame_payload >> 18) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tractor_brake_stroke_axle3_right_raw_value: u8 =
                    ((frame_payload >> 15) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tractor_brake_stroke_axle3_left_raw_value: u8 =
                    ((frame_payload >> 12) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tractor_brake_stroke_axle2_right_raw_value: u8 =
                    ((frame_payload >> 9) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tractor_brake_stroke_axle2_left_raw_value: u8 =
                    ((frame_payload >> 6) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tractor_brake_stroke_axle1_right_raw_value: u8 =
                    ((frame_payload >> 3) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let tractor_brake_stroke_axle1_left_raw_value: u8 = (frame_payload & 7) as u8;
                let trailer_brake_stroke_axle5_right = TrailerBrakeStrokeAxle5Right2566746622::from(
                    trailer_brake_stroke_axle5_right_raw_value,
                );
                let trailer_brake_stroke_axle5_left = TrailerBrakeStrokeAxle5Left2566746622::from(
                    trailer_brake_stroke_axle5_left_raw_value,
                );
                let trailer_brake_stroke_axle4_right = TrailerBrakeStrokeAxle4Right2566746622::from(
                    trailer_brake_stroke_axle4_right_raw_value,
                );
                let trailer_brake_stroke_axle4_left = TrailerBrakeStrokeAxle4Left2566746622::from(
                    trailer_brake_stroke_axle4_left_raw_value,
                );
                let trailer_brake_stroke_axle3_right = TrailerBrakeStrokeAxle3Right2566746622::from(
                    trailer_brake_stroke_axle3_right_raw_value,
                );
                let trailer_brake_stroke_axle3_left = TrailerBrakeStrokeAxle3Left2566746622::from(
                    trailer_brake_stroke_axle3_left_raw_value,
                );
                let trailer_brake_stroke_axle2_right = TrailerBrakeStrokeAxle2Right2566746622::from(
                    trailer_brake_stroke_axle2_right_raw_value,
                );
                let trailer_brake_stroke_axle2_left = TrailerBrakeStrokeAxle2Left2566746622::from(
                    trailer_brake_stroke_axle2_left_raw_value,
                );
                let trailer_brake_stroke_axle1_right = TrailerBrakeStrokeAxle1Right2566746622::from(
                    trailer_brake_stroke_axle1_right_raw_value,
                );
                let trailer_brake_stroke_axle1_left = TrailerBrakeStrokeAxle1Left2566746622::from(
                    trailer_brake_stroke_axle1_left_raw_value,
                );
                let tractor_brake_stroke_axle5_right = TractorBrakeStrokeAxle5Right2566746622::from(
                    tractor_brake_stroke_axle5_right_raw_value,
                );
                let tractor_brake_stroke_axle5_left = TractorBrakeStrokeAxle5Left2566746622::from(
                    tractor_brake_stroke_axle5_left_raw_value,
                );
                let tractor_brake_stroke_axle4_right = TractorBrakeStrokeAxle4Right2566746622::from(
                    tractor_brake_stroke_axle4_right_raw_value,
                );
                let tractor_brake_stroke_axle4_left = TractorBrakeStrokeAxle4Left2566746622::from(
                    tractor_brake_stroke_axle4_left_raw_value,
                );
                let tractor_brake_stroke_axle3_right = TractorBrakeStrokeAxle3Right2566746622::from(
                    tractor_brake_stroke_axle3_right_raw_value,
                );
                let tractor_brake_stroke_axle3_left = TractorBrakeStrokeAxle3Left2566746622::from(
                    tractor_brake_stroke_axle3_left_raw_value,
                );
                let tractor_brake_stroke_axle2_right = TractorBrakeStrokeAxle2Right2566746622::from(
                    tractor_brake_stroke_axle2_right_raw_value,
                );
                let tractor_brake_stroke_axle2_left = TractorBrakeStrokeAxle2Left2566746622::from(
                    tractor_brake_stroke_axle2_left_raw_value,
                );
                let tractor_brake_stroke_axle1_right = TractorBrakeStrokeAxle1Right2566746622::from(
                    tractor_brake_stroke_axle1_right_raw_value,
                );
                let tractor_brake_stroke_axle1_left = TractorBrakeStrokeAxle1Left2566746622::from(
                    tractor_brake_stroke_axle1_left_raw_value,
                );
                DecodedFrame::Bsa {
                    trailer_brake_stroke_axle5_right_raw_value,
                    trailer_brake_stroke_axle5_left_raw_value,
                    trailer_brake_stroke_axle4_right_raw_value,
                    trailer_brake_stroke_axle4_left_raw_value,
                    trailer_brake_stroke_axle3_right_raw_value,
                    trailer_brake_stroke_axle3_left_raw_value,
                    trailer_brake_stroke_axle2_right_raw_value,
                    trailer_brake_stroke_axle2_left_raw_value,
                    trailer_brake_stroke_axle1_right_raw_value,
                    trailer_brake_stroke_axle1_left_raw_value,
                    tractor_brake_stroke_axle5_right_raw_value,
                    tractor_brake_stroke_axle5_left_raw_value,
                    tractor_brake_stroke_axle4_right_raw_value,
                    tractor_brake_stroke_axle4_left_raw_value,
                    tractor_brake_stroke_axle3_right_raw_value,
                    tractor_brake_stroke_axle3_left_raw_value,
                    tractor_brake_stroke_axle2_right_raw_value,
                    tractor_brake_stroke_axle2_left_raw_value,
                    tractor_brake_stroke_axle1_right_raw_value,
                    tractor_brake_stroke_axle1_left_raw_value,
                    trailer_brake_stroke_axle5_right,
                    trailer_brake_stroke_axle5_left,
                    trailer_brake_stroke_axle4_right,
                    trailer_brake_stroke_axle4_left,
                    trailer_brake_stroke_axle3_right,
                    trailer_brake_stroke_axle3_left,
                    trailer_brake_stroke_axle2_right,
                    trailer_brake_stroke_axle2_left,
                    trailer_brake_stroke_axle1_right,
                    trailer_brake_stroke_axle1_left,
                    tractor_brake_stroke_axle5_right,
                    tractor_brake_stroke_axle5_left,
                    tractor_brake_stroke_axle4_right,
                    tractor_brake_stroke_axle4_left,
                    tractor_brake_stroke_axle3_right,
                    tractor_brake_stroke_axle3_left,
                    tractor_brake_stroke_axle2_right,
                    tractor_brake_stroke_axle2_left,
                    tractor_brake_stroke_axle1_right,
                    tractor_brake_stroke_axle1_left,
                }
            }
            2566845950u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let road_surface_temp_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_air_inlet_temp_raw_value: f64 =
                    ((frame_payload >> 40) & 255) as f64 + -40.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let ambient_air_temp_raw_value: f64 =
                    ((frame_payload >> 24) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let cab_interior_temp_raw_value: f64 =
                    ((frame_payload >> 8) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let barometric_press_raw_value: f64 = (frame_payload & 255) as f64 * 0.5;
                DecodedFrame::Amb {
                    road_surface_temp_raw_value,
                    eng_air_inlet_temp_raw_value,
                    ambient_air_temp_raw_value,
                    cab_interior_temp_raw_value,
                    barometric_press_raw_value,
                }
            }
            2566840062u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_air_start_press_raw_value: f64 = (frame_payload & 255) as f64 * 4.0;
                DecodedFrame::Air2 {
                    eng_air_start_press_raw_value,
                }
            }
            2566827774u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let air_compressor_status_raw_value: u8 = ((frame_payload >> 48) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let air_suspension_supply_press_raw_value: f64 =
                    ((frame_payload >> 40) & 255) as f64 * 8.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_equipment_supply_press_raw_value: f64 =
                    ((frame_payload >> 32) & 255) as f64 * 8.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let service_brake_air_press_circuit2_raw_value: f64 =
                    ((frame_payload >> 24) & 255) as f64 * 8.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let service_brake_air_press_circuit1_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 * 8.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let parking_and_or_trailer_air_press_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 * 8.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let pneumatic_supply_press_raw_value: f64 = (frame_payload & 255) as f64 * 8.0;
                let air_compressor_status =
                    AirCompressorStatus2566827774::from(air_compressor_status_raw_value);
                DecodedFrame::Air1 {
                    air_compressor_status_raw_value,
                    air_suspension_supply_press_raw_value,
                    aux_equipment_supply_press_raw_value,
                    service_brake_air_press_circuit2_raw_value,
                    service_brake_air_press_circuit1_raw_value,
                    parking_and_or_trailer_air_press_raw_value,
                    pneumatic_supply_press_raw_value,
                    air_compressor_status,
                }
            }
            2566846974u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let steer_axle_lube_press_raw_value: f64 =
                    ((frame_payload >> 56) & 255) as f64 * 4.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let steer_axle_temp_raw_value: f64 = (frame_payload & 255) as f64 + -40.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let drive_axle_lube_press_raw_value: f64 =
                    ((frame_payload >> 32) & 255) as f64 * 4.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let drive_axle_temp_raw_value: f64 = ((frame_payload >> 24) & 255) as f64 + -40.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let drive_axle_lift_air_press_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 * 4.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let drive_axle_location_raw_value: u8 = ((frame_payload >> 8) & 255) as u8;
                DecodedFrame::Ai {
                    steer_axle_lube_press_raw_value,
                    steer_axle_temp_raw_value,
                    drive_axle_lube_press_raw_value,
                    drive_axle_temp_raw_value,
                    drive_axle_lift_air_press_raw_value,
                    drive_axle_location_raw_value,
                }
            }
            2633935614u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_turbo_wastegate_valve_pos_raw_value: f64 =
                    ((frame_payload >> 24) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_gs_mss_flw_snsr_feling_correction_raw_value: f64 =
                    ((frame_payload >> 32) & 255) as f64 + -125.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_dsired_abs_intake_manifold_press_raw_value: f64 =
                    ((frame_payload >> 8) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_gas_fuel_correction_factor_raw_value: u8 = (frame_payload & 255) as u8;
                DecodedFrame::Af2 {
                    eng_turbo_wastegate_valve_pos_raw_value,
                    eng_gs_mss_flw_snsr_feling_correction_raw_value,
                    eng_dsired_abs_intake_manifold_press_raw_value,
                    eng_gas_fuel_correction_factor_raw_value,
                }
            }
            2566803966u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let rqed_acc_distance_mode_raw_value: u8 = ((frame_payload >> 5) & 7) as u8;
                let rqed_acc_distance_mode =
                    RqedAccDistanceMode2566803966::from(rqed_acc_distance_mode_raw_value);
                DecodedFrame::Acc2 {
                    rqed_acc_distance_mode_raw_value,
                    rqed_acc_distance_mode,
                }
            }
            2432593918u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let acc_distance_alert_signal_raw_value: u8 = ((frame_payload >> 52) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let acc_system_shutoff_warning_raw_value: u8 = ((frame_payload >> 50) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let acc_target_detected_raw_value: u8 = ((frame_payload >> 48) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let road_curvature_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.0078125 + -250.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let adptve_cruise_ctrl_set_distance_mode_raw_value: u8 =
                    ((frame_payload >> 27) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let adaptive_cruise_ctrl_mode_raw_value: u8 = ((frame_payload >> 24) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let adaptive_cruise_ctrl_set_speed_raw_value: u8 =
                    ((frame_payload >> 16) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let distance_to_forward_vehicle_raw_value: u8 = ((frame_payload >> 8) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let speed_of_forward_vehicle_raw_value: u8 = (frame_payload & 255) as u8;
                let acc_distance_alert_signal =
                    AccDistanceAlertSignal2432593918::from(acc_distance_alert_signal_raw_value);
                let acc_system_shutoff_warning =
                    AccSystemShutoffWarning2432593918::from(acc_system_shutoff_warning_raw_value);
                let acc_target_detected =
                    AccTargetDetected2432593918::from(acc_target_detected_raw_value);
                let adptve_cruise_ctrl_set_distance_mode =
                    AdptveCruiseCtrlSetDistanceMode2432593918::from(
                        adptve_cruise_ctrl_set_distance_mode_raw_value,
                    );
                let adaptive_cruise_ctrl_mode =
                    AdaptiveCruiseCtrlMode2432593918::from(adaptive_cruise_ctrl_mode_raw_value);
                DecodedFrame::Acc1 {
                    acc_distance_alert_signal_raw_value,
                    acc_system_shutoff_warning_raw_value,
                    acc_target_detected_raw_value,
                    road_curvature_raw_value,
                    adptve_cruise_ctrl_set_distance_mode_raw_value,
                    adaptive_cruise_ctrl_mode_raw_value,
                    adaptive_cruise_ctrl_set_speed_raw_value,
                    distance_to_forward_vehicle_raw_value,
                    speed_of_forward_vehicle_raw_value,
                    acc_distance_alert_signal,
                    acc_system_shutoff_warning,
                    acc_target_detected,
                    adptve_cruise_ctrl_set_distance_mode,
                    adaptive_cruise_ctrl_mode,
                }
            }
            2633935102u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let articulation_angle_raw_value: f64 = (frame_payload & 255) as f64 + -125.0;
                DecodedFrame::Ac {
                    articulation_angle_raw_value,
                }
            }
            2633927934u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_level_raw_value: f64 = ((frame_payload >> 32) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_press2_raw_value: f64 = ((frame_payload >> 24) & 255) as f64 * 16.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_press1_raw_value: f64 = ((frame_payload >> 16) & 255) as f64 * 16.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_temp2_raw_value: f64 = ((frame_payload >> 8) & 255) as f64 + -40.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let aux_temp1_raw_value: f64 = (frame_payload & 255) as f64 + -40.0;
                DecodedFrame::Aai {
                    aux_level_raw_value,
                    aux_press2_raw_value,
                    aux_press1_raw_value,
                    aux_temp2_raw_value,
                    aux_temp1_raw_value,
                }
            }
            2566847998u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_blower_bypass_valve_pos_raw_value: f64 = (frame_payload & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let eng_gas_supply_press_raw_value: f64 =
                    ((frame_payload >> 8) & 65535) as f64 * 0.5;
                DecodedFrame::A1 {
                    eng_blower_bypass_valve_pos_raw_value,
                    eng_gas_supply_press_raw_value,
                }
            }
            2565406462u32 => {
                todo!();
                let frame_payload: u64 = LE::read_u64(frame.data());
                let address_busy_raw_value: Option<u8> = Some(((frame_payload >> 32) & 255) as u8);
                let frame_payload: u64 = LE::read_u64(frame.data());
                let control_byte_raw_value: u8 = (frame_payload & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let parameter_group_number_raw_value: u32 =
                    ((frame_payload >> 40) & 16777215) as u32;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let group_function_value_raw_value: u8 = ((frame_payload >> 8) & 255) as u8;
                todo!();
                let frame_payload: u64 = LE::read_u64(frame.data());
                let address_access_denied_raw_value: Option<u8> =
                    Some(((frame_payload >> 32) & 255) as u8);
                todo!();
                let frame_payload: u64 = LE::read_u64(frame.data());
                let address_negative_acknowledgement_raw_value: Option<u8> =
                    Some(((frame_payload >> 32) & 255) as u8);
                todo!();
                let frame_payload: u64 = LE::read_u64(frame.data());
                let address_acknowledged_raw_value: Option<u8> =
                    Some(((frame_payload >> 32) & 255) as u8);
                let control_byte = ControlByte2565406462::from(control_byte_raw_value);
                DecodedFrame::Ackm {
                    address_busy_raw_value,
                    control_byte_raw_value,
                    parameter_group_number_raw_value,
                    group_function_value_raw_value,
                    address_access_denied_raw_value,
                    address_negative_acknowledgement_raw_value,
                    address_acknowledged_raw_value,
                    control_byte,
                }
            }
            2566763262u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let prtclt_trp_intrmdt_gs_tmp_prlmnry_fmi_raw_value: u8 =
                    ((frame_payload >> 58) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let prtclt_trp_dlt_press_preliminary_fmi_raw_value: u8 =
                    ((frame_payload >> 53) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let exhaust_gas_temp2_preliminary_fmi_raw_value: u8 =
                    ((frame_payload >> 48) & 31) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let particulate_trap_diff_press_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.1;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let prtclate_trap_intermediate_gas_temp_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let exhaust_gas_temp2_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.03125 + -273.0;
                DecodedFrame::Atm1 {
                    prtclt_trp_intrmdt_gs_tmp_prlmnry_fmi_raw_value,
                    prtclt_trp_dlt_press_preliminary_fmi_raw_value,
                    exhaust_gas_temp2_preliminary_fmi_raw_value,
                    particulate_trap_diff_press_raw_value,
                    prtclate_trap_intermediate_gas_temp_raw_value,
                    exhaust_gas_temp2_raw_value,
                }
            }
            2566803198u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let status2_of_doors_raw_value: u8 = ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let ramp_wheel_chair_lift_pos_raw_value: u8 = ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let pos_of_doors_raw_value: u8 = (frame_payload & 15) as u8;
                let status2_of_doors = Status2OfDoors2566803198::from(status2_of_doors_raw_value);
                let ramp_wheel_chair_lift_pos =
                    RampWheelChairLiftPos2566803198::from(ramp_wheel_chair_lift_pos_raw_value);
                let pos_of_doors = PosOfDoors2566803198::from(pos_of_doors_raw_value);
                DecodedFrame::Dc1 {
                    status2_of_doors_raw_value,
                    ramp_wheel_chair_lift_pos_raw_value,
                    pos_of_doors_raw_value,
                    status2_of_doors,
                    ramp_wheel_chair_lift_pos,
                    pos_of_doors,
                }
            }
            2565870334u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let fifth_wheel_roll_warning_indicator_raw_value: u8 =
                    ((frame_payload >> 48) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let fifth_wheel_roll_moment_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 10.0 + -320000.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let fifth_wheel_drawbar_force_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 10.0 + -320000.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let fifth_wheel_vertical_force_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 5.0;
                let fifth_wheel_roll_warning_indicator =
                    FifthWheelRollWarningIndicator2565870334::from(
                        fifth_wheel_roll_warning_indicator_raw_value,
                    );
                DecodedFrame::Fwss1 {
                    fifth_wheel_roll_warning_indicator_raw_value,
                    fifth_wheel_roll_moment_raw_value,
                    fifth_wheel_drawbar_force_raw_value,
                    fifth_wheel_vertical_force_raw_value,
                    fifth_wheel_roll_warning_indicator,
                }
            }
            2566762238u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let fifth_wheel_slider_lock_indicator_raw_value: u8 =
                    ((frame_payload >> 16) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let fifth_wheel_slider_pos_raw_value: f64 =
                    ((frame_payload >> 8) & 255) as f64 * 10.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let ffth_whl_lck_couple_status_indicator_raw_value: u8 =
                    ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let ffth_whl_lck_rady_to_couple_indicator_raw_value: u8 =
                    ((frame_payload >> 4) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let fifth_wheel_error_status_raw_value: u8 = (frame_payload & 15) as u8;
                let fifth_wheel_slider_lock_indicator =
                    FifthWheelSliderLockIndicator2566762238::from(
                        fifth_wheel_slider_lock_indicator_raw_value,
                    );
                let ffth_whl_lck_couple_status_indicator =
                    FfthWhlLckCoupleStatusIndicator2566762238::from(
                        ffth_whl_lck_couple_status_indicator_raw_value,
                    );
                let ffth_whl_lck_rady_to_couple_indicator =
                    FfthWhlLckRadyToCoupleIndicator2566762238::from(
                        ffth_whl_lck_rady_to_couple_indicator_raw_value,
                    );
                let fifth_wheel_error_status =
                    FifthWheelErrorStatus2566762238::from(fifth_wheel_error_status_raw_value);
                DecodedFrame::Fwss2 {
                    fifth_wheel_slider_lock_indicator_raw_value,
                    fifth_wheel_slider_pos_raw_value,
                    ffth_whl_lck_couple_status_indicator_raw_value,
                    ffth_whl_lck_rady_to_couple_indicator_raw_value,
                    fifth_wheel_error_status_raw_value,
                    fifth_wheel_slider_lock_indicator,
                    ffth_whl_lck_couple_status_indicator,
                    ffth_whl_lck_rady_to_couple_indicator,
                    fifth_wheel_error_status,
                }
            }
            2364543998u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let roll_and_pitch_measurement_latency_raw_value: f64 =
                    ((frame_payload >> 56) & 255) as f64 * 0.5;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let pitch_and_roll_compensated_raw_value: u8 = ((frame_payload >> 54) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let pitch_rate_figure_of_merit_raw_value: u8 = ((frame_payload >> 52) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let roll_angle_figure_of_merit_raw_value: u8 = ((frame_payload >> 50) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let pitch_angle_figure_of_merit_raw_value: u8 = ((frame_payload >> 48) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let pitch_rate_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.002 + -64.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let roll_angle_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.002 + -64.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let pitch_angle_raw_value: f64 = (frame_payload & 65535) as f64 * 0.002 + -64.0;
                let pitch_and_roll_compensated =
                    PitchAndRollCompensated2364543998::from(pitch_and_roll_compensated_raw_value);
                let pitch_rate_figure_of_merit =
                    PitchRateFigureOfMerit2364543998::from(pitch_rate_figure_of_merit_raw_value);
                let roll_angle_figure_of_merit =
                    RollAngleFigureOfMerit2364543998::from(roll_angle_figure_of_merit_raw_value);
                let pitch_angle_figure_of_merit =
                    PitchAngleFigureOfMerit2364543998::from(pitch_angle_figure_of_merit_raw_value);
                DecodedFrame::Ssi {
                    roll_and_pitch_measurement_latency_raw_value,
                    pitch_and_roll_compensated_raw_value,
                    pitch_rate_figure_of_merit_raw_value,
                    roll_angle_figure_of_merit_raw_value,
                    pitch_angle_figure_of_merit_raw_value,
                    pitch_rate_raw_value,
                    roll_angle_raw_value,
                    pitch_angle_raw_value,
                    pitch_and_roll_compensated,
                    pitch_rate_figure_of_merit,
                    roll_angle_figure_of_merit,
                    pitch_angle_figure_of_merit,
                }
            }
            2566846718u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_oil_level_measurement_status_raw_value: u8 =
                    ((frame_payload >> 60) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_oil_level_countdown_timer_raw_value: u8 =
                    ((frame_payload >> 56) & 15) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_oil_level_high_low_raw_value: f64 =
                    ((frame_payload >> 48) & 255) as f64 * 0.5 + -62.5;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_oil_temp_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.03125 + -273.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_oil_press_raw_value: f64 = ((frame_payload >> 24) & 255) as f64 * 16.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_filter_diff_press_raw_value: f64 =
                    ((frame_payload >> 16) & 255) as f64 * 2.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let trans_oil_level_raw_value: f64 = ((frame_payload >> 8) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let clutch_press_raw_value: f64 = (frame_payload & 255) as f64 * 16.0;
                let trans_oil_level_measurement_status =
                    TransOilLevelMeasurementStatus2566846718::from(
                        trans_oil_level_measurement_status_raw_value,
                    );
                let trans_oil_level_countdown_timer = TransOilLevelCountdownTimer2566846718::from(
                    trans_oil_level_countdown_timer_raw_value,
                );
                DecodedFrame::Trf1 {
                    trans_oil_level_measurement_status_raw_value,
                    trans_oil_level_countdown_timer_raw_value,
                    trans_oil_level_high_low_raw_value,
                    trans_oil_temp_raw_value,
                    trans_oil_press_raw_value,
                    trans_filter_diff_press_raw_value,
                    trans_oil_level_raw_value,
                    clutch_press_raw_value,
                    trans_oil_level_measurement_status,
                    trans_oil_level_countdown_timer,
                }
            }
            2566846462u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let battery_potential_switched_raw_value: f64 =
                    ((frame_payload >> 48) & 65535) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let electrical_potential_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let charging_system_potential_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let alt_current_raw_value: u8 = ((frame_payload >> 8) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let net_battery_current_raw_value: f64 = (frame_payload & 255) as f64 + -125.0;
                DecodedFrame::Vep1 {
                    battery_potential_switched_raw_value,
                    electrical_potential_raw_value,
                    charging_system_potential_raw_value,
                    alt_current_raw_value,
                    net_battery_current_raw_value,
                }
            }
            2566760702u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let wrless_communication_network_type2_raw_value: u8 =
                    ((frame_payload >> 32) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let network_signal_strength2_raw_value: f64 =
                    ((frame_payload >> 24) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let network_antenna_status2_raw_value: u8 = ((frame_payload >> 16) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let network_service_status2_raw_value: u8 = ((frame_payload >> 8) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let network_transceiver_status2_raw_value: u8 = (frame_payload & 255) as u8;
                let wrless_communication_network_type2 =
                    WrlessCommunicationNetworkType22566760702::from(
                        wrless_communication_network_type2_raw_value,
                    );
                let network_antenna_status2 =
                    NetworkAntennaStatus22566760702::from(network_antenna_status2_raw_value);
                let network_service_status2 =
                    NetworkServiceStatus22566760702::from(network_service_status2_raw_value);
                let network_transceiver_status2 = NetworkTransceiverStatus22566760702::from(
                    network_transceiver_status2_raw_value,
                );
                DecodedFrame::Wcm2 {
                    wrless_communication_network_type2_raw_value,
                    network_signal_strength2_raw_value,
                    network_antenna_status2_raw_value,
                    network_service_status2_raw_value,
                    network_transceiver_status2_raw_value,
                    wrless_communication_network_type2,
                    network_antenna_status2,
                    network_service_status2,
                    network_transceiver_status2,
                }
            }
            2566760958u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let wrless_communication_network_type1_raw_value: u8 =
                    ((frame_payload >> 32) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let network_signal_strength1_raw_value: f64 =
                    ((frame_payload >> 24) & 255) as f64 * 0.4;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let network_antenna_status1_raw_value: u8 = ((frame_payload >> 16) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let network_service_status1_raw_value: u8 = ((frame_payload >> 8) & 255) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let network_transceiver_status1_raw_value: u8 = (frame_payload & 255) as u8;
                let wrless_communication_network_type1 =
                    WrlessCommunicationNetworkType12566760958::from(
                        wrless_communication_network_type1_raw_value,
                    );
                let network_antenna_status1 =
                    NetworkAntennaStatus12566760958::from(network_antenna_status1_raw_value);
                let network_service_status1 =
                    NetworkServiceStatus12566760958::from(network_service_status1_raw_value);
                let network_transceiver_status1 = NetworkTransceiverStatus12566760958::from(
                    network_transceiver_status1_raw_value,
                );
                DecodedFrame::Wcm1 {
                    wrless_communication_network_type1_raw_value,
                    network_signal_strength1_raw_value,
                    network_antenna_status1_raw_value,
                    network_service_status1_raw_value,
                    network_transceiver_status1_raw_value,
                    wrless_communication_network_type1,
                    network_antenna_status1,
                    network_service_status1,
                    network_transceiver_status1,
                }
            }
            2633869310u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let voltage_regulator_enabled_raw_value: u8 = ((frame_payload >> 10) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let voltage_regulator_soft_start_state_raw_value: u8 =
                    ((frame_payload >> 8) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vltg_rgltr_undrfrqncy_cmpnstn_enbld_raw_value: u8 =
                    ((frame_payload >> 6) & 3) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vltg_rgltr_v_ar_pwr_fctr_oprting_mode_raw_value: u8 =
                    ((frame_payload >> 3) & 7) as u8;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let vltg_rglator_load_compensation_mode_raw_value: u8 = (frame_payload & 7) as u8;
                let voltage_regulator_enabled =
                    VoltageRegulatorEnabled2633869310::from(voltage_regulator_enabled_raw_value);
                let voltage_regulator_soft_start_state =
                    VoltageRegulatorSoftStartState2633869310::from(
                        voltage_regulator_soft_start_state_raw_value,
                    );
                let vltg_rgltr_undrfrqncy_cmpnstn_enbld =
                    VltgRgltrUndrfrqncyCmpnstnEnbld2633869310::from(
                        vltg_rgltr_undrfrqncy_cmpnstn_enbld_raw_value,
                    );
                let vltg_rgltr_v_ar_pwr_fctr_oprting_mode =
                    VltgRgltrVArPwrFctrOprtingMode2633869310::from(
                        vltg_rgltr_v_ar_pwr_fctr_oprting_mode_raw_value,
                    );
                let vltg_rglator_load_compensation_mode =
                    VltgRglatorLoadCompensationMode2633869310::from(
                        vltg_rglator_load_compensation_mode_raw_value,
                    );
                DecodedFrame::Vrom {
                    voltage_regulator_enabled_raw_value,
                    voltage_regulator_soft_start_state_raw_value,
                    vltg_rgltr_undrfrqncy_cmpnstn_enbld_raw_value,
                    vltg_rgltr_v_ar_pwr_fctr_oprting_mode_raw_value,
                    vltg_rglator_load_compensation_mode_raw_value,
                    voltage_regulator_enabled,
                    voltage_regulator_soft_start_state,
                    vltg_rgltr_undrfrqncy_cmpnstn_enbld,
                    vltg_rgltr_v_ar_pwr_fctr_oprting_mode,
                    vltg_rglator_load_compensation_mode,
                }
            }
            2365433598u32 => {
                let frame_payload: u64 = LE::read_u64(frame.data());
                let gnrtr_otput_voltage_bias_percentage_raw_value: f64 =
                    ((frame_payload >> 32) & 65535) as f64 * 0.1 + -100.0;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let generator_excitation_field_current_raw_value: f64 =
                    ((frame_payload >> 16) & 65535) as f64 * 0.05;
                let frame_payload: u64 = LE::read_u64(frame.data());
                let generator_excitation_field_voltage_raw_value: f64 =
                    (frame_payload & 65535) as f64 * 0.05 + -1605.625;
                DecodedFrame::Vrep {
                    gnrtr_otput_voltage_bias_percentage_raw_value,
                    generator_excitation_field_current_raw_value,
                    generator_excitation_field_voltage_raw_value,
                }
            }
            _ => DecodedFrame::UnknownFrame(frame),
        })
    }
}
